{
  "sbg:batchBy": {
    "criteria": [
      "metadata.sample_id"
    ],
    "type": "criteria"
  },
  "inputs": [
    {
      "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
      "description": "FASTQ reads Illumina paired-end reads from the sequencer.",
      "id": "#fastq",
      "batchType": [
        "metadata.sample_id"
      ],
      "type": [
        {
          "items": "File",
          "type": "array"
        }
      ],
      "sbg:x": -237.3809733195281,
      "sbg:includeInPorts": true,
      "label": "FASTQ",
      "sbg:y": 212.7619826084788
    },
    {
      "description": "Known indels 1000g for BQSR",
      "id": "#indels_1000g_phase1",
      "sbg:suggestedValue": {
        "class": "File",
        "path": "578cf947507c17681a3117ce",
        "name": "1000G_phase1.indels.b37.vcf"
      },
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": 493.33349747128557,
      "label": "1000g phase1 indels",
      "sbg:y": 784.4874569371318
    },
    {
      "sbg:fileTypes": "ZIP",
      "description": "SnpEff database archive used for variant annotation (ZIP)",
      "sbg:suggestedValue": {
        "class": "File",
        "path": "5772b6be507c1752674486c6",
        "name": "GRCh37.75.zip"
      },
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": 2847.91709198551,
      "id": "#database",
      "label": "SnpEff Database",
      "sbg:y": 476.01190258491454
    },
    {
      "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
      "description": "Reference or TAR with BWA reference indices",
      "sbg:suggestedValue": {
        "class": "File",
        "path": "5772b6d9507c1752674486e7",
        "name": "human_g1k_v37_decoy.fasta.tar"
      },
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": -235.00006026692077,
      "id": "#reference",
      "label": "Reference or TAR with BWA reference indices",
      "sbg:y": 64.99434392959608
    },
    {
      "description": "Mills indel database used for BQSR (VCF)",
      "id": "#mills",
      "sbg:suggestedValue": {
        "class": "File",
        "path": "5772b6c9507c1752674486d4",
        "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf"
      },
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": 497.69248452113357,
      "label": "Mills",
      "sbg:y": 959.6157861927989
    },
    {
      "sbg:fileTypes": "VCF,BED",
      "description": "Database with known variants from the population for BQSR",
      "sbg:suggestedValue": {
        "class": "File",
        "path": "5772b6cd507c1752674486d8",
        "name": "dbsnp_137.b37.vcf"
      },
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": 501.4478761867981,
      "id": "#dbsnp",
      "label": "dbsnp",
      "sbg:y": 1125.5502524576098
    },
    {
      "sbg:fileTypes": "BED",
      "description": "Chromosomal intervals of this BED are used for base recalibration and variant calling",
      "sbg:suggestedValue": {
        "class": "File",
        "path": "589b4e30507c177ca71a6361",
        "name": "exome_targets.b37.sorted.bed"
      },
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": 483.0086106992533,
      "id": "#intervals_file",
      "label": "Target BED",
      "sbg:y": 622.1183731735439
    }
  ],
  "sbg:expand_workflow": false,
  "sbg:image_url": "https://igor.sbgenomics.com/ns/brood/images/admin/sbg-public-data/whole-exome-sequencing-bwa-gatk-4-0/33.png",
  "outputs": [
    {
      "source": [
        "#SnpEff.annotated"
      ],
      "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
      "sbg:y": 420.8334095279316,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 3311.488591299131,
      "id": "#annotated",
      "label": "SnpEff Annotated VCF"
    },
    {
      "source": [
        "#GATK_CollectAlignmentSummaryMetrics.summary_metrics"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:y": -361.7214598280106,
      "required": true,
      "sbg:includeInPorts": true,
      "type": [
        "File"
      ],
      "sbg:x": 1452.9683194545223,
      "id": "#summary_metrics",
      "label": "Alignment Summary Metrics"
    },
    {
      "source": [
        "#GATK_MergeVcfs.output"
      ],
      "sbg:fileTypes": "VCF",
      "sbg:y": 584.3873356308401,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 2176.446981402047,
      "id": "#raw_vcf",
      "label": "Raw VCF"
    },
    {
      "source": [
        "#FastQC.report_html"
      ],
      "sbg:fileTypes": "HTML, B64HTML",
      "sbg:y": 420.00009813573973,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 492.33342430326985,
      "id": "#b64html",
      "label": "FastQC report"
    },
    {
      "source": [
        "#SnpEff.summary"
      ],
      "sbg:fileTypes": "HTML, CSV",
      "sbg:y": 222.16667213042462,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 3313.833806077601,
      "id": "#b64html_1",
      "label": "SnpEff summary"
    },
    {
      "source": [
        "#GATK_MergeVcfs_1.output"
      ],
      "sbg:fileTypes": "VCF",
      "sbg:y": 441.6121204267674,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 1857.9685866276025,
      "id": "#gvcf",
      "label": "gVCF"
    },
    {
      "source": [
        "#SAMtools_Depth.coverage"
      ],
      "sbg:y": -512.3077108112308,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "string"
      ],
      "sbg:x": 1447.6925506140449,
      "id": "#coverage",
      "label": "coverage"
    },
    {
      "source": [
        "#SAMtools_Depth.percentage_coverage_larger_than_limit"
      ],
      "sbg:y": -655.3846382897277,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "float"
      ],
      "sbg:x": 1452.3078681787822,
      "id": "#percentage_coverage_larger_than_20",
      "label": "percentage_coverage_larger_than_20"
    },
    {
      "source": [
        "#Sambamba_Merge.merged_bam"
      ],
      "sbg:fileTypes": "BAM",
      "sbg:y": -132.30771636962982,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 1555.2566554546452,
      "id": "#aligned_reads_bwa_mem",
      "label": "Aligned Reads Bwa mem"
    },
    {
      "source": [
        "#GATK_CollectHsMetrics.output"
      ],
      "sbg:fileTypes": "TXT",
      "sbg:y": -846.666687011719,
      "required": false,
      "sbg:includeInPorts": true,
      "type": [
        "null",
        "File"
      ],
      "sbg:x": 1456.0000813802087,
      "id": "#hs_metrics",
      "label": "HS Metrics"
    }
  ],
  "sbg:toolkitVersion": "4.0.2.0",
  "requirements": [],
  "hints": [
    {
      "class": "sbg:AWSInstanceType",
      "value": "c4.2xlarge;ebs-gp2;160"
    },
    {
      "class": "sbg:GoogleInstanceType",
      "value": "n1-standard-8;pd-ssd;160"
    },
    {
      "class": "sbg:OpenStackInstanceHint",
      "value": "c4.2xlarge;storage;160"
    }
  ],
  "sbg:toolAuthor": "Broad Institute",
  "class": "Workflow",
  "sbg:batchInput": "#fastq",
  "description": "This Whole Exome Sequencing (WES) workflow identifies variants from a human exome experiment by using the [Broad Institute's](https://software.broadinstitute.org/gatk/best-practices/) best-practices workflow for alignment and variant calling.\n\nThe WES workflos analyzes all protein-coding genes in a genome, known as the exome. The exome is estimated to comprise ~1-2% of the genome yet contains ~85% of recognized disease-causing mutations.\n\nExome sequencing achieves better coverage compared to whole genome sequencing. However, variations affecting a gene\u2019s coding regions can leave potential effects on regulatory regions and various control mechanisms undetected. As such, the WES workflow is optimally applied to areas where changes in proteins are expected with a greater probability or are of a higher significance. For example, WES can be used for detecting variants (i.e. mutations) in known disease-causing genes as well as for the detection of novel gene-disease associations.\n\n##Workflow structure\n\nThe workflow follows the Broad Institute\u2019s best practices and utilizes the Broad Institute's GATK tools with additional quality metrics reporting tools. Sequenced reads are first aligned with the BWA-MEM Bundle tool, which optionally removes duplicates and sorts BAM files. In parallel with the alignment the assessment of the quality of sequenced reads is performed using Babraham Institute's tool, FastQC. The next step uses algorithms developed by the Broad Institute to improve the qualities of sequenced bases (Base Quality Score Recalibration - BQSR). Generated BAM files are passed to GATK HaplotypeCaller for variant calling.  Detected variants are subjected to filtering with predefined hard thresholds and annotation (SnpEff).  For more information on how variant calling is performed, please refer to the [Broad Institute's web site](https://software.broadinstitute.org/gatk/best-practices/).\n\nThe WES workflow utilizes human reference genome hg19, hg37, and hg38, as well as several public databases. All reference files must correspond to the same reference genome (HG19, GRCh 37, HG38, etc.). If some of the reference files have contigs not listed in the reference genome, the workflow cannot be executed.\n\n## Required inputs\n\n- Reference genome or TAR with BWA reference indices\n- FASTQ reads Illumina paired-end reads from the sequencer\n- Target exome BED file\n- DBSNP database - Database with known variants from the population used with BQSR and for annotation in variant calling (HaplotypeCaller)\n- Mills indel database used for BQSR (VCF)\n- Known indels 1000g for BQSR\n- SnpEff database archive used for variant annotation (ZIP)\n\n\n## Outputs\n- Coverage metrics showing the distribution of the number of reads covering regions of the exome\n- Alignment metrics with statistics about the quality of the alignment\n- Aligned Reads from BWA-MEM (BAM)\n- Annotated and filtered variant calling format file (VCF)\n- Raw variant calling format file (VCF)\n- Genomic variant calling format file (gVCF)\n- FastQC Report containing reports about quality of the sequenced data (adapter contamination, quality distribution, GC content,...)\n\n## Expected workflow performance\n\nBelow, we present three benchmarks showcasing the expected variant detection and run-time performance of the WES workflow.\n \nWe use the [Genome in a bottle](ftp://ftp-trace.ncbi.nlm.nih.gov/giab/ftp/release) truth dataset and the [hap.py](https://github.com/Illumina/hap.py) variant evaluation tool to determine the sensitivity and precision of the workflow for both SNPs and Indels following the GA4GH recommended practices. We note that the observed precision and sensitivity measures are in line with the expected performance for this sample. Further, we observe that both the transition to transversion ratio for SNPs and the ratio of heterozygous to homozygous indels calls are in the expected ranges for a whole-genome context. Only the calls that have the PASS flag in the VCF filter column were used for calculating the reported performance metrics, reflecting the performance that can be expected when the workflow is used in a production scenario.\n\n| Sample            | SNP Precision | SNP Recall | SNP F-measure | INDEL Precision | INDEL Recall | INDEL F-measure |\n|-------------------|---------------|------------|---------------|-----------------|--------------|-----------------|\n| HG001 TruSeq 135x | 99.3156       | 96.4127    | 97.8426       | 77.8433         | 79.5941      | 78.709          |\n| HG002 Oslo 190x   | 99.828        | 99.4878    | 99.6576       | 92.88           | 90.3208      | 91.5825         |\n\n\nFinally, we measured the end-to-end run-time of the workflow. The total execution time for 135x sample is 2 hours and 53 minutes on the C4.2xlarge AWS instance.\n\n| Sample-coverage | Size of Gzipped FASTQs [Gb] | Alignment and BAM preparation | Variant calling | Variant filtering and annotation | TotalCost (AWS spot instance) |\n|-----------------|-----------------------------|-------------------------------|-----------------|-------------------|-------------------------------|\n| NA12878-135x    | 7.6                         | 2h 14m                        | 30m             | 6m                | 0.40                          |\n| HG002 Oslo 190x | 7.2                          | 2h 21m                         | 26m             | 6m                | 0.47                          |\n\n## Important issues\n\n- In order to complete the execution of the workflow, the following fields in the metadata of FASTQ files must be set: **Paired-end, Sample ID, Platform and Library**.\n- BWA-MEM index files are packed together with the reference genome in the TAR files which are available on SBG Public files. With that indexing step in the pipeline can be skipped and its total execution will be faster.\n- If HG38 reference and high-coverage FASTQ files (e.g. larger than 150x) are used the GATK HaplotypeCaller might fail due to lack of memory. Providing more memory to its Java virtual machine and larger instance for the workflow should be done in that case.\n- If HG38 is used it will automatically perform alt contig processing from [Broad](https://gatkforums.broadinstitute.org/gatk/discussion/8017/how-to-map-reads-to-a-reference-with-alternate-contigs-like-grch38) by including additional alt index from bwa.kit. The alignments on primary assembly reference will be done correctly and for proper alignment on alt contigs please run additional post processing.",
  "sbg:projectName": "SBG Public Data",
  "sbg:publisher": "sbg",
  "steps": [
    {
      "inputs": [
        {
          "source": [
            "#reference"
          ],
          "id": "#SBG_Untar_fasta.input_tar_with_reference"
        }
      ],
      "sbg:y": -130.5728811650625,
      "outputs": [
        {
          "id": "#SBG_Untar_fasta.output_fasta"
        }
      ],
      "run": {
        "arguments": [],
        "sbg:homepage": "https://igor.sbgenomics.com/",
        "sbg:toolkitVersion": "v1.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "outputBinding": {
              "glob": "{*.fasta,*.fa,*.fa.gz,*.fasta.gz}",
              "sbg:inheritMetadataFrom": "#input_tar_with_reference"
            },
            "type": [
              "File"
            ],
            "description": "Unpacked fasta file from the input archive.",
            "label": "Unpacked fasta file",
            "id": "#output_fasta"
          }
        ],
        "label": "SBG Untar fasta",
        "successCodes": [],
        "sbg:createdOn": 1466002722,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          {
            "class": "Expression",
            "script": "{\n  reference_file = $job.inputs.input_tar_with_reference.path.split('/')[$job.inputs.input_tar_with_reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'tar -xf ' + reference_file    \n  }\n  else{\n    return 'echo Passing input file '\n  }\n}",
            "engine": "#cwl-js-engine"
          }
        ],
        "temporaryFailCodes": [],
        "sbg:project": "bix-demo/sbgtools-demo",
        "y": -130.5728811650625,
        "stdout": "",
        "x": 108.33339318964445,
        "class": "CommandLineTool",
        "sbg:latestRevision": 11,
        "description": "SBG Untar fasta is primarily used for extracting FASTA file from TAR with more different files. For example, extracting FASTA from BWA-MEM's index TAR.\n\n**Inputs**\n\nTAR (containing FASTA).\n\n**Outputs**\n\nFA/FASTA/FA.GZ/FASTA.GZ from TAR.\n\n\n\n**Important: TAR.GZ format is not supported. \nIf only decompress operation is required use SBG Decompressor tool.**",
        "sbg:projectName": "SBGTools - Demo New",
        "inputs": [
          {
            "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
            "label": "Input archive file with fasta",
            "required": true,
            "sbg:stageInput": "link",
            "type": [
              "File"
            ],
            "description": "The input archive file to be unpacked.",
            "id": "#input_tar_with_reference"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "vladimirk",
        "sbg:sbgMaintained": false,
        "sbg:revision": 11,
        "sbg:toolkit": "SBGTools",
        "sbg:categories": [
          "Other"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-untar-fasta/11",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1466002722,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1466003214,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "bix-demo",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1466004710,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1466004986,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1466005081,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1466005599,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1466007588,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1466077480,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1500468272,
            "sbg:revisionNotes": "Description updated.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1500468316,
            "sbg:revisionNotes": "description",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1500472209,
            "sbg:revisionNotes": "Important with bold",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1500472520,
            "sbg:revisionNotes": "description - bold important",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 11
          }
        ],
        "sbg:toolAuthor": "Vladimir Kovacevic, Seven Bridges Genomics",
        "sbg:license": "Apache License 2.0",
        "sbg:createdBy": "bix-demo",
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "58b79c627f95",
            "dockerPull": "images.sbgenomics.com/markop/sbg-decompressor:1.0"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          }
        ],
        "sbg:id": "admin/sbg-public-data/sbg-untar-fasta/12",
        "sbg:cmdPreview": "echo Passing input file",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1500472520,
        "sbg:revisionNotes": "description - bold important",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "bix-demo",
          "vladimirk"
        ],
        "sbg:job": {
          "inputs": {
            "input_tar_with_reference": {
              "class": "File",
              "path": "input_file.fasta",
              "secondaryFiles": [],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          }
        }
      },
      "sbg:x": 108.33339318964445,
      "id": "#SBG_Untar_fasta"
    },
    {
      "inputs": [
        {
          "default": 1,
          "id": "#Sambamba_Merge.reserved_threads"
        },
        {
          "default": 4,
          "id": "#Sambamba_Merge.num_of_threads"
        },
        {
          "id": "#Sambamba_Merge.mem_mb"
        },
        {
          "id": "#Sambamba_Merge.compression_level"
        },
        {
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ],
          "id": "#Sambamba_Merge.bams"
        }
      ],
      "sbg:y": 11.538349064137936,
      "outputs": [
        {
          "id": "#Sambamba_Merge.merged_bam"
        }
      ],
      "run": {
        "arguments": [
          {
            "position": 10,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  comm=''\n  if(in_var.length==1)\n  {\n  \tcomm+='. '\n  \n  \tif(in_var[0].secondaryFiles!=undefined && in_var[0].secondaryFiles.length>0)\n  \t{\n    \t comm+='| cp '\n    \t comm+=in_var[0].secondaryFiles[0].path\n    \t comm+=' . '\n  \t}\n  }\n  return comm\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "position": 5,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n\n  function common_end(strs) {\n  \n  \t// Find minimum length of file name\n  \n  \tls = [];\n    whole = [];\n\tfor (i=0;i<strs.length;i++){\n  \t\tls = ls.concat(strs[i].path.split('/').pop().length);\n        whole = whole.concat(strs[i].path.length);\n  \t}\n \tl = Math.min.apply(Math,ls);\n  \n  \t// Loop from the end through characters and check if they are the same for all\n  \n \tind = 0;\n \tflag = 0;\n \tfor (i=1;i<=l;i++){\n    \tfor (j=1;j<strs.length;j++){\n      \t\tif (strs[0].path[whole[0]-i]!=strs[j].path[whole[j]-i]){\n        \tflag = 1;\n        \tbreak\n      \t\t}\n   \t\t}\n   \t \tif (flag == 1){\n   \t \t  \tbreak\n   \t    } else {\n      \t\tind = ind + 1;\n        }\n  \t }\n  \n  // Assign and return longest ending common substring\n  if (ind>0) {\n  \tcomstr = strs[0].path.slice(-ind);\n  } else {\n    comstr = 'different_extensions'\n  }\n  \n  return comstr\n  \n  }\n  \n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  prefix=''\n  \n  if(in_var.length==1) { \n    return '' // Input will be just passed to output\n  }else if (in_var[0].metadata){\n \t   if (\"sample_id\" in in_var[0].metadata){   \n  \t\t prefix = in_var[0].metadata[\"sample_id\"];      \n   \t    } else {\n   \t\t  prefix = 'sample_unknown';\n        }\n   \n  }else {\n    prefix = 'sample_unknown';   \n  }\n  \n  // Create joint name and add the merged suffix\n  joint_name = prefix + '_' + common_end(in_var);\n  name = joint_name.split('.').slice(0,-1).join('.') + '.merged.bam'\n  \n  \n  \n  return name\n  \n}\n\n\n",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "sbg:project": "bix-demo/sambamba-0-5-9-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "BAM",
            "label": "Merged bam",
            "outputBinding": {
              "glob": "*.bam",
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "sbg:inheritMetadataFrom": "#bams"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Merged bam.",
            "id": "#merged_bam"
          }
        ],
        "label": "Sambamba Merge",
        "successCodes": [],
        "sbg:createdOn": 1458920412,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "id": "bix-demo/sambamba-0-5-9-demo/sambamba-merge-0-5-9/18",
        "baseCommand": [
          {
            "class": "Expression",
            "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  comm=''\n  if(in_var instanceof Array) // Always true\n  {\n    if(in_var.length==1)\n    {\n      comm+='cp '\n      \n    }\n  \telse if(in_var.length>1)\n  \t{\n    \n    \tcomm+='/opt/sambamba_0.5.9/sambamba_v0.5.9 merge '\n    \tif($job.inputs.num_of_threads)\n  \t\t{\n    \t\tcomm+=' -t '\n    \t\tcomm+=$job.inputs.num_of_threads\n  \t\t}\n  \t\tif($job.inputs.compression_level)\n  \t\t{\n   \t\t\tcomm+=' -l '\n    \t\tcomm+=$job.inputs.compression_level\n  \t\t}\n   \t\t\n    }\n  \n  \t\n\n  }\n  return comm\n}",
            "engine": "#cwl-js-engine"
          }
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if ($job.inputs.reserved_threads) {\n    \n    return $job.inputs.reserved_threads\n    \n  } else if ($job.inputs.num_of_threads) {\n    \n    return $job.inputs.num_of_threads\n    \n  } else {\n    \n    return 1\n  }\n  \n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
          }
        ],
        "y": 11.538349064137936,
        "stdout": "",
        "x": 632.4362270437216,
        "class": "CommandLineTool",
        "sbg:latestRevision": 18,
        "description": "Sambamba Merge is used for merging several sorted BAM files into one. The sorting order of all the files must be the same, and it is maintained in the output file.",
        "sbg:projectName": "Sambamba 0.5.9 - Demo",
        "inputs": [
          {
            "sbg:toolDefaultValue": "1",
            "label": "Number of threads reserved on the instance",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of threads reserved on the instance passed to the scheduler (number of jobs).",
            "id": "#reserved_threads"
          },
          {
            "sbg:category": "Merge",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of threads to use for compression/decompression.",
            "label": "Number of threads to use",
            "id": "#num_of_threads"
          },
          {
            "sbg:toolDefaultValue": "1024",
            "sbg:stageInput": null,
            "id": "#mem_mb",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory in MB.",
            "label": "Memory in MB"
          },
          {
            "sbg:category": "Merge",
            "type": [
              "null",
              "int"
            ],
            "description": "Level of compression for merged BAM file, number from 0 to 9.",
            "label": "Compression level",
            "id": "#compression_level"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 5,
              "separate": true
            },
            "sbg:fileTypes": "BAM",
            "id": "#bams",
            "required": true,
            "sbg:category": "Merge",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "bams"
              }
            ],
            "description": "Input BAM files.",
            "label": "BAM files"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "vladimirk",
        "sbg:sbgMaintained": false,
        "sbg:revision": 18,
        "sbg:toolkit": "Sambamba",
        "sbg:toolkitVersion": "0.5.9",
        "sbg:createdBy": "nevenam.sudo",
        "sbg:links": [
          {
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lomereiter/sambamba",
            "label": "Source code"
          },
          {
            "id": "https://github.com/lomereiter/sambamba/wiki",
            "label": "Wiki"
          },
          {
            "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9",
            "label": "Download"
          },
          {
            "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html",
            "label": "Publication"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1458920412,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam.sudo",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1458920459,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam.sudo",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1462963630,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1462963660,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "nevenam",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1468849940,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1470679574,
            "sbg:revisionNotes": "Changed to common name",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1470752287,
            "sbg:revisionNotes": "Smart naming introduced",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1470753233,
            "sbg:revisionNotes": "Corrected single file case",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1470753950,
            "sbg:revisionNotes": "Changed glob",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1470756561,
            "sbg:revisionNotes": "Updated sample id tag",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1470757408,
            "sbg:revisionNotes": "Added inherit metadata",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1472994215,
            "sbg:revisionNotes": "Added support for receiving bams as list inside list.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1473000652,
            "sbg:revisionNotes": "Glob returns *.bam",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1473071971,
            "sbg:revisionNotes": "Added support for input.bams received as list of one-element-lists.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1473257751,
            "sbg:revisionNotes": "Added protection from null (10)",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1473424164,
            "sbg:revisionNotes": "Returned revision that accepts list of one-element lists.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1475064412,
            "sbg:revisionNotes": "Added resource parameters",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1475064631,
            "sbg:revisionNotes": "Changed mem error",
            "sbg:modifiedBy": "ognjenm",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1476706820,
            "sbg:revisionNotes": "Added reserved number of threads.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 18
          }
        ],
        "sbg:toolAuthor": "Artem Tarasov",
        "sbg:license": "GNU General Public License v2.0 only",
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "sbg:id": "admin/sbg-public-data/sambamba-merge-0-5-9/18",
        "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 merge  -t 6  /path/to/uuu_bams.bam  /path/to/uyyy_bams.bam  testmeta__bams.merged.bam",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1476706820,
        "sbg:revisionNotes": "Added reserved number of threads.",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "nevenam",
          "nevenam.sudo",
          "vladimirk",
          "ognjenm"
        ],
        "sbg:job": {
          "inputs": {
            "bams": [
              {
                "class": "File",
                "metadata": {
                  "sample_id": "testmeta"
                },
                "path": "/path/to/uuu_bams.bam",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/uyyy_bams.bam",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "reserved_threads": 2,
            "mem_mb": 2,
            "num_of_threads": 6,
            "compression_level": null
          },
          "allocatedResources": {
            "cpu": 2,
            "mem": 2
          }
        }
      },
      "sbg:x": 632.4362270437216,
      "id": "#Sambamba_Merge"
    },
    {
      "inputs": [
        {
          "id": "#SAMtools_Depth.truncate_depth"
        },
        {
          "id": "#SAMtools_Depth.total_memory_GB"
        },
        {
          "id": "#SAMtools_Depth.output_all_positions"
        },
        {
          "id": "#SAMtools_Depth.output_absolutely_all_positions"
        },
        {
          "id": "#SAMtools_Depth.mapping_quality_min"
        },
        {
          "id": "#SAMtools_Depth.ignore_short_reads"
        },
        {
          "default": 20,
          "id": "#SAMtools_Depth.coverage_limit"
        },
        {
          "source": [
            "#intervals_file"
          ],
          "id": "#SAMtools_Depth.bed"
        },
        {
          "id": "#SAMtools_Depth.base_quality_min"
        },
        {
          "source": [
            "#Sambamba_Merge.merged_bam"
          ],
          "id": "#SAMtools_Depth.alignment_input_file"
        }
      ],
      "sbg:y": -580.0000000000002,
      "outputs": [
        {
          "id": "#SAMtools_Depth.percentage_coverage_larger_than_limit"
        },
        {
          "id": "#SAMtools_Depth.coverage_per_position"
        },
        {
          "id": "#SAMtools_Depth.coverage"
        }
      ],
      "run": {
        "arguments": [
          {
            "position": 1000,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n\n filepath = [].concat($job.inputs.alignment_input_file)[0].path\n filename = filepath.split(\"/\").pop()\n file_dot_sep = filename.split(\".\")\n file_ext = file_dot_sep[file_dot_sep.length-1]\n\n filename = filename + '.depth'\n cmd = ' > ' + filename\n \n if($job.inputs.coverage_limit)\n   cov_limit = $job.inputs.coverage_limit\n else\n   cov_limit = 20\n   \n cmd2 = 'awk \\'BEGIN {FS = \\\"\\\\t\\\"; } ; {sum+=$3;cnt+=1;if($3 > ' + cov_limit + ') perc+=1} END {printf(\\\"%.0f %.2f%% \\\", sum / cnt ,perc / cnt * 100)}\\' ' + filename\n \n return cmd + ';' + cmd2 + ' > coverage.txt'\n\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "sbg:project": "marouf/samtools-1-3-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "outputBinding": {
              "glob": "coverage.txt",
              "loadContents": true,
              "outputEval": {
                "class": "Expression",
                "script": "{ \n  return $self[0].contents.split(' ')[1]\n}",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              "float"
            ],
            "description": "Percentage of coverage larger than limit.",
            "label": "Percentage of coverage larger than limit",
            "id": "#percentage_coverage_larger_than_limit"
          },
          {
            "sbg:fileTypes": "DEPTH",
            "label": "Coverage per position",
            "outputBinding": {
              "glob": "*.depth",
              "sbg:inheritMetadataFrom": "#alignment_input_file"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Coverage per position.",
            "id": "#coverage_per_position"
          },
          {
            "outputBinding": {
              "glob": "coverage.txt",
              "loadContents": true,
              "outputEval": {
                "class": "Expression",
                "script": "{ \n  return $self[0].contents.split(' ')[0]\n}",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              "string"
            ],
            "description": "Calculated average coverage per position.",
            "label": "Average coverage",
            "id": "#coverage"
          }
        ],
        "label": "SAMtools Depth",
        "successCodes": [],
        "sbg:createdOn": 1503418357,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "id": "marouf/samtools-1-3-demo/samtools-depth-1-3/8",
        "baseCommand": [
          "/opt/samtools-1.3/samtools",
          "depth"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  \n  if($job.inputs.total_memory_GB)\n  {\n   total_memory_MB = 1024 * $job.inputs.total_memory_GB\n  }\n  else\n  {\n    total_memory_MB = 1024 * 1\n  }\n  \n  return(total_memory_MB)\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/marouf/samtools:1.3"
          }
        ],
        "y": -580.0000000000002,
        "stdout": "",
        "x": 1243.0769230769238,
        "class": "CommandLineTool",
        "sbg:latestRevision": 8,
        "description": "**SAMtools depth** computes the depth at each position or region.",
        "sbg:projectName": "SAMtools 1.3 Demo",
        "inputs": [
          {
            "sbg:toolDefaultValue": "8000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-m"
            },
            "sbg:stageInput": null,
            "description": "Truncate reported depth at a maximum of INT reads.",
            "sbg:category": "configuration",
            "type": [
              "null",
              "int"
            ],
            "id": "#truncate_depth",
            "label": "Truncate reported depth"
          },
          {
            "sbg:category": "Configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "In GB, default 1.",
            "label": "Total memory",
            "id": "#total_memory_GB"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-a"
            },
            "label": "Output all positions",
            "sbg:category": "configuration",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output all positions (including those with zero depth).",
            "id": "#output_all_positions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-aa"
            },
            "sbg:stageInput": null,
            "id": "#output_absolutely_all_positions",
            "sbg:category": "configuration",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output absolutely all positions, including unused reference sequences. Note that when used in conjunction with a BED file the -a option may sometimes operate as if -aa was specified if the reference sequence has coverage outside of the region specified in the BED file.",
            "label": "Output absolutely all positions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-Q"
            },
            "label": "Mapping quality minimum",
            "sbg:category": "configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "Only count reads with mapping quality greater than value.",
            "id": "#mapping_quality_min"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-l"
            },
            "label": "Ignore short reads",
            "sbg:category": "configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "Ignore reads shorter than INT.",
            "id": "#ignore_short_reads"
          },
          {
            "sbg:toolDefaultValue": "20",
            "label": "Set limit coverage",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "Used with calculation of percentage of coverage larger than this value.",
            "id": "#coverage_limit"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-b"
            },
            "sbg:fileTypes": "BED",
            "id": "#bed",
            "required": false,
            "sbg:category": "Configuration",
            "type": [
              "null",
              "File"
            ],
            "description": "Compute depth at list of positions or regions in specified BED FILE.",
            "label": "BED file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-q"
            },
            "sbg:stageInput": null,
            "id": "#base_quality_min",
            "sbg:category": "configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "Only count reads with base quality greater than value.",
            "label": "Base quality minimum"
          },
          {
            "sbg:fileTypes": "BAM,CRAM,SAM",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 7,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n $job.inputs.alignment_input_file.path\n path = $job.inputs.alignment_input_file.path\n len = path.split('/').length\n path = path.split('/')[len-1]\n return path\n \n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true
            },
            "sbg:stageInput": "link",
            "description": "Alignment input file.",
            "required": true,
            "sbg:category": "Input Files",
            "type": [
              "File"
            ],
            "id": "#alignment_input_file",
            "label": "Alignment input file"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "vladimir_obucina",
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/samtools-depth-1-3/8",
        "sbg:toolkit": "SAMtools",
        "sbg:revision": 8,
        "sbg:toolkitVersion": "v1.3",
        "sbg:createdBy": "vladimirk",
        "sbg:links": [
          {
            "id": "http://www.htslib.org",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/samtools/",
            "label": "Source Code"
          },
          {
            "id": "https://sourceforge.net/projects/samtools/files/samtools/",
            "label": "Download"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19505943",
            "label": "Publication"
          },
          {
            "id": "http://www.htslib.org/doc/samtools-1.3.html",
            "label": "Wiki"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1503418357,
            "sbg:revisionNotes": "Copy of marouf/samtools-1-3-demo/samtools-flagstat-1-3/7",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1503419034,
            "sbg:revisionNotes": "init",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1503478232,
            "sbg:revisionNotes": "added self.contents",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1503479638,
            "sbg:revisionNotes": "load contents selected",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503489092,
            "sbg:revisionNotes": "Added calculation of percentage read larger than limit",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1505487492,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimir_obucina",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1505489234,
            "sbg:revisionNotes": "Added coverage_limit label",
            "sbg:modifiedBy": "vladimir_obucina",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1505494007,
            "sbg:revisionNotes": "Removed list of files as option",
            "sbg:modifiedBy": "vladimir_obucina",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1505731255,
            "sbg:revisionNotes": "Changed some descriptions after CWL validation(capital letter, dots...), but the code is the same.",
            "sbg:modifiedBy": "vladimir_obucina",
            "sbg:revision": 8
          }
        ],
        "sbg:toolAuthor": "Heng Li/Sanger Institute,  Bob Handsaker/Broad Institute, James Bonfield/Sanger Institute,",
        "sbg:license": "BSD License, MIT License",
        "sbg:categories": [
          "SAM/BAM-Processing"
        ],
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/samtools-1.3/samtools depth  input.bam   > input.bam.depth;awk 'BEGIN {FS = \"\\t\"; } ; {sum+=$3;cnt+=1;if($3 > 4) perc+=1} END {printf(\"%.0f %.2f%% \", sum / cnt ,perc / cnt * 100)}' input.bam.depth > coverage.txt",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1505731255,
        "sbg:revisionNotes": "Changed some descriptions after CWL validation(capital letter, dots...), but the code is the same.",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "vladimir_obucina",
          "vladimirk"
        ],
        "sbg:job": {
          "inputs": {
            "bed": {
              "class": "File",
              "path": "/path/to/regions.bed",
              "secondaryFiles": [],
              "size": 0
            },
            "total_memory_GB": 1,
            "alignment_input_file": {
              "class": "File",
              "path": "/path/to/the/input.bam",
              "secondaryFiles": [],
              "size": 0
            },
            "coverage_limit": 4
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1024
          }
        }
      },
      "sbg:x": 1243.0769230769238,
      "id": "#SAMtools_Depth"
    },
    {
      "inputs": [
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.verbosity"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.validation_stringency"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.stop_after"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_CollectAlignmentSummaryMetrics.reference"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.quiet"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.metric_accumulation_level"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.memory_per_job"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.max_records_in_ram"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.max_insert_size"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.is_bisulfite_sequenced"
        },
        {
          "source": [
            "#Sambamba_Merge.merged_bam"
          ],
          "id": "#GATK_CollectAlignmentSummaryMetrics.input_bam"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.gcs_max_retries"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.compression_level"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.assume_sorted"
        },
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.adapter_sequence"
        }
      ],
      "sbg:y": -361.6667013830619,
      "outputs": [
        {
          "id": "#GATK_CollectAlignmentSummaryMetrics.summary_metrics"
        }
      ],
      "run": {
        "arguments": [
          {
            "position": 3,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = [].concat($job.inputs.input_bam)[0].path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          }
        ],
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "TXT",
            "label": "Summary metrics",
            "outputBinding": {
              "glob": "*.summary_metrics.txt",
              "sbg:metadata": {},
              "secondaryFiles": [],
              "sbg:inheritMetadataFrom": "#input_bam"
            },
            "type": [
              "File"
            ],
            "description": "File to which the output will be written.",
            "id": "#summary_metrics"
          }
        ],
        "label": "GATK CollectAlignmentSummaryMetrics",
        "successCodes": [],
        "sbg:createdOn": 1500373187,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-collectalignmentsummarymetrics/7",
        "baseCommand": [
          "/opt/gatk-launch",
          "--javaOptions",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "CollectAlignmentSummaryMetrics"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "eab0e70b6629",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.beta.2"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "y": -361.6667013830619,
        "stdout": "",
        "sbg:modifiedBy": "teodora.aleksic",
        "x": 1080.0004099210255,
        "class": "CommandLineTool",
        "sbg:latestRevision": 7,
        "description": "Produces from a SAM/BAM/CRAM file containing summary alignment metrics.\n\n###**Overview**  \n\nCollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.\n\n###**Inputs**  \nA BAM or SAM file.\n\n###**Outputs**  \nAn alignment summary file. \n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         CollectAlignmentSummaryMetrics \\  \n         --reference reference.fasta \\\n         --input input.bam \\\n         --output summary_metrics.txt\n\n###**Common issues**\n\n1) BAM file - Sort order should be coordinate based.\n2) Reference sequence file - Note that while this argument is not required, without it only a small subset of the metrics will be calculated. If reference sequence file is used, sequence index and dictionary are required. This tool requires the exact same FASTA file as the one to which raw reads were aligned.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "sbg:projectName": "GATK 4.0 - Demo",
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 6,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Options",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "verbosity"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "-verbosity",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 4,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true,
              "prefix": "--VALIDATION_STRINGENCY"
            },
            "id": "#validation_stringency",
            "sbg:category": "Options",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency"
              }
            ],
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
            "label": "Validation stringency"
          },
          {
            "sbg:toolDefaultValue": "0",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 9,
              "separate": true,
              "prefix": "--STOP_AFTER"
            },
            "id": "#stop_after",
            "sbg:category": "Options",
            "type": [
              "null",
              "int"
            ],
            "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
            "label": "Stop after"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 3,
              "separate": true,
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA",
            "id": "#reference",
            "required": false,
            "sbg:category": "File inputs",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated. If reference sequence file is used, sequence index and dictionary are required. This tool requires the exact same FASTA file as the one to which raw reads were aligned. Default value: null.",
            "sbg:altPrefix": "-R",
            "label": "Reference sequence"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 4,
              "separate": true,
              "prefix": "--QUIET"
            },
            "sbg:stageInput": null,
            "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#quiet",
            "label": "Quiet"
          },
          {
            "sbg:toolDefaultValue": "ALL_READS",
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 8,
              "separate": true,
              "prefix": "--METRIC_ACCUMULATION_LEVEL"
            },
            "id": "#metric_accumulation_level",
            "sbg:category": "Options",
            "type": [
              "null",
              {
                "items": {
                  "type": "enum",
                  "symbols": [
                    "ALL_READS",
                    "SAMPLE",
                    "LIBRARY",
                    "READ_GROUP"
                  ],
                  "name": "metric_accumulation_level"
                },
                "type": "array"
              }
            ],
            "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
            "sbg:altPrefix": "-LEVEL",
            "label": "Metric accumulation level"
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution options",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
            "id": "#memory_per_job"
          },
          {
            "sbg:toolDefaultValue": "500000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 4,
              "separate": true,
              "prefix": "--MAX_RECORDS_IN_RAM"
            },
            "id": "#max_records_in_ram",
            "sbg:category": "Options",
            "type": [
              "null",
              "int"
            ],
            "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
            "label": "Max records in RAM"
          },
          {
            "sbg:toolDefaultValue": "100000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 9,
              "separate": true,
              "prefix": "--MAX_INSERT_SIZE"
            },
            "id": "#max_insert_size",
            "sbg:category": "Options",
            "type": [
              "null",
              "int"
            ],
            "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
            "label": "Max insert size"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 8,
              "separate": true,
              "prefix": "--IS_BISULFITE_SEQUENCED"
            },
            "sbg:stageInput": null,
            "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "type": [
              "null",
              "float"
            ],
            "sbg:altPrefix": "-BS",
            "label": "Is bisulfite sequenced",
            "id": "#is_bisulfite_sequenced"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--input"
            },
            "sbg:fileTypes": "BAM, SAM",
            "id": "#input_bam",
            "required": true,
            "sbg:category": "File inputs",
            "type": [
              "File"
            ],
            "description": "Input SAM or BAM file.  Required. Note: Sort order should be coordinate based.",
            "sbg:altPrefix": "-I",
            "label": "Input file"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--gcs_max_retries"
            },
            "sbg:stageInput": null,
            "description": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": "-gcs_retries",
            "label": "GCS Max Retries",
            "id": "#gcs_max_retries"
          },
          {
            "sbg:toolDefaultValue": "5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 4,
              "separate": true,
              "prefix": "--COMPRESSION_LEVEL"
            },
            "id": "#compression_level",
            "sbg:category": "Options",
            "type": [
              "null",
              "int"
            ],
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
            "label": "Compression level"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ASSUME_SORTED"
            },
            "sbg:stageInput": null,
            "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
            "sbg:category": "Options",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "-AS",
            "label": "Assume sorted",
            "id": "#assume_sorted"
          },
          {
            "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT",
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 8,
              "separate": true,
              "prefix": "--ADAPTER_SEQUENCE"
            },
            "id": "#adapter_sequence",
            "sbg:category": "Options",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
            "label": "Adapter sequence"
          }
        ],
        "stdin": "",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/14",
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/gatk-4-0-collectalignmentsummarymetrics/7",
        "sbg:toolkit": "GATK 4.0",
        "sbg:revision": 7,
        "sbg:toolkitVersion": "Beta 2",
        "sbg:createdBy": "teodora.aleksic",
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/index.php",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/broadinstitute/gatk",
            "label": "Source Code"
          },
          {
            "id": "https://gatkforums.broadinstitute.org/gatk/discussion/9881/howto-get-started-with-gatk4-beta",
            "label": "Download"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500373187,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/7",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500640338,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/8",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500887421,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/9",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1502718034,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/10",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405173,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/11",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105710,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/12",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1504272977,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/13",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1504275149,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/14",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          }
        ],
        "sbg:toolAuthor": "Broad Institute",
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "SAM/BAM-Processing",
          "Quality-Control",
          "Quantification",
          "GATK-4.0"
        ],
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" CollectAlignmentSummaryMetrics --input /root/folder/example.bam --output example.summary_metrics.txt",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1504275149,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/Picard_CollectAlignmentSummaryMetrics/14",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:job": {
          "inputs": {
            "stop_after": null,
            "max_records_in_ram": null,
            "is_bisulfite_sequenced": 5.480351658898888,
            "reference": {
              "path": "/root/directory/example.fasta"
            },
            "input_bam": {
              "path": "/root/folder/example.bam"
            },
            "memory_per_job": 2048,
            "validation_stringency": null,
            "metric_accumulation_level": null,
            "gcs_max_retries": 7,
            "verbosity": "INFO",
            "compression_level": null,
            "max_insert_size": null,
            "assume_sorted": true,
            "quiet": true,
            "adapter_sequence": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 1080.0004099210255,
      "id": "#GATK_CollectAlignmentSummaryMetrics"
    },
    {
      "inputs": [
        {
          "source": [
            "#GATK_MergeVcfs_2.output"
          ],
          "id": "#SnpEff.variants_file"
        },
        {
          "id": "#SnpEff.use_csv_stats"
        },
        {
          "id": "#SnpEff.up_down_stream_len"
        },
        {
          "id": "#SnpEff.total_memory"
        },
        {
          "id": "#SnpEff.threads"
        },
        {
          "id": "#SnpEff.strict"
        },
        {
          "id": "#SnpEff.stats"
        },
        {
          "id": "#SnpEff.splicesitesize"
        },
        {
          "id": "#SnpEff.splice_region_exons_size"
        },
        {
          "id": "#SnpEff.sequenceontology"
        },
        {
          "id": "#SnpEff.reg"
        },
        {
          "id": "#SnpEff.output_format"
        },
        {
          "id": "#SnpEff.onlyreg"
        },
        {
          "id": "#SnpEff.only_protein"
        },
        {
          "id": "#SnpEff.oicr"
        },
        {
          "id": "#SnpEff.nostats"
        },
        {
          "id": "#SnpEff.no_utr"
        },
        {
          "id": "#SnpEff.no_upstream"
        },
        {
          "id": "#SnpEff.no_shift_hgvs"
        },
        {
          "id": "#SnpEff.no_next_prot"
        },
        {
          "id": "#SnpEff.no_motif"
        },
        {
          "id": "#SnpEff.no_lof"
        },
        {
          "id": "#SnpEff.no_intron"
        },
        {
          "id": "#SnpEff.no_intergenic"
        },
        {
          "id": "#SnpEff.no_interaction"
        },
        {
          "id": "#SnpEff.no_hgvs"
        },
        {
          "id": "#SnpEff.no_genome"
        },
        {
          "id": "#SnpEff.no_downstream"
        },
        {
          "id": "#SnpEff.nextprot"
        },
        {
          "id": "#SnpEff.motif"
        },
        {
          "id": "#SnpEff.max_tsl"
        },
        {
          "id": "#SnpEff.interval"
        },
        {
          "id": "#SnpEff.interaction"
        },
        {
          "id": "#SnpEff.input_format"
        },
        {
          "id": "#SnpEff.hgvs_tr_id"
        },
        {
          "id": "#SnpEff.hgvs_1_letter"
        },
        {
          "id": "#SnpEff.geneid"
        },
        {
          "id": "#SnpEff.format_eff"
        },
        {
          "id": "#SnpEff.filterinterval"
        },
        {
          "source": [
            "#database"
          ],
          "id": "#SnpEff.database"
        },
        {
          "id": "#SnpEff.csvstats"
        },
        {
          "id": "#SnpEff.configuration_file"
        },
        {
          "id": "#SnpEff.classic"
        },
        {
          "id": "#SnpEff.canon"
        },
        {
          "id": "#SnpEff.cancersamples"
        },
        {
          "id": "#SnpEff.cancer"
        },
        {
          "id": "#SnpEff.assembly"
        },
        {
          "id": "#SnpEff.add_lof_tag"
        },
        {
          "id": "#SnpEff.add_hgvs_anno"
        }
      ],
      "sbg:y": 304.61225467251097,
      "outputs": [
        {
          "id": "#SnpEff.summary_text"
        },
        {
          "id": "#SnpEff.summary"
        },
        {
          "id": "#SnpEff.csvstats_file"
        },
        {
          "id": "#SnpEff.annotated"
        }
      ],
      "run": {
        "arguments": [
          {
            "position": 5000,
            "valueFrom": {
              "class": "Expression",
              "script": "{\t\n  filename = [].concat($job.inputs.variants_file)[0].path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    name = basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    name = basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    name = basename.concat(\".snpEff_annotated.vcf\")\n  }\n  return '> ' + name\n}\n",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "position": 0,
            "valueFrom": "-nodownload",
            "separate": true
          },
          {
            "position": 0,
            "valueFrom": "-noLog",
            "separate": true
          }
        ],
        "sbg:project": "vladimirk/snpeff-4-2-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "TXT",
            "label": "Summary",
            "outputBinding": {
              "glob": "*.txt",
              "sbg:inheritMetadataFrom": "#variants_file"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "SnpEff Summary in text format.",
            "id": "#summary_text"
          },
          {
            "sbg:fileTypes": "HTML, CSV",
            "label": "Summary file",
            "outputBinding": {
              "glob": "*.html",
              "sbg:inheritMetadataFrom": "#variants_file"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "SnpEff summary file in HTML or CSV file format.",
            "id": "#summary"
          },
          {
            "sbg:fileTypes": "CSV",
            "label": "CSV summary file",
            "outputBinding": {
              "glob": "*.csv"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "CSV summary file.",
            "id": "#csvstats_file"
          },
          {
            "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
            "label": "SnpEff Annotated file",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\t\n  filename = [].concat($job.inputs.variants_file)[0].path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "sbg:inheritMetadataFrom": "#variants_file"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "SnpEff Annotated file.",
            "id": "#annotated"
          }
        ],
        "label": "SnpEff",
        "successCodes": [],
        "sbg:createdOn": 1459258963,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "id": "vladimirk/snpeff-4-2-demo/snpeff-4-2/38",
        "baseCommand": [
          {
            "class": "Expression",
            "script": "{\n  return 'unzip -o ' + $job.inputs.database.path + ' -d /opt/snpEff ;'\n}",
            "engine": "#cwl-js-engine"
          },
          "java",
          {
            "class": "Expression",
            "script": "{\n  //java -Xmx4g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n  if($job.inputs.total_memory){\n    mem_mb = parseInt($job.inputs.total_memory) * 1024\n  \treturn '-Xmx'.concat(mem_mb, 'M')\n  }\n  \treturn '-Xmx8192M'\n}\n\n",
            "engine": "#cwl-js-engine"
          },
          "-jar",
          "/opt/snpEff/snpEff.jar"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "aae3dcb89b53",
            "dockerPull": "images.sbgenomics.com/vladimirk/snpeff:4.2"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if ($job.inputs.total_memory)\n  {\n    return $job.inputs.total_memory * 1024\n  }\n  \n  else\n  {\n    return 8192\n  }\n}",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "y": 304.61225467251097,
        "stdout": "",
        "x": 3091.2505723833606,
        "class": "CommandLineTool",
        "sbg:latestRevision": 38,
        "description": "SnpEff is a variant annotation and effect prediction\u200b tool. It annotates and predicts the effects of variants on genes, such as amino acid changes.\n\nTypical usage assumes the user chooses inputs that are predicted variants (SNPs, insertions, deletions, and MNPs). This input file is usually the result of a sequencing experiment, and it is usually in variant call format (VCF). SnpEff analyzes the input variants and, in the process, it annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes). The output file can be in several file formats. The most common format is VCF.\n\nThere is also a command line option to control the amount of RAM in MB [-Xmx%m] for java, which is a custom parameter.",
        "sbg:projectName": "SnpEff 4.2 - Demo",
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 2001,
              "separate": true
            },
            "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
            "id": "#variants_file",
            "required": true,
            "sbg:category": "File type inputs",
            "type": [
              "File"
            ],
            "description": "Input variants file.",
            "label": "Input variants file"
          },
          {
            "sbg:toolDefaultValue": "CSV",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if ($job.inputs.use_csv_stats)\n  {\n    if ($job.inputs.csvstats)\n    {\n      return '-csvStats ' + $job.inputs.csvstats.concat(\".snpeffsummary.csv\")\n    }\n    else\n    {\n      return '-csvStats ' + [].concat($job.inputs.variants_file)[0].path.split(\"/\").splice(-1)[0].split(\".\")[0].concat(\".snpeffsummary.csv\")\n    }\n  }\n}\n\n",
                "engine": "#cwl-js-engine"
              },
              "separate": true
            },
            "id": "#use_csv_stats",
            "sbg:category": "Statistics",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use CSV statistics for metrics output.",
            "label": "Use CSV statistics"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 490,
              "separate": true,
              "prefix": "-upDownStreamLen"
            },
            "sbg:stageInput": null,
            "id": "#up_down_stream_len",
            "sbg:category": "Database optins",
            "type": [
              "null",
              "int"
            ],
            "description": "Set upstream downstream interval length (in bases).",
            "label": "Upstream downstream interval length"
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Memory for the task [Gb]",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "int"
            ],
            "description": "RAM requirement for the java process execution [Gb].",
            "id": "#total_memory"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 280,
              "separate": true,
              "prefix": "-t"
            },
            "id": "#threads",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use multiple threads (implies '-noStats'). Default: False.",
            "label": "Use multiple threads (implies '-noStats')"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 480,
              "separate": true,
              "prefix": "-strict"
            },
            "sbg:stageInput": null,
            "id": "#strict",
            "sbg:category": "Database optins",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Only use 'validated' transcripts (i.e. sequence has been checked). Default: false.",
            "label": "Only use validated transcripts"
          },
          {
            "sbg:toolDefaultValue": "snpEff_summary.html",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 60,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if ($job.inputs.stats)\n  {\n    return $job.inputs.stats.concat(\".snpeffsummary.html\")\n  }\n  else\n  {\n    return [].concat($job.inputs.variants_file)[0].path.split(\"/\").splice(-1)[0].split(\".\")[0].concat(\".snpeffsummary.html\")\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true,
              "prefix": "-stats"
            },
            "id": "#stats",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "string"
            ],
            "description": "Name of stats file (summary).",
            "sbg:altPrefix": "-s",
            "label": "Name of stats file (summary)"
          },
          {
            "sbg:toolDefaultValue": "2",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 430,
              "separate": true,
              "prefix": "--spliceSiteSize"
            },
            "id": "#splicesitesize",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "int"
            ],
            "description": "Set size for splice sites (donor and acceptor) in bases.",
            "sbg:altPrefix": "-ss",
            "label": "Set size for splice sites (donor and acceptor) in bases"
          },
          {
            "sbg:toolDefaultValue": "3",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 440,
              "separate": true,
              "prefix": "-spliceRegionExonSize"
            },
            "id": "#splice_region_exons_size",
            "sbg:category": "Database options",
            "type": [
              "null",
              "int"
            ],
            "description": "Set size for splice site region within exons. Default: 3 bases.",
            "label": "Set size for splice site region within exons"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 250,
              "separate": true,
              "prefix": "-sequenceOntology"
            },
            "id": "#sequenceontology",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use Sequence Ontology terms. Default: false.",
            "label": "Use Sequence Ontology terms"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 420,
              "separate": true,
              "prefix": "-reg"
            },
            "label": "Regulation track to use (this option can be used add several times)",
            "sbg:category": "Other input types",
            "type": [
              "null",
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "name": "reg"
              }
            ],
            "description": "Regulation track to use (this option can be used add several times).",
            "id": "#reg"
          },
          {
            "sbg:toolDefaultValue": "vcf",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 50,
              "separate": true,
              "prefix": "-o"
            },
            "id": "#output_format",
            "sbg:category": "Other input types",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "txt",
                  "vcf",
                  "gatk",
                  "bed",
                  "bedAnn"
                ],
                "name": "output_format"
              }
            ],
            "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
            "label": "Ouput format"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 400,
              "separate": true,
              "prefix": "-onlyReg"
            },
            "label": "Only use regulation tracks",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Only use regulation tracks.",
            "id": "#onlyreg"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 410,
              "separate": true,
              "prefix": "-onlyProtein"
            },
            "id": "#only_protein",
            "sbg:category": "Database optins",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Only use protein coding transcripts. Default: false.",
            "label": "Only protein"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 240,
              "separate": true,
              "prefix": "-oicr"
            },
            "id": "#oicr",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Add OICR tag in VCF file. Default: false.",
            "label": "Add OICR tag in VCF file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 70,
              "separate": true,
              "prefix": "-noStats"
            },
            "label": "Do not create stats (summary) file",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not create stats (summary) file.",
            "id": "#nostats"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 130,
              "separate": true,
              "prefix": "-no-utr"
            },
            "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes",
            "sbg:category": "Results filter options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes.",
            "id": "#no_utr"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 120,
              "separate": true,
              "prefix": "-no-upstream"
            },
            "label": "Do not show UPSTREAM changes",
            "sbg:category": "Results filter options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not show UPSTREAM changes.",
            "id": "#no_upstream"
          },
          {
            "sbg:toolDefaultValue": "False",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 230,
              "separate": true,
              "prefix": "-noShiftHgvs"
            },
            "sbg:stageInput": null,
            "description": "Do not shift variants according to HGVS notation (most 3prime end).",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#no_shift_hgvs",
            "label": "Do not shift variants according to HGVS"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 390,
              "separate": true,
              "prefix": "-noNextProt"
            },
            "sbg:stageInput": null,
            "id": "#no_next_prot",
            "sbg:category": "Database options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable NextProt annotations.",
            "label": "Disable NextProt annotations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 380,
              "separate": true,
              "prefix": "-noMotif"
            },
            "sbg:stageInput": null,
            "id": "#no_motif",
            "sbg:category": "Database options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable motif annotations.",
            "label": "Disable motif annotations"
          },
          {
            "sbg:toolDefaultValue": "False",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 220,
              "separate": true,
              "prefix": "-noLof"
            },
            "id": "#no_lof",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not add LOF and NMD annotations.",
            "label": "Do not add LOF and NMD annotations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 110,
              "separate": true,
              "prefix": "-no-intron"
            },
            "label": "Do not show INTRON changes",
            "sbg:category": "Results filter options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not show INTRON changes.",
            "id": "#no_intron"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 100,
              "separate": true,
              "prefix": "-no-intergenic"
            },
            "label": "Do not show INTERGENIC changes",
            "sbg:category": "Results filter options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not show INTERGENIC changes.",
            "id": "#no_intergenic"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 370,
              "separate": true,
              "prefix": "-noInteraction"
            },
            "id": "#no_interaction",
            "sbg:category": "Database options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable interaction annotations. Default: false.",
            "label": "Disable interaction annotations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 210,
              "separate": true,
              "prefix": "-noHgvs"
            },
            "sbg:stageInput": null,
            "id": "#no_hgvs",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not add HGVS annotations.",
            "label": "Do not add HGVS annotations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 360,
              "separate": true,
              "prefix": "-noGenome"
            },
            "sbg:stageInput": null,
            "id": "#no_genome",
            "sbg:category": "Database options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not load any genomic database (e.g. annotate using custom files).",
            "label": "Do not load any genomic database"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 90,
              "separate": true,
              "prefix": "-no-downstream"
            },
            "label": "Do not show DOWNSTREAM changes",
            "sbg:category": "Results filter options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not show DOWNSTREAM changes.",
            "id": "#no_downstream"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 350,
              "separate": true,
              "prefix": "-nextProt"
            },
            "label": "Annotate using NextProt (requires NextProt database)",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Annotate using NextProt (requires NextProt database).",
            "id": "#nextprot"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 340,
              "separate": true,
              "prefix": "-motif"
            },
            "label": "Annotate using motifs (requires Motif database)",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Annotate using motifs (requires Motif database).",
            "id": "#motif"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 330,
              "separate": true,
              "prefix": "-maxTSL"
            },
            "sbg:stageInput": null,
            "id": "#max_tsl",
            "sbg:category": "Database options",
            "type": [
              "null",
              "int"
            ],
            "description": "Only use transcripts having Transcript Support Level lower than <TSL_number>.",
            "label": "Max TSL"
          },
          {
            "sbg:fileTypes": "interval",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 320,
              "separate": true,
              "prefix": "-interval"
            },
            "sbg:stageInput": "link",
            "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).",
            "required": false,
            "sbg:category": "Other input types",
            "type": [
              "null",
              "File"
            ],
            "id": "#interval",
            "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)"
          },
          {
            "sbg:toolDefaultValue": "TRUE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 310,
              "separate": true,
              "prefix": "-interaction"
            },
            "id": "#interaction",
            "sbg:category": "Database options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Annotate using inteactions (requires interaciton database). Default: true.",
            "label": "Annotate using interactions"
          },
          {
            "sbg:toolDefaultValue": "vcf",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 40,
              "separate": true,
              "prefix": "-i"
            },
            "id": "#input_format",
            "sbg:category": "Other input types",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "vcf",
                  " txt",
                  " pileup",
                  " bed"
                ],
                "name": "input_format"
              }
            ],
            "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
            "label": "Input format"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 190,
              "separate": true,
              "prefix": "-hgvsTrId"
            },
            "label": "Use transcript ID in HGVS",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use transcript ID in HGVS notation. Default: false.",
            "id": "#hgvs_tr_id"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 180,
              "separate": true,
              "prefix": "-hgvs1LetterAa"
            },
            "sbg:stageInput": null,
            "id": "#hgvs_1_letter",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use one letter Amino acid codes in HGVS notation. Default: false.",
            "label": "Use one letter Amino acid codes in HGVS"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 170,
              "separate": true,
              "prefix": "-geneId"
            },
            "id": "#geneid",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use gene ID instead of gene name (VCF output). Default: false.",
            "label": "Use gene ID instead of gene name (VCF output)"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 160,
              "separate": true,
              "prefix": "-formatEff"
            },
            "label": "Use EFF field",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use 'EFF' field compatible with older versions (instead of 'ANN').",
            "id": "#format_eff"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 80,
              "separate": true,
              "prefix": "--filterInterval"
            },
            "sbg:fileTypes": "interval",
            "id": "#filterinterval",
            "required": false,
            "sbg:category": "Results filter options",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array",
                "name": "filterinterval"
              }
            ],
            "description": "Only analyze changes that intersect with the intervals specified in this file.",
            "sbg:altPrefix": "-fi",
            "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 2000,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if (!$job.inputs.assembly)\n  {\n    input_database = $job.inputs.database\n    full_name = input_database.path.split('/')[input_database.path.split('/').length-1] \n    name = full_name.slice(0, -4) // Cut .zip extension\n    return name\n  }\n  else\n  {\n    return $job.inputs.assembly\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true
            },
            "sbg:fileTypes": "ZIP",
            "id": "#database",
            "required": true,
            "sbg:category": "File type inputs",
            "type": [
              "File"
            ],
            "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
            "label": "SnpEff database file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 20,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if ($job.inputs.csvstats)\n  {\n    return '-csvStats ' + $job.inputs.csvstats.concat(\".csv\")\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true
            },
            "label": "Create CSV summary file instead of HTML",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "string"
            ],
            "description": "Create CSV summary file instead of HTML.",
            "id": "#csvstats"
          },
          {
            "sbg:fileTypes": "config",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 260,
              "separate": true,
              "prefix": "-c"
            },
            "sbg:stageInput": "link",
            "description": "Specify config file.",
            "required": false,
            "sbg:category": "Generic options",
            "type": [
              "null",
              "File"
            ],
            "id": "#configuration_file",
            "label": "Configuration file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 10,
              "separate": true,
              "prefix": "-classic"
            },
            "label": "Use old style annotations",
            "sbg:category": "General options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use old style annotations instead of Sequence Ontology and Hgvs.",
            "id": "#classic"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 300,
              "separate": true,
              "prefix": "-canon"
            },
            "label": "Only use canonical transcripts",
            "sbg:category": "Database options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Only use canonical transcripts.",
            "id": "#canon"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 150,
              "separate": true,
              "prefix": "-cancerSamples"
            },
            "sbg:fileTypes": "TXT",
            "id": "#cancersamples",
            "required": false,
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "File"
            ],
            "description": "Two column TXT file defining 'original \\t derived' samples.",
            "label": "Two column TXT file defining 'original and derived' samples"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 140,
              "separate": true,
              "prefix": "-cancer"
            },
            "id": "#cancer",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Perform 'cancer' comparisons (Somatic vs Germline).",
            "label": "Perform 'cancer' comparisons (Somatic vs Germline)"
          },
          {
            "sbg:category": "Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Assembly corresponding to the snpEff database used (e.g. GRCh37.75; GRCh38.p19; hg19).",
            "label": "Assembly",
            "id": "#assembly"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 200,
              "separate": true,
              "prefix": "-lof"
            },
            "label": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags",
            "sbg:category": "Other input types",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.",
            "id": "#add_lof_tag"
          },
          {
            "sbg:toolDefaultValue": "TRUE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 170,
              "separate": true,
              "prefix": "-hgvs"
            },
            "id": "#add_hgvs_anno",
            "sbg:category": "Annotations options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use HGVS annotations for amino acid sub-field. Default: true.",
            "label": "Use HGVS annotations for amino acid sub-field"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "jrandjelovic",
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/snpeff-4-2/51",
        "sbg:toolkit": "SnpEff",
        "sbg:revision": 38,
        "sbg:toolkitVersion": "4.2",
        "sbg:createdBy": "vladimirk",
        "sbg:links": [
          {
            "id": "http://snpeff.sourceforge.net/index.html",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/pcingola/SnpEff",
            "label": "Source Code"
          },
          {
            "id": "http://snpeff.sourceforge.net/SnpEff_manual.html",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip",
            "label": "Download"
          },
          {
            "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf",
            "label": "Publication"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1459258963,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1459268644,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1459334075,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1459344734,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1459346778,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1459349594,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1459350669,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1459352131,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1459353590,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1460986857,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1460989537,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1460994055,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1461079628,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1461145387,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1461146419,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1461857375,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1461857546,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1464273953,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1464279085,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 18
          },
          {
            "sbg:modifiedOn": 1464625627,
            "sbg:revisionNotes": null,
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 19
          },
          {
            "sbg:modifiedOn": 1471007312,
            "sbg:revisionNotes": "typos",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 20
          },
          {
            "sbg:modifiedOn": 1472209344,
            "sbg:revisionNotes": "Peer-review comments implemented.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 21
          },
          {
            "sbg:modifiedOn": 1472209772,
            "sbg:revisionNotes": "Peer-review comments and typos implemented.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 22
          },
          {
            "sbg:modifiedOn": 1472212308,
            "sbg:revisionNotes": "typos",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 23
          },
          {
            "sbg:modifiedOn": 1482494207,
            "sbg:revisionNotes": "Memory in GB. Default 4.",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 24
          },
          {
            "sbg:modifiedOn": 1487334731,
            "sbg:revisionNotes": "Changed default memory from 4 to 8 Gb.",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 25
          },
          {
            "sbg:modifiedOn": 1487336958,
            "sbg:revisionNotes": "Fixed shown default value for memory (cosmetic).",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 26
          },
          {
            "sbg:modifiedOn": 1488457921,
            "sbg:revisionNotes": "Fixed prefix for -hgvs flag",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 27
          },
          {
            "sbg:modifiedOn": 1488458426,
            "sbg:revisionNotes": "Fixed -motif flag prefix.",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 28
          },
          {
            "sbg:modifiedOn": 1488458654,
            "sbg:revisionNotes": "Fixed -classic and -motif prefixes.",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 29
          },
          {
            "sbg:modifiedOn": 1490802396,
            "sbg:revisionNotes": "fixed csvStats flag (changed from boolean to string), added csvStats output",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 30
          },
          {
            "sbg:modifiedOn": 1490802511,
            "sbg:revisionNotes": "added .csv extension (automatic) to csvStats file",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 31
          },
          {
            "sbg:modifiedOn": 1491298618,
            "sbg:revisionNotes": "fixed csvStats javascript expression",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 32
          },
          {
            "sbg:modifiedOn": 1492770355,
            "sbg:revisionNotes": "Changed the label for the total_memory input to make memory units more clear.",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 33
          },
          {
            "sbg:modifiedOn": 1496335968,
            "sbg:revisionNotes": "Added boolean use CSV stats",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 34
          },
          {
            "sbg:modifiedOn": 1497022845,
            "sbg:revisionNotes": "allowing one-element lists as file input",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 35
          },
          {
            "sbg:modifiedOn": 1497605748,
            "sbg:revisionNotes": "added naming of html summary file by input (or value of -stats flag, if provided)",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 36
          },
          {
            "sbg:modifiedOn": 1508416660,
            "sbg:revisionNotes": "decoupled assembly from database file name",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 37
          },
          {
            "sbg:modifiedOn": 1508416981,
            "sbg:revisionNotes": "updated description",
            "sbg:modifiedBy": "jrandjelovic",
            "sbg:revision": 38
          }
        ],
        "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
        "sbg:license": "GNU Lesser General Public License v3.0 only",
        "sbg:categories": [
          "Annotation",
          "VCF-Processing"
        ],
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "unzip -o /path/to/database/GRCh37.75.zip -d /opt/snpEff ; java -Xmx3072M -jar /opt/snpEff/snpEff.jar  -nodownload  -noLog  assembly-string-value  path/to/variants.vcf  > variants.snpEff_annotated.vcf",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1508416981,
        "sbg:revisionNotes": "updated description",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "jrandjelovic",
          "vladimirk"
        ],
        "sbg:job": {
          "inputs": {
            "classic": false,
            "stats": "",
            "strict": false,
            "max_tsl": null,
            "splice_region_exons_size": null,
            "variants_file": {
              "class": "File",
              "path": "path/to/variants.vcf",
              "secondaryFiles": [],
              "size": 0
            },
            "no_interaction": false,
            "total_memory": 3,
            "no_hgvs": false,
            "csvstats": "",
            "interval": {
              "class": "File",
              "path": "/path/to/interval.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "hgvs_tr_id": false,
            "use_csv_stats": false,
            "no_next_prot": false,
            "assembly": "assembly-string-value",
            "format_eff": false,
            "input_format": "vcf",
            "threads": true,
            "oicr": false,
            "interaction": false,
            "up_down_stream_len": null,
            "only_protein": false,
            "no_motif": false,
            "add_hgvs_anno": false,
            "no_shift_hgvs": false,
            "no_lof": false,
            "output_format": "vcf",
            "hgvs_1_letter": false,
            "configuration_file": {
              "class": "File",
              "path": null,
              "secondaryFiles": [],
              "size": 0
            },
            "no_genome": false,
            "database": {
              "path": "/path/to/database/GRCh37.75.zip",
              "metadata": {},
              "secondaryFiles": []
            },
            "nostats": false
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 3072
          }
        }
      },
      "sbg:x": 3091.2505723833606,
      "id": "#SnpEff"
    },
    {
      "inputs": [
        {
          "id": "#SBG_FASTQ_Quality_Adjuster.used_quality_scale"
        },
        {
          "id": "#SBG_FASTQ_Quality_Adjuster.total_memory"
        },
        {
          "source": [
            "#fastq"
          ],
          "id": "#SBG_FASTQ_Quality_Adjuster.fastq"
        }
      ],
      "sbg:y": 213.33336724175462,
      "outputs": [
        {
          "id": "#SBG_FASTQ_Quality_Adjuster.result"
        }
      ],
      "run": {
        "arguments": [],
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "FASTQ",
            "label": "Result",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {\n    return $job.inputs.fastq.path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n  {\n\tfile = $job.inputs.fastq.path\n\tfile_split = file.split('.')\n\tbasename = file_split\n  \tif (basename.length > 1)\n    {\n      l_ext = basename.splice(basename.length-1)\n      if (l_ext == 'gz')\n      {\n        basename = basename.slice(0, basename.length-1)\n      }\n    }\n \tretval = basename.concat('std.fastq')\n\treturn retval.join('.').replace(/^.*[\\\\\\/]/, '') + \"*\"\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "sbg:metadata": {
                "Quality scale": "sanger"
              },
              "sbg:inheritMetadataFrom": "#fastq"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Resulting file in FASTQ format.",
            "id": "#result"
          }
        ],
        "label": "SBG FASTQ Quality Adjuster",
        "successCodes": [],
        "sbg:createdOn": 1470927070,
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "fileContent": "\"\"\"\nUsage:\n    sbg_fastq_quality_scale_adjuster.py --fastq FILE\n\nOptions:\n    -h, --help          Show this message.\n\n    -f, --fastq FILE    Input FASTQ file.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport gzip\nimport itertools as it\nimport shutil\nimport sys\nfrom math import log10\nfrom subprocess import Popen\n\n\n\nargs = docopt(__doc__, version='1.0')\n\ninput_file = args['--fastq'] \n\nbase_name = input_file[input_file.rfind('/')+1:input_file.rfind('.') if input_file.rfind('.') != -1 else None]\nr_ext = input_file[input_file.rfind('.')+1:] if input_file.rfind('.') else \"\"\nl_ext = base_name.split('.')[-1].lower()\nif l_ext == 'fastq' or l_ext == 'fq':\n    if not r_ext == 'fastq' and not r_ext == 'fq':\n        base_name = base_name[:base_name.rfind('.')]\noutput_file = base_name + '.std.fastq'\n\n\n\"\"\"input and output names defined above\"\"\"\n\nclass myGzipFile(gzip.GzipFile):\n    def __enter__(self, *args, **kwargs):\n        if self.fileobj is None:\n            raise ValueError(\"I/O operation on closed GzipFile object\")\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n\ndef extremes(a, b):\n    if a is False:\n        return b, b\n    return min(a[0], b), max(a[1], b)\n\n\ndef walk_qualities(f, sample_size=1000):\n    for i in xrange(sample_size * 4):\n        try:\n            line = f.next()\n        except StopIteration:\n            return\n        if i % 4 == 3:\n            yield line.rstrip(\"\\n\\r\")\n\n\ndef sniff(path):\n    with open(path, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    opn = myGzipFile if gz else open\n    with opn(path) as f:\n        return get_scale(*map(ord, reduce(extremes, it.chain(*walk_qualities(f)), False)))\n\n\ndef get_scale(ord_min, ord_max):\n    options = {\n        'illumina13': (64, 105),\n        'illumina15': (66, 105),\n        'sanger': (33, 126),\n        'solexa': (59, 105),\n    }\n    fits = [(k, v) for k, v in options.iteritems() if v[0] <= ord_min and v[1] >= ord_max]\n    if not fits:\n        message = 'Quality scale for range (%s, %s) not found.' % (ord_min, ord_max)\n        raise Exception(message)\n        # Return narrowest range\n    return reduce(lambda a, b: a if a[1][1] - a[1][0] < b[1][1] - b[1][0] else b, fits)[0]\n\ndef qsolexa(x):\n    return chr(int(round(10 * log10(10.0**((ord(x)-64)/10.0)+1))) + 33)\n\n\ndef qillumina13(x):\n    return chr(ord(x) - 31)\n\n\ndef qillumina15(x):\n    return chr(ord(x) - 31) if ord(x)-64 > 2 else chr(33)\n\n\ndef qillumina18(x):\n    return x\n\n\n\"\"\"detect quality scale format\"\"\"\n\nmeta_qual = sniff(input_file)\n\n\n\"\"\"adjust quality scale if needed\"\"\"\n\nif meta_qual == 'illumina13':\n    proc = qillumina13\nelif meta_qual == 'illumina15':\n    proc = qillumina15\nelif meta_qual == 'solexa':\n    proc = qsolexa\nelse:\n    proc = None\n\nif proc == qsolexa: \n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    open_gz = myGzipFile if gz else open\n    with open(output_file, 'w') as out:\n        for i, line in enumerate(open_gz(input_file)):\n            if i % 4 == 3:\n                line = line.strip()\n                converted = ''.join(map(proc, line))\n                out.write(converted + '\\n')\n            else:\n                out.write(line)\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelif proc is not None: #seqtk converter from illumina13-15\n    with open(input_file, 'rb') as f:\n        gz = f.read(2) == '\\x1f\\x8b'\n    f.close()\n    if gz:#gunzip file to temp.fastq\n        temp_file = 'temp.fastq'\n        \n        inF = gzip.GzipFile(input_file, 'rb')\n        outF = file(temp_file, 'wb')\n        \n        newline = ''\n        for lines in inF:\n            outF.write(newline + lines.rstrip('\\n'))\n            newline = '\\n'\n            \n        inF.close()\n        outF.close()\n\n    else:\n        temp_file = input_file\n\n    cmd = ['seqtk','seq','-Q64','-V',temp_file,'>',output_file]\n    with open(output_file, 'w') as out:\n        p = Popen(cmd, stdout = out)\n        p.communicate()\n    contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\nelse:\n    if input_file.rfind(\".gz\") == len(input_file) - 3:\n        output_file = output_file + \".gz\"\n    #shutil.copyfile(input_file, output_file)\n    #os.symlink(input_file, output_file)\n    os.rename(input_file, output_file)\n    contents = \"Original fastq quality scale format was illumina18. No conversion performed.\\n\"\n\nsys.stderr.write(contents) #Write conversion to error log",
                "filename": "sbg_fastq_quality_scale_adjuster.py"
              }
            ]
          },
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          {
            "class": "Expression",
            "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n  \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {// no conversion\n\treturn \"echo No conversion\"\n  }\n  else\n  {\n    return \"python sbg_fastq_quality_scale_adjuster.py\"\n  }\n}",
            "engine": "#cwl-js-engine"
          }
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:category": "Input",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "sanger",
                  "illumina18",
                  "illumina13",
                  "illumina15",
                  "solexa"
                ],
                "name": "used_quality_scale"
              }
            ],
            "description": "Used quality scale of FASTQ reads.",
            "label": "Used quality scale",
            "id": "#used_quality_scale"
          },
          {
            "sbg:toolDefaultValue": "1",
            "sbg:stageInput": null,
            "id": "#total_memory",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Total memory in GB.",
            "label": "Total memory [GB]"
          },
          {
            "sbg:fileTypes": "FASTQ,FASTQ.GZ,FQ,FQ.GZ",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 1,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" )   {\n    return \"\"\n  }\n  else\n  {\n    return \"--fastq \" + $job.inputs.fastq.path\n  }\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true
            },
            "sbg:stageInput": "link",
            "description": "Input FASTQ file.",
            "required": true,
            "sbg:category": "Input",
            "type": [
              "File"
            ],
            "id": "#fastq",
            "label": "Fastq file"
          }
        ],
        "y": 213.33336724175462,
        "stdout": "",
        "x": 41.66666196452224,
        "class": "CommandLineTool",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1470927070,
            "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/23",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1472559664,
            "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/24",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1474546255,
            "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/25",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1475084132,
            "sbg:revisionNotes": "'sanger': (33, 74) instead 'sanger': (33, 126)",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1475231421,
            "sbg:revisionNotes": "sanger 33:92",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1475234050,
            "sbg:revisionNotes": "seqtk for converting from illumina13-15",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1478274820,
            "sbg:revisionNotes": "fix for seqtk conversion from .gz files",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1478277013,
            "sbg:revisionNotes": "Without seqtk",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1478300733,
            "sbg:revisionNotes": "fix seqtk for .gz files",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1481123041,
            "sbg:revisionNotes": "Support for files named filename.fq.fastq",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1481290093,
            "sbg:revisionNotes": "No conversion if sanger or illumina18 quality scale set in metadata",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1481448894,
            "sbg:revisionNotes": "fix",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1495706394,
            "sbg:revisionNotes": "Added detection mode and switched to python3",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1497438325,
            "sbg:revisionNotes": "Revert to rev 11",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1511876154,
            "sbg:revisionNotes": "Link instead of copy. Output string with detected quality scale.",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1511876318,
            "sbg:revisionNotes": "No change",
            "sbg:modifiedBy": "bogdang",
            "sbg:revision": 15
          }
        ],
        "description": "This app detects quality score format used in input FASTQ file. FASTQ quality score is then converted to standard Sanger quality score if conversion is required. It is basically a compact merged version of \"SBG Fastq Quality Detector\" and \"SBG Fastq Quality Converter\", created to speed up the execution of pipelines. Supported source formats are: Solexa, Illumina 1.3, Illumina 1.5 and Illumina 1.8.",
        "sbg:projectName": "SBGTools - Demo New",
        "stdin": "",
        "sbg:modifiedBy": "bogdang",
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/sbg-fastq-quality-adjuster/15",
        "sbg:toolkit": "SBGTools",
        "sbg:revision": 15,
        "sbg:categories": [
          "Converters",
          "FASTQ-Processing"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-fastq-quality-adjuster/15",
        "sbg:latestRevision": 15,
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:license": "Apache License 2.0",
        "sbg:createdBy": "vladimirk",
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return 1000\n  }\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/bogdang/sbg_quality_scale_adjuster:1.0"
          }
        ],
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "python sbg_fastq_quality_scale_adjuster.py  --fastq /path/to/test.1.fastq",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1511876318,
        "sbg:revisionNotes": "No change",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "vladimirk",
          "bogdang"
        ],
        "sbg:job": {
          "inputs": {
            "used_quality_scale": null,
            "total_memory": 9,
            "fastq": {
              "class": "File",
              "metadata": {
                "Quality scale": "sanger"
              },
              "path": "/path/to/test.1.fastq",
              "secondaryFiles": [],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 9216
          }
        }
      },
      "sbg:x": 41.66666196452224,
      "scatter": "#SBG_FASTQ_Quality_Adjuster.fastq",
      "id": "#SBG_FASTQ_Quality_Adjuster"
    },
    {
      "inputs": [
        {
          "id": "#GATK_CollectHsMetrics.verbosity"
        },
        {
          "id": "#GATK_CollectHsMetrics.validation_stringency"
        },
        {
          "id": "#GATK_CollectHsMetrics.use_jdk_inflater"
        },
        {
          "id": "#GATK_CollectHsMetrics.use_jdk_deflater"
        },
        {
          "source": [
            "#GATK_BedToIntervalList.output"
          ],
          "id": "#GATK_CollectHsMetrics.target_intervals"
        },
        {
          "id": "#GATK_CollectHsMetrics.sample_size"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_CollectHsMetrics.reference_sequence"
        },
        {
          "id": "#GATK_CollectHsMetrics.quiet"
        },
        {
          "id": "#GATK_CollectHsMetrics.per_target_coverage"
        },
        {
          "id": "#GATK_CollectHsMetrics.per_base_coverage"
        },
        {
          "id": "#GATK_CollectHsMetrics.near_distance"
        },
        {
          "id": "#GATK_CollectHsMetrics.minimum_mapping_quality"
        },
        {
          "id": "#GATK_CollectHsMetrics.minimum_base_quality"
        },
        {
          "id": "#GATK_CollectHsMetrics.metric_accumulation_level"
        },
        {
          "default": 4096,
          "id": "#GATK_CollectHsMetrics.memory_per_job"
        },
        {
          "id": "#GATK_CollectHsMetrics.memory_overhead_per_job"
        },
        {
          "id": "#GATK_CollectHsMetrics.max_records_in_ram"
        },
        {
          "source": [
            "#Sambamba_Merge.merged_bam"
          ],
          "id": "#GATK_CollectHsMetrics.input"
        },
        {
          "id": "#GATK_CollectHsMetrics.ga4_gh_client_secrets"
        },
        {
          "id": "#GATK_CollectHsMetrics.create_md5_file"
        },
        {
          "id": "#GATK_CollectHsMetrics.create_index"
        },
        {
          "id": "#GATK_CollectHsMetrics.coverage_cap"
        },
        {
          "id": "#GATK_CollectHsMetrics.compression_level"
        },
        {
          "id": "#GATK_CollectHsMetrics.clip_overlapping_reads"
        },
        {
          "id": "#GATK_CollectHsMetrics.bait_set_name"
        },
        {
          "source": [
            "#GATK_BedToIntervalList.output"
          ],
          "id": "#GATK_CollectHsMetrics.bait_intervals"
        }
      ],
      "sbg:y": -845.9739379882814,
      "outputs": [
        {
          "id": "#GATK_CollectHsMetrics.output"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Collects hybrid-selection (HS) metrics for a SAM or BAM file.\n\n###**Overview**  \n\nCollects hybrid-selection (HS) metrics for a SAM or BAM file.  This tool takes a SAM/BAM file input and collects metrics that are specific for sequence datasets generated through hybrid-selection. Hybrid-selection (HS) is the most commonly used technique to capture exon-specific sequences for targeted sequencing experiments such as exome sequencing; for more information, please see the corresponding [GATK Dictionary entry](http://www.broadinstitute.org/gatk/guide/article?id=6331).\n\nThis tool requires an aligned SAM or BAM file as well as bait and target interval files in Picard interval list format. You should use the bait and interval files that correspond to the capture kit that was used to generate the capture libraries for sequencing, which can generally be obtained from the kit manufacturer. If the baits and target intervals are provided in BED format, you can convert them to the Picard interval list format using Picard's [BedToInterval tool](http://broadinstitute.github.io/picard/command-line-overview.html#BedToIntervalList). If a reference sequence is provided, this program will calculate both AT_DROPOUT and GC_DROPOUT metrics. Dropout metrics are an attempt to measure the reduced representation of reads, in regions that deviate from 50% G/C content. This reduction in the number of aligned reads is due to the increased numbers of errors associated with sequencing regions with excessive or deficient numbers of G/C bases, ultimately leading to poor mapping efficiencies and lowcoverage in the affected regions. If you are interested in getting G/C content and mean sequence depth information for every target interval, use the PER_TARGET_COVERAGE option.\n\nNote: Metrics labeled as percentages are actually expressed as fractions!\n\nPlease see [CollectHsMetrics](http://broadinstitute.github.io/picard/picard-metric-definitions.html#HsMetrics) for detailed descriptions of the output metrics produced by this tool.\n\n###**Input**  \n\nAn aligned SAM or BAM file.\nAn interval list file that contains the locations of the baits used.\n\n###**Output**  \n\nA metrics file.\n\n###**Usage examples**   \n\n    ./gatk-launch CollectHsMetrics \\\n     \t -I=input.bam \\\n     \t -O=hs_metrics.txt \\\n     \t -R=reference_sequence.fasta \\\n     \t -BAIT_INTERVALS=bait.interval_list \\\n     \t -TARGET_INTERVALS=target.interval_list\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "TXT",
            "label": "Output metrics",
            "outputBinding": {
              "glob": "*.txt"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Hybrid-selection (HS) metrics file.",
            "id": "#output"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1513597832,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "CollectHsMetrics"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VERBOSITY"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VALIDATION_STRINGENCY"
            },
            "id": "#validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Validation Stringency"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_INFLATER"
            },
            "sbg:stageInput": null,
            "description": "Use the JDK Inflater instead of the Intel Inflater for reading compressed input Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater",
            "id": "#use_jdk_inflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_DEFLATER"
            },
            "sbg:stageInput": null,
            "description": "Use the JDK Deflater instead of the Intel Deflater for writing compressed output Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater",
            "id": "#use_jdk_deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--TARGET_INTERVALS"
            },
            "sbg:fileTypes": "INTERVAL_LIST",
            "id": "#target_intervals",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "An interval list file that contains the locations of the targets. This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Target Intervals"
          },
          {
            "sbg:toolDefaultValue": "10000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--SAMPLE_SIZE"
            },
            "id": "#sample_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Sample Size used for Theoretical Het Sensitivity sampling. Default is 10000. Default value: 10000.",
            "sbg:altPrefix": "",
            "label": "Sample Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--REFERENCE_SEQUENCE"
            },
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference_sequence",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence file. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Reference Sequence"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--QUIET"
            },
            "sbg:stageInput": null,
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Quiet",
            "id": "#quiet"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--PER_TARGET_COVERAGE"
            },
            "id": "#per_target_coverage",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "An optional file to output per target coverage information to. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Per Target Coverage"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--PER_BASE_COVERAGE"
            },
            "id": "#per_base_coverage",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "An optional file to output per base coverage information to. The per-base file contains one line per target base and can grow very large. It is not recommended for use with large target sets. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Per Base Coverage"
          },
          {
            "sbg:toolDefaultValue": "250",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--NEAR_DISTANCE"
            },
            "id": "#near_distance",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The maximum distance between a read and the nearest probe/bait/amplicon for the read to be considered 'near probe' and included in percent selected. Default value: 250.",
            "sbg:altPrefix": "",
            "label": "Near Distance"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MINIMUM_MAPPING_QUALITY"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality for a read to contribute coverage. Default value: 20.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MINIMUM_BASE_QUALITY"
            },
            "id": "#minimum_base_quality",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum base quality for a base to contribute coverage. Default value: 20.",
            "sbg:altPrefix": "",
            "label": "Minimum Base Quality"
          },
          {
            "sbg:toolDefaultValue": "[ALL_READS]",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--METRIC_ACCUMULATION_LEVEL"
            },
            "id": "#metric_accumulation_level",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL_READS",
                  "SAMPLE",
                  "LIBRARY",
                  "READ_GROUP"
                ],
                "name": "null"
              }
            ],
            "description": "The level(s) at which to accumulate metrics. This argument may be specified 0 or more times. Default value: [ALL_READS]. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}.",
            "sbg:altPrefix": "",
            "label": "Metric Accumulation Level"
          },
          {
            "sbg:stageInput": null,
            "label": "Memory Per Job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:stageInput": null,
            "label": "Memory Overhead Per Job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "sbg:toolDefaultValue": "500000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MAX_RECORDS_IN_RAM"
            },
            "id": "#max_records_in_ram",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000.",
            "sbg:altPrefix": "",
            "label": "Max Records In Ram"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--INPUT"
            },
            "sbg:fileTypes": "BAM",
            "id": "#input",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "An aligned SAM or BAM file. Required.",
            "sbg:altPrefix": "",
            "label": "Input"
          },
          {
            "sbg:toolDefaultValue": "client_secrets",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--GA4GH_CLIENT_SECRETS"
            },
            "id": "#ga4_gh_client_secrets",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Google Genomics API client_secrets.json file path. Default value: client_secrets.json.",
            "sbg:altPrefix": "",
            "label": "Ga4 Gh Client Secrets"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_MD5_FILE"
            },
            "sbg:stageInput": null,
            "description": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Md5 File",
            "id": "#create_md5_file"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_INDEX"
            },
            "sbg:stageInput": null,
            "description": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Index",
            "id": "#create_index"
          },
          {
            "sbg:toolDefaultValue": "200",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--COVERAGE_CAP"
            },
            "id": "#coverage_cap",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "To set a max coverage limit for Theoretical Sensitivity calculations. Default is 200. Default value: 200.",
            "sbg:altPrefix": "",
            "label": "Coverage Cap"
          },
          {
            "sbg:toolDefaultValue": "5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--COMPRESSION_LEVEL"
            },
            "id": "#compression_level",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5.",
            "sbg:altPrefix": "",
            "label": "Compression Level"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CLIP_OVERLAPPING_READS"
            },
            "sbg:stageInput": null,
            "description": "True if we are to clip overlapping reads, false otherwise. Default value: true. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Clip Overlapping Reads",
            "id": "#clip_overlapping_reads"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--BAIT_SET_NAME"
            },
            "id": "#bait_set_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Bait set name. If not provided it is inferred from the filename of the bait intervals. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Bait Set Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--BAIT_INTERVALS"
            },
            "sbg:fileTypes": "INTERVAL_LIST",
            "id": "#bait_intervals",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "An interval list file that contains the locations of the baits used. This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Bait Intervals"
          }
        ],
        "y": -845.9739379882814,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 8,
        "sbg:wrapperAuthor": "teodora.aleksic",
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 8,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx3M\" CollectHsMetrics --BAIT_INTERVALS /path/to/bait.ext --INPUT /path/to/input.ext --TARGET_INTERVALS /path/to/target.ext --OUTPUT input.txt",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          }
        ],
        "stdout": "",
        "x": 1256.6667480468755,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.input)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.txt'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--OUTPUT"
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/17",
        "label": "GATK CollectHsMetrics",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-collecthsmetrics/8",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1513597832,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/8",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1513599323,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/9",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1513786593,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/10",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1513788187,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/11",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1514458047,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/12",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1515587907,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/13",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1517403805,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/15",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1517405241,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/16",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1520946147,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946147,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-collecthsmetrics/17",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-collecthsmetrics/8",
        "sbg:job": {
          "inputs": {
            "TARGET_INTERVALS": {
              "class": "File",
              "path": "/path/to/target_intervals.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "BAIT_INTERVALS": {
              "class": "File",
              "path": "/path/to/bait_intervals.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "memory_overhead_per_job": 8,
            "input": {
              "class": "File",
              "path": "/path/to/input.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "QUIET": false,
            "memory_per_job": 3,
            "USE_JDK_DEFLATER": false,
            "CREATE_INDEX": false,
            "INPUT": {
              "class": "File",
              "path": "/path/to/input.bam",
              "secondaryFiles": [
                {
                  "path": ".bai"
                }
              ],
              "size": 0
            },
            "USE_JDK_INFLATER": false,
            "CREATE_MD5_FILE": false,
            "target_intervals": {
              "class": "File",
              "path": "/path/to/target.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "CLIP_OVERLAPPING_READS": false,
            "bait_intervals": {
              "class": "File",
              "path": "/path/to/bait.ext",
              "secondaryFiles": [],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 11
          }
        }
      },
      "sbg:x": 1256.6667480468755,
      "id": "#GATK_CollectHsMetrics"
    },
    {
      "inputs": [
        {
          "id": "#GATK_BedToIntervalList.verbosity"
        },
        {
          "id": "#GATK_BedToIntervalList.validation_stringency"
        },
        {
          "id": "#GATK_BedToIntervalList.use_jdk_inflater"
        },
        {
          "id": "#GATK_BedToIntervalList.use_jdk_deflater"
        },
        {
          "id": "#GATK_BedToIntervalList.unique"
        },
        {
          "id": "#GATK_BedToIntervalList.sort"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_BedToIntervalList.reference_sequence"
        },
        {
          "id": "#GATK_BedToIntervalList.quiet"
        },
        {
          "id": "#GATK_BedToIntervalList.max_records_in_ram"
        },
        {
          "source": [
            "#intervals_file"
          ],
          "id": "#GATK_BedToIntervalList.input"
        },
        {
          "id": "#GATK_BedToIntervalList.ga4_gh_client_secrets"
        },
        {
          "id": "#GATK_BedToIntervalList.create_md5_file"
        },
        {
          "id": "#GATK_BedToIntervalList.create_index"
        },
        {
          "id": "#GATK_BedToIntervalList.compression_level"
        }
      ],
      "sbg:y": -841.6406962076826,
      "outputs": [
        {
          "id": "#GATK_BedToIntervalList.output"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Converts a BED file to a Picard Interval List.\n\n###**Overview**  \n\nThis tool provides easy conversion from BED to the Picard interval_list format which is required by many Picard processing tools. Note that the coordinate system of BED files is such that the first base or position in a sequence is numbered \"0\", while in interval list files it is numbered \"1\". BED files contain sequence data displayed in a flexible format that includes nine optional fields, in addition to three required fields within the annotation tracks. The required fields of a BED file include:\n\n- chrom - The name of the chromosome (e.g. chr20) or scaffold (e.g. scaffold10671)\n- chromStart - The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered \"0\"\n- chromEnd - The ending position of the feature in the chromosome or scaffold.  The chromEnd base is not included in the display of the feature. For example, the first 100 bases of a chromosome are defined as chromStart=0, chromEnd=100, and span the bases numbered 0-99\n\nIn each annotation track, the number of fields per line must be consistent throughout a data set. For additional information regarding BED files and the annotation field options, please see: [FAQformat](http://genome.ucsc.edu/FAQ/FAQformat.html#format1). Interval list files contain sequence data distributed into intervals. The interval list file format is relatively simple and reflects the SAM alignment format to a degree. A SAM style header must be present in the file that lists the sequence records against which the intervals are described. After the header, the file then contains records, one per line in plain text format with the following values tab-separated:\n\n- Sequence name (SN) - The name of the sequence in the file for identification purposes, can be chromosome number e.g. chr20\n- Start position - Interval start position (starts at +1)\n- End position - Interval end position (1-based, end inclusive)\n- Strand - Indicates +/- strand for the interval (either + or -)\n- Interval name - (Each interval should have a unique name)\n\nThis tool requires a sequence dictionary, provided with the SEQUENCE_DICTIONARY or SD argument. The value given to this argument can be any of the following:\n\n- A file with .dict extension generated using Picard's CreateSequenceDictionaryTool\n- A reference.fa or reference.fasta file with a reference.dict in the same directory\n- Another IntervalList with @SQ lines in the header from which to generate a dictionary\n- A VCF that contains #contig lines from which to generate a sequence dictionary\n- A SAM or BAM file with @SQ lines in the header from which to generate a dictionary\n\n###**Input**  \n\nThe input BED file.\nThe sequence dictionary, or BAM/VCF/IntervalList from which a dictionary can be extracted.\n\n###**Output**  \n\nThe output Picard Interval List.\n\n###**Usage examples**   \n\n    ./gatk-launch BedToIntervalList \\\n    \t-I=input.bed \\\n    \t-O=list.interval_list \\\n    \t-SD=reference_sequence.dict\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "INTERVAL_LIST",
            "label": "Interval List",
            "outputBinding": {
              "glob": "*.interval_list"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "The output Picard Interval List",
            "id": "#output"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1513597828,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "BedToIntervalList"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VERBOSITY"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VALIDATION_STRINGENCY"
            },
            "id": "#validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Validation Stringency"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_INFLATER"
            },
            "sbg:stageInput": null,
            "description": "Use the JDK Inflater instead of the Intel Inflater for reading compressed input Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater",
            "id": "#use_jdk_inflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_DEFLATER"
            },
            "sbg:stageInput": null,
            "description": "Use the JDK Deflater instead of the Intel Deflater for writing compressed output Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater",
            "id": "#use_jdk_deflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--UNIQUE"
            },
            "sbg:stageInput": null,
            "description": "If true, unique the output interval list by merging overlapping regions, before writing it (implies sort=true). Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Unique",
            "id": "#unique"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--SORT"
            },
            "sbg:stageInput": null,
            "description": "If true, sort the output interval list before writing it. Default value: true. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Sort",
            "id": "#sort"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                "^.dict"
              ],
              "prefix": "--REFERENCE_SEQUENCE"
            },
            "sbg:fileTypes": "FASTA, FA",
            "description": "Reference sequence file. Default value: null.",
            "required": true,
            "sbg:category": "Optional Arguments",
            "type": [
              "File"
            ],
            "sbg:altPrefix": "",
            "label": "Reference Sequence",
            "id": "#reference_sequence"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--QUIET"
            },
            "sbg:stageInput": null,
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Quiet",
            "id": "#quiet"
          },
          {
            "sbg:toolDefaultValue": "500000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MAX_RECORDS_IN_RAM"
            },
            "id": "#max_records_in_ram",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000.",
            "sbg:altPrefix": "",
            "label": "Max Records In Ram"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--INPUT"
            },
            "sbg:fileTypes": "BED",
            "id": "#input",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "The input BED file Required.",
            "sbg:altPrefix": "",
            "label": "Input"
          },
          {
            "sbg:toolDefaultValue": "client_secrets",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--GA4GH_CLIENT_SECRETS"
            },
            "id": "#ga4_gh_client_secrets",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Google Genomics API client_secrets.json file path. Default value: client_secrets.json.",
            "sbg:altPrefix": "",
            "label": "Ga4 Gh Client Secrets"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_MD5_FILE"
            },
            "sbg:stageInput": null,
            "description": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Md5 File",
            "id": "#create_md5_file"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_INDEX"
            },
            "sbg:stageInput": null,
            "description": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Index",
            "id": "#create_index"
          },
          {
            "sbg:toolDefaultValue": "5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--COMPRESSION_LEVEL"
            },
            "id": "#compression_level",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5.",
            "sbg:altPrefix": "",
            "label": "Compression Level"
          }
        ],
        "y": -841.6406962076826,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 4,
        "sbg:wrapperAuthor": "teodora.aleksic",
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 4,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" BedToIntervalList --INPUT /path/to/input.bed --REFERENCE_SEQUENCE /path/to/reference.fa --OUTPUT input.interval_list --SEQUENCE_DICTIONARY /path/to/reference.dict",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          }
        ],
        "stdout": "",
        "x": 793.0001627604171,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.input)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.interval_list'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--OUTPUT"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n\treference_path = $job.inputs.reference_sequence.path\n    dict_path = reference_path.split('.').slice(0, -1).join('.') + '.dict'\n    return dict_path\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--SEQUENCE_DICTIONARY"
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/10",
        "label": "GATK BedToIntervalList",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-bedtointervallist/4",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1513597828,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/5",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1515587891,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/6",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1517403798,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/8",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1517405244,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/9",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1520946161,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/10",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946161,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-bedtointervallist/10",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-bedtointervallist/4",
        "sbg:job": {
          "inputs": {
            "USE_JDK_DEFLATER": false,
            "USE_JDK_INFLATER": false,
            "CREATE_INDEX": false,
            "UNIQUE": false,
            "INPUT": {
              "class": "File",
              "path": "/path/to/intervals.bed",
              "secondaryFiles": [],
              "size": 0
            },
            "SORT": false,
            "CREATE_MD5_FILE": false,
            "REFERENCE_SEQUENCE": {
              "class": "File",
              "path": "/path/to/reference.fasta",
              "secondaryFiles": [],
              "size": 0
            },
            "input": {
              "class": "File",
              "path": "/path/to/input.bed",
              "secondaryFiles": [],
              "size": 0
            },
            "QUIET": false,
            "reference_sequence": {
              "class": "File",
              "path": "/path/to/reference.fa",
              "secondaryFiles": [],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 793.0001627604171,
      "id": "#GATK_BedToIntervalList"
    },
    {
      "inputs": [
        {
          "id": "#SNP_GATK_VariantFiltration.verbosity"
        },
        {
          "source": [
            "#SNP_GATK_SelectVariants.select_variants_vcf"
          ],
          "id": "#SNP_GATK_VariantFiltration.variant"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.use_jdk_inflater"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.use_jdk_deflater"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.split_filter_expressions"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.set_filtered_gt_to_nocall"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.seconds_between_progress_updates"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.sample"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#SNP_GATK_VariantFiltration.reference"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.read_validation_stringency"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.read_name"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.read_index"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.read_filter"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.quiet"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.pl_filter_name"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.missing_values_in_expressions_should_evaluate_as_failing"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.minimum_mapping_quality"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.min_read_length"
        },
        {
          "default": 2048,
          "id": "#SNP_GATK_VariantFiltration.memory_per_job"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.memory_overhead_per_job"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.maximum_mapping_quality"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.max_read_length"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.max_fragment_length"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.mask_name"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.mask_extension"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.mask"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.library"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.lenient"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.keep_reverse"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.keep_read_group"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.invert_genotype_filter_expression"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.invert_filter_expression"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.invalidate_previous_filters"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.intervals_string"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.intervals_file"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.interval_set_rule"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.interval_padding"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.interval_merging_rule"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.interval_exclusion_padding"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.input"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.genotype_filter_name"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.genotype_filter_expression"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.gcs_max_retries"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.filter_too_short"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.filter_not_in_mask"
        },
        {
          "default": "GATKBestPracticeSNPFilter",
          "id": "#SNP_GATK_VariantFiltration.filter_name"
        },
        {
          "default": [
            "QD < 2.0",
            "MQ < 40.0",
            "FS > 60.0",
            "MQRankSum < -12.5",
            "ReadPosRankSum < -8.0",
            "SOR > 3.0"
          ],
          "id": "#SNP_GATK_VariantFiltration.filter_expression"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.exclude_intervals_string"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.exclude_intervals_file"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.disable_tool_default_read_filters"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.disable_sequence_dictionary_validation"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.disable_read_filter"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.disable_bam_index_caching"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.create_output_variant_md5"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.create_output_variant_index"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.create_output_bam_md5"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.create_output_bam_index"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.cluster_window_size"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.cluster_size"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.cloud_prefetch_buffer"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.cloud_index_prefetch_buffer"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.black_listed_lanes"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.black_list"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.ambig_filter_frac"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.ambig_filter_bases"
        },
        {
          "id": "#SNP_GATK_VariantFiltration.add_output_sam_program_record"
        }
      ],
      "sbg:y": 156.54773437692265,
      "outputs": [
        {
          "id": "#SNP_GATK_VariantFiltration.filtered_vcf"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Filter variant calls based on INFO and FORMAT annotations.\n\n###**Overview**  \n\nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line.\n\n###**Input**  \n\n- A VCF of variant calls to filter.\n- One or more filtering expressions and corresponding filter names.\n\n###**Output**  \n\nA filtered VCF in which passing variants are annotated as PASS and failing variants are annotated with the name(s) of the filter(s) they failed. \n\n###**Usage example**  \n\n    ./gatk-launch VariantFiltration \\\n   \t\t-R reference.fasta \\\n   \t\t-V input.vcf \\\n   \t\t-O output.vcf \\\n   \t\t--filterExpression \"AB < 0.2 || MQ0 > 50\" \\\n   \t\t--filterName \"my_filters\"\n\n###**Note** \n\nComposing filtering expressions can range from very simple to extremely complicated depending on what you're trying to do. Please see [this document](https://software.broadinstitute.org/gatk/documentation/article.php?id=1255) for more details on how to compose and use filtering expressions effectively.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "Filtered VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#variant"
            },
            "type": [
              "File"
            ],
            "description": "File to which variants should be written.",
            "id": "#filtered_vcf"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296584,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "VariantFiltration"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--variant"
            },
            "sbg:fileTypes": "VCF,VCF.GZ",
            "id": "#variant",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "A VCF file containing variants Required.",
            "sbg:altPrefix": "",
            "label": "Variant"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "sbg:stageInput": null,
            "label": "Split Filter Expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Split filter expressions into separate tool arguments",
            "id": "#split_filter_expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--set-filtered-gt-to-nocall"
            },
            "sbg:stageInput": null,
            "id": "#set_filtered_gt_to_nocall",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Set filtered genotypes to no-call Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Set Filtered Gt To Nocall"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "sbg:toolDefaultValue": "FASTA,FA",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA,FA",
            "description": "Reference sequence Default value: null.",
            "required": true,
            "sbg:category": "Optional Arguments",
            "type": [
              "File"
            ],
            "sbg:altPrefix": "",
            "label": "Reference",
            "id": "#reference"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--missing-values-in-expressions-should-evaluate-as-failing"
            },
            "sbg:stageInput": null,
            "id": "#missing_values_in_expressions_should_evaluate_as_failing",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Missing Values In Expressions Should Evaluate As Failing"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mask-name"
            },
            "id": "#mask_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "The text to put in the FILTER field if a 'mask' is provided and overlaps with a variant call Default value: Mask.",
            "sbg:altPrefix": "",
            "label": "Mask Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mask-extension"
            },
            "id": "#mask_extension",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "How many bases beyond records from a provided 'mask' should variants be filtered Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Mask Extension"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mask"
            },
            "id": "#mask",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Input mask Default value: null.",
            "sbg:altPrefix": "",
            "label": "Mask"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-genotype-filter-expression"
            },
            "sbg:stageInput": null,
            "id": "#invert_genotype_filter_expression",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Invert the selection criteria for --genotypeFilterExpression Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Genotype Filter Expression"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-filter-expression"
            },
            "sbg:stageInput": null,
            "id": "#invert_filter_expression",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Invert the selection criteria for --filterExpression Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Filter Expression"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invalidate-previous-filters"
            },
            "sbg:stageInput": null,
            "id": "#invalidate_previous_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Remove previous filters applied to the VCF Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invalidate Previous Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "id": "#interval_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are including. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Padding"
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "description": "Interval merging rule for abutting intervals.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging_rule"
              }
            ],
            "sbg:altPrefix": "",
            "label": "Interval Merging Rule",
            "id": "#interval_merging_rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input"
            },
            "sbg:fileTypes": "BAM,SAM,CRAM",
            "id": "#input",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "BAM/SAM/CRAM file containing reads This argument may be specified 0 or more times. Default value: null.",
            "label": "Input"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered This argument may be specified 0 or more times.",
            "label": "Genotype Filter Name",
            "id": "#genotype_filter_name"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info) This argument may be specified 0 or more times.",
            "label": "Genotype Filter Expression",
            "id": "#genotype_filter_expression"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--gcs-max-retries"
            },
            "sbg:stageInput": null,
            "description": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": "",
            "label": "Gcs Max Retries",
            "id": "#gcs_max_retries"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-not-in-mask"
            },
            "sbg:stageInput": null,
            "id": "#filter_not_in_mask",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Filter records NOT in given input mask. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Filter Not In Mask"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument may be specified 0 or more times. Default value: null.",
            "label": "Filter Name",
            "id": "#filter_name"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "One or more expression used with INFO fields to filter This argument may be specified 0 or more times. Default value: null.",
            "label": "Filter Expression",
            "id": "#filter_expression"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "sbg:fileTypes": "TXT, BED",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File",
            "id": "#exclude_intervals_file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Disable Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cluster-window-size"
            },
            "id": "#cluster_window_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The window size (in bases) in which to evaluate clustered SNPs Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Cluster Window Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cluster-size"
            },
            "id": "#cluster_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The number of SNPs which make up a cluster. Must be at least 2 Default value: 3.",
            "sbg:altPrefix": "",
            "label": "Cluster Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          }
        ],
        "y": 156.54773437692265,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 21,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 21,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" VariantFiltration --variant /path/to/variant.ext --reference /path/to/reference.ext  --filter-name \"qd,rank\" --filter-expression \"qd<2 || rank>10\"   --output variant.vcf",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 2422.262809827153,
        "arguments": [
          {
            "position": 1,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.variant)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{ \n    /** Extracts filter name from expression */\n    function getVariableName(filterExpression){\n        var expressions = ['!=', '==', '>=', '<=', '>', '<']\n\n        for (var i = 0; i < expressions.length; i++) {\n            var indexOf = filterExpression.indexOf(expressions[i])\n\n            if (indexOf >= 0)\n                return filterExpression.slice(0, indexOf).trim()\n        }\n\n        return ''\n    }\n\n    /** Combines multiple filters into a new filter name */\n    function getFilterName(filterExpressions){\n        var newFilterName = ''\n\n        for (var i = 0; i < filterExpressions.length; i++) {\n            var variableName = getVariableName(filterExpressions[i])\n\n            newFilterName = newFilterName ? (newFilterName + '-' + variableName) : variableName\n        }\n\n        return newFilterName\n    }\n\n    filterName = $job.inputs.filter_name\n    filterExpressions = $job.inputs.filter_expression\n    splitFilterExpressions = $job.inputs.split_filter_expressions\n    \n    // Adds filter expressions to the command line\n    if (filterExpressions && filterExpressions.length > 0) \n    {  \n        if (splitFilterExpressions) // Adds each expression as a separate filter\n        {\n            cmd = []\n\n            for (i = 0; i < filterExpressions.length; i++) \n            {\n                var variableName = getVariableName(filterExpressions[i])\n\n                cmd.push('--filter-name')\n                cmd.push('\"' + variableName + '\"')\n                cmd.push('--filter-expression')\n                cmd.push('\"' + filterExpressions[i] + '\"')\n            }\n\n            return cmd.join(' ')\n        }\n        else // Adds all expressions as a single filter\n        { \n            filterName = filterName ? filterName : getFilterName(filterExpressions)\n\n            var expressions = []\n\n            for (var i = 0; i < filterExpressions.length; i++) \n            {\n                expressions.push(filterExpressions[i])\n\n                if (i < filterExpressions.length - 1)\n                expressions.push('||')\n            }\n\n            expressions = expressions.join(' ').trim()\n            expressions = '\"' + expressions + '\"'\n\n            return(['--filter-name', \n                    '\"' +  filterName + '\"', \n                    '--filter-expression', \n                    expressions].join(' ').trim())   \n        }\n    }\n    else\n        return ''\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{ \n    /** Extracts filter name from expression */\n    function getVariableName(filterExpression){\n        var expressions = ['!=', '==', '>=', '<=', '>', '<']\n\n        for (var i = 0; i < expressions.length; i++) {\n            var indexOf = filterExpression.indexOf(expressions[i])\n\n            if (indexOf >= 0)\n                return filterExpression.slice(0, indexOf).trim()\n        }\n\n        return ''\n    }\n\n    /** Combines multiple filters into a new filter name */\n    function getFilterName(filterExpressions){\n        var newFilterName = ''\n\n        for (var i = 0; i < filterExpressions.length; i++) {\n            var variableName = getVariableName(filterExpressions[i])\n\n            newFilterName = newFilterName ? (newFilterName + '-' + variableName) : variableName\n        }\n\n        return newFilterName\n    }\n\n    filterName = $job.inputs.genotype_filter_name\n    filterExpressions = $job.inputs.genotype_filter_expression\n    splitFilterExpressions = $job.inputs.split_filter_expressions\n    \n    // Adds filter expressions to the command line\n    if (filterExpressions && filterExpressions.length > 0) \n    {  \n        if (splitFilterExpressions) // Adds each expression as a separate filter\n        {\n            cmd = []\n\n            for (i = 0; i < filterExpressions.length; i++) \n            {\n                var variableName = getVariableName(filterExpressions[i])\n\n                cmd.push('--genotype-filter-name')\n                cmd.push('\"' + variableName + '\"')\n                cmd.push('--genotype-filter-expression')\n                cmd.push('\"' + filterExpressions[i] + '\"')\n            }\n\n            return cmd.join(' ')\n        }\n        else // Adds all expressions as a single filter\n        { \n            filterName = filterName ? filterName : getFilterName(filterExpressions)\n\n            var expressions = []\n\n            for (var i = 0; i < filterExpressions.length; i++) \n            {\n                expressions.push(filterExpressions[i])\n\n                if (i < filterExpressions.length - 1)\n                expressions.push('||')\n            }\n\n            expressions = expressions.join(' ').trim()\n            expressions = '\"' + expressions + '\"'\n\n            return(['--genotype-filter-name', \n                    '\"' +  filterName + '\"', \n                    '--genotype-filter-expression', \n                    expressions].join(' ').trim())   \n        }\n    }\n    else\n        return ''\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/56",
        "label": "SNP GATK VariantFiltration",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-variantfiltration/21",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296584,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500887439,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/18",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1502718056,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/19",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1503405206,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1504105746,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1505747526,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/25",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1508243030,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1508247186,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1508251764,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/28",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1508488847,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1509714113,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/34",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1509721571,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/35",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1511522938,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/36",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1513786633,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/37",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1515588129,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/46",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1515590613,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/48",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1515599033,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/50",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1516622352,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/51",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1516625354,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/52",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 18
          },
          {
            "sbg:modifiedOn": 1517403818,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/54",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 19
          },
          {
            "sbg:modifiedOn": 1519648209,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/55",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 20
          },
          {
            "sbg:modifiedOn": 1520946077,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/56",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 21
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946077,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/56",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-variantfiltration/21",
        "sbg:job": {
          "inputs": {
            "clusterWindowSize": 35,
            "use_jdk_deflater": false,
            "invertFilterExpression": false,
            "setFilteredGtToNocall": false,
            "filterNotInMask": false,
            "filterExpression": [
              "V1 != 1.0",
              "V2 == 2.0",
              "V3 > 3",
              "V4 >= 4",
              "V5 < 5",
              "V6 <= 6"
            ],
            "unsafe": null,
            "intervals": "intervals-string-value",
            "filter_expression": [
              "qd<2",
              "rank>10"
            ],
            "intervals_string": "",
            "createOutputVariantIndex": false,
            "no_cmdline_in_header": true,
            "secondsBetweenProgressUpdates": null,
            "genotypeFilterName": "",
            "dontRequireSoftClipsBothEnds": false,
            "genotype_filter_expression": [],
            "use_jdk_inflater": false,
            "clusterSize": 3,
            "variant": {
              "class": "File",
              "path": "/path/to/variant.ext",
              "secondaryFiles": [
                {
                  "path": ".idx"
                }
              ],
              "size": 0
            },
            "createOutputBamIndex": false,
            "memory_overhead_per_job": 0,
            "invalidatePreviousFilters": false,
            "keepReverse": false,
            "createOutputBamMD5": false,
            "disableBamIndexCaching": false,
            "invertGenotypeFilterExpression": false,
            "ambigFilterBases": null,
            "validation_strictness": null,
            "splitFilterExpressions": true,
            "exclude_intervals_string": "",
            "interval_merging_rule": null,
            "reference": {
              "class": "File",
              "path": "/path/to/reference.ext",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "size": 0
            },
            "invert_criteria": true,
            "missingValuesInExpressionsShouldEvaluateAsFailing": false,
            "bqsr": {
              "class": "File",
              "path": "/path/to/bqsr.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "disableSequenceDictionaryValidation": false,
            "pedigree": {
              "class": "File",
              "path": "/path/to/pedigree.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "filter_not_in_mask": false,
            "invert_selection": true,
            "addOutputSAMProgramRecord": false,
            "createOutputVariantMD5": false,
            "filter_name": [
              "qd",
              "rank"
            ],
            "disableToolDefaultReadFilters": false,
            "no_call": true,
            "variants": [
              {
                "path": "varaint.vcf"
              }
            ],
            "QUIET": false,
            "memory_per_job": 2048,
            "lenient": false,
            "genotype_filter_name": "",
            "gcs_max_retries": null,
            "excludeIntervals": [
              {
                "class": "File",
                "path": "/path/to/excludeIntervals-1.ext",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/excludeIntervals-2.ext",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "filterName": "",
            "genotypeFilterExpression": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 2422.262809827153,
      "id": "#SNP_GATK_VariantFiltration"
    },
    {
      "inputs": [
        {
          "id": "#INDEL_GATK_VariantFiltration.verbosity"
        },
        {
          "source": [
            "#INDEL_GATK_SelectVariants.select_variants_vcf"
          ],
          "id": "#INDEL_GATK_VariantFiltration.variant"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.use_jdk_inflater"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.use_jdk_deflater"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.split_filter_expressions"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.set_filtered_gt_to_nocall"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.seconds_between_progress_updates"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.sample"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#INDEL_GATK_VariantFiltration.reference"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.read_validation_stringency"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.read_name"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.read_index"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.read_filter"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.quiet"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.pl_filter_name"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.missing_values_in_expressions_should_evaluate_as_failing"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.minimum_mapping_quality"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.min_read_length"
        },
        {
          "default": 2048,
          "id": "#INDEL_GATK_VariantFiltration.memory_per_job"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.memory_overhead_per_job"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.maximum_mapping_quality"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.max_read_length"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.max_fragment_length"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.mask_name"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.mask_extension"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.mask"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.library"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.lenient"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.keep_reverse"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.keep_read_group"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.invert_genotype_filter_expression"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.invert_filter_expression"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.invalidate_previous_filters"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.intervals_string"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.intervals_file"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.interval_set_rule"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.interval_padding"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.interval_merging_rule"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.interval_exclusion_padding"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.input"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.genotype_filter_name"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.genotype_filter_expression"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.gcs_max_retries"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.filter_too_short"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.filter_not_in_mask"
        },
        {
          "default": "GATKBestPracticeINDELFilter",
          "id": "#INDEL_GATK_VariantFiltration.filter_name"
        },
        {
          "default": [
            "QD < 2.0",
            "FS > 200.0",
            "ReadPosRankSum < -20.0",
            "SOR > 10.0"
          ],
          "id": "#INDEL_GATK_VariantFiltration.filter_expression"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.exclude_intervals_string"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.exclude_intervals_file"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.disable_tool_default_read_filters"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.disable_sequence_dictionary_validation"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.disable_read_filter"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.disable_bam_index_caching"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.create_output_variant_md5"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.create_output_variant_index"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.create_output_bam_md5"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.create_output_bam_index"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.cluster_window_size"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.cluster_size"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.cloud_prefetch_buffer"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.cloud_index_prefetch_buffer"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.black_listed_lanes"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.black_list"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.ambig_filter_frac"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.ambig_filter_bases"
        },
        {
          "id": "#INDEL_GATK_VariantFiltration.add_output_sam_program_record"
        }
      ],
      "sbg:y": 334.58347887132453,
      "outputs": [
        {
          "id": "#INDEL_GATK_VariantFiltration.filtered_vcf"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Filter variant calls based on INFO and FORMAT annotations.\n\n###**Overview**  \n\nThis tool is designed for hard-filtering variant calls based on certain criteria. Records are hard-filtered by changing the value in the FILTER field to something other than PASS. Filtered records will be preserved in the output unless their removal is requested in the command line.\n\n###**Input**  \n\n- A VCF of variant calls to filter.\n- One or more filtering expressions and corresponding filter names.\n\n###**Output**  \n\nA filtered VCF in which passing variants are annotated as PASS and failing variants are annotated with the name(s) of the filter(s) they failed. \n\n###**Usage example**  \n\n    ./gatk-launch VariantFiltration \\\n   \t\t-R reference.fasta \\\n   \t\t-V input.vcf \\\n   \t\t-O output.vcf \\\n   \t\t--filterExpression \"AB < 0.2 || MQ0 > 50\" \\\n   \t\t--filterName \"my_filters\"\n\n###**Note** \n\nComposing filtering expressions can range from very simple to extremely complicated depending on what you're trying to do. Please see [this document](https://software.broadinstitute.org/gatk/documentation/article.php?id=1255) for more details on how to compose and use filtering expressions effectively.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "Filtered VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#variant"
            },
            "type": [
              "File"
            ],
            "description": "File to which variants should be written.",
            "id": "#filtered_vcf"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296584,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "VariantFiltration"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--variant"
            },
            "sbg:fileTypes": "VCF,VCF.GZ",
            "id": "#variant",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "A VCF file containing variants Required.",
            "sbg:altPrefix": "",
            "label": "Variant"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "sbg:stageInput": null,
            "label": "Split Filter Expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Split filter expressions into separate tool arguments",
            "id": "#split_filter_expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--set-filtered-gt-to-nocall"
            },
            "sbg:stageInput": null,
            "id": "#set_filtered_gt_to_nocall",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Set filtered genotypes to no-call Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Set Filtered Gt To Nocall"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "sbg:toolDefaultValue": "FASTA,FA",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA,FA",
            "description": "Reference sequence Default value: null.",
            "required": true,
            "sbg:category": "Optional Arguments",
            "type": [
              "File"
            ],
            "sbg:altPrefix": "",
            "label": "Reference",
            "id": "#reference"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--missing-values-in-expressions-should-evaluate-as-failing"
            },
            "sbg:stageInput": null,
            "id": "#missing_values_in_expressions_should_evaluate_as_failing",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "When evaluating the JEXL expressions, missing values should be considered failing the expression Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Missing Values In Expressions Should Evaluate As Failing"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mask-name"
            },
            "id": "#mask_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "The text to put in the FILTER field if a 'mask' is provided and overlaps with a variant call Default value: Mask.",
            "sbg:altPrefix": "",
            "label": "Mask Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mask-extension"
            },
            "id": "#mask_extension",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "How many bases beyond records from a provided 'mask' should variants be filtered Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Mask Extension"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mask"
            },
            "id": "#mask",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Input mask Default value: null.",
            "sbg:altPrefix": "",
            "label": "Mask"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-genotype-filter-expression"
            },
            "sbg:stageInput": null,
            "id": "#invert_genotype_filter_expression",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Invert the selection criteria for --genotypeFilterExpression Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Genotype Filter Expression"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-filter-expression"
            },
            "sbg:stageInput": null,
            "id": "#invert_filter_expression",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Invert the selection criteria for --filterExpression Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Filter Expression"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invalidate-previous-filters"
            },
            "sbg:stageInput": null,
            "id": "#invalidate_previous_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Remove previous filters applied to the VCF Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invalidate Previous Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "id": "#interval_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are including. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Padding"
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "description": "Interval merging rule for abutting intervals.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging_rule"
              }
            ],
            "sbg:altPrefix": "",
            "label": "Interval Merging Rule",
            "id": "#interval_merging_rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input"
            },
            "sbg:fileTypes": "BAM,SAM,CRAM",
            "id": "#input",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "BAM/SAM/CRAM file containing reads This argument may be specified 0 or more times. Default value: null.",
            "label": "Input"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Names to use for the list of sample/genotype filters (must be a 1-to-1 mapping); this name is put in the FILTER field for variants that get filtered This argument may be specified 0 or more times.",
            "label": "Genotype Filter Name",
            "id": "#genotype_filter_name"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "One or more expression used with FORMAT (sample/genotype-level) fields to filter (see documentation guide for more info) This argument may be specified 0 or more times.",
            "label": "Genotype Filter Expression",
            "id": "#genotype_filter_expression"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--gcs-max-retries"
            },
            "sbg:stageInput": null,
            "description": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": "",
            "label": "Gcs Max Retries",
            "id": "#gcs_max_retries"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-not-in-mask"
            },
            "sbg:stageInput": null,
            "id": "#filter_not_in_mask",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Filter records NOT in given input mask. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Filter Not In Mask"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument may be specified 0 or more times. Default value: null.",
            "label": "Filter Name",
            "id": "#filter_name"
          },
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "One or more expression used with INFO fields to filter This argument may be specified 0 or more times. Default value: null.",
            "label": "Filter Expression",
            "id": "#filter_expression"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "sbg:fileTypes": "TXT, BED",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File",
            "id": "#exclude_intervals_file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Disable Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cluster-window-size"
            },
            "id": "#cluster_window_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The window size (in bases) in which to evaluate clustered SNPs Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Cluster Window Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cluster-size"
            },
            "id": "#cluster_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The number of SNPs which make up a cluster. Must be at least 2 Default value: 3.",
            "sbg:altPrefix": "",
            "label": "Cluster Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          }
        ],
        "y": 334.58347887132453,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 21,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 21,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" VariantFiltration --variant /path/to/variant.ext --reference /path/to/reference.ext  --filter-name \"qd,rank\" --filter-expression \"qd<2 || rank>10\"   --output variant.vcf",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 2429.1668445732903,
        "arguments": [
          {
            "position": 1,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.variant)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{ \n    /** Extracts filter name from expression */\n    function getVariableName(filterExpression){\n        var expressions = ['!=', '==', '>=', '<=', '>', '<']\n\n        for (var i = 0; i < expressions.length; i++) {\n            var indexOf = filterExpression.indexOf(expressions[i])\n\n            if (indexOf >= 0)\n                return filterExpression.slice(0, indexOf).trim()\n        }\n\n        return ''\n    }\n\n    /** Combines multiple filters into a new filter name */\n    function getFilterName(filterExpressions){\n        var newFilterName = ''\n\n        for (var i = 0; i < filterExpressions.length; i++) {\n            var variableName = getVariableName(filterExpressions[i])\n\n            newFilterName = newFilterName ? (newFilterName + '-' + variableName) : variableName\n        }\n\n        return newFilterName\n    }\n\n    filterName = $job.inputs.filter_name\n    filterExpressions = $job.inputs.filter_expression\n    splitFilterExpressions = $job.inputs.split_filter_expressions\n    \n    // Adds filter expressions to the command line\n    if (filterExpressions && filterExpressions.length > 0) \n    {  \n        if (splitFilterExpressions) // Adds each expression as a separate filter\n        {\n            cmd = []\n\n            for (i = 0; i < filterExpressions.length; i++) \n            {\n                var variableName = getVariableName(filterExpressions[i])\n\n                cmd.push('--filter-name')\n                cmd.push('\"' + variableName + '\"')\n                cmd.push('--filter-expression')\n                cmd.push('\"' + filterExpressions[i] + '\"')\n            }\n\n            return cmd.join(' ')\n        }\n        else // Adds all expressions as a single filter\n        { \n            filterName = filterName ? filterName : getFilterName(filterExpressions)\n\n            var expressions = []\n\n            for (var i = 0; i < filterExpressions.length; i++) \n            {\n                expressions.push(filterExpressions[i])\n\n                if (i < filterExpressions.length - 1)\n                expressions.push('||')\n            }\n\n            expressions = expressions.join(' ').trim()\n            expressions = '\"' + expressions + '\"'\n\n            return(['--filter-name', \n                    '\"' +  filterName + '\"', \n                    '--filter-expression', \n                    expressions].join(' ').trim())   \n        }\n    }\n    else\n        return ''\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{ \n    /** Extracts filter name from expression */\n    function getVariableName(filterExpression){\n        var expressions = ['!=', '==', '>=', '<=', '>', '<']\n\n        for (var i = 0; i < expressions.length; i++) {\n            var indexOf = filterExpression.indexOf(expressions[i])\n\n            if (indexOf >= 0)\n                return filterExpression.slice(0, indexOf).trim()\n        }\n\n        return ''\n    }\n\n    /** Combines multiple filters into a new filter name */\n    function getFilterName(filterExpressions){\n        var newFilterName = ''\n\n        for (var i = 0; i < filterExpressions.length; i++) {\n            var variableName = getVariableName(filterExpressions[i])\n\n            newFilterName = newFilterName ? (newFilterName + '-' + variableName) : variableName\n        }\n\n        return newFilterName\n    }\n\n    filterName = $job.inputs.genotype_filter_name\n    filterExpressions = $job.inputs.genotype_filter_expression\n    splitFilterExpressions = $job.inputs.split_filter_expressions\n    \n    // Adds filter expressions to the command line\n    if (filterExpressions && filterExpressions.length > 0) \n    {  \n        if (splitFilterExpressions) // Adds each expression as a separate filter\n        {\n            cmd = []\n\n            for (i = 0; i < filterExpressions.length; i++) \n            {\n                var variableName = getVariableName(filterExpressions[i])\n\n                cmd.push('--genotype-filter-name')\n                cmd.push('\"' + variableName + '\"')\n                cmd.push('--genotype-filter-expression')\n                cmd.push('\"' + filterExpressions[i] + '\"')\n            }\n\n            return cmd.join(' ')\n        }\n        else // Adds all expressions as a single filter\n        { \n            filterName = filterName ? filterName : getFilterName(filterExpressions)\n\n            var expressions = []\n\n            for (var i = 0; i < filterExpressions.length; i++) \n            {\n                expressions.push(filterExpressions[i])\n\n                if (i < filterExpressions.length - 1)\n                expressions.push('||')\n            }\n\n            expressions = expressions.join(' ').trim()\n            expressions = '\"' + expressions + '\"'\n\n            return(['--genotype-filter-name', \n                    '\"' +  filterName + '\"', \n                    '--genotype-filter-expression', \n                    expressions].join(' ').trim())   \n        }\n    }\n    else\n        return ''\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/56",
        "label": "INDEL GATK VariantFiltration",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-variantfiltration/21",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296584,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500887439,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/18",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1502718056,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/19",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1503405206,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1504105746,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1505747526,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/25",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1508243030,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1508247186,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1508251764,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/28",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1508488847,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1509714113,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/34",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1509721571,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/35",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1511522938,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/36",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1513786633,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/37",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1515588129,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/46",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1515590613,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/48",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1515599033,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/50",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1516622352,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/51",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1516625354,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/52",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 18
          },
          {
            "sbg:modifiedOn": 1517403818,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/54",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 19
          },
          {
            "sbg:modifiedOn": 1519648209,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/55",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 20
          },
          {
            "sbg:modifiedOn": 1520946077,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/56",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 21
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946077,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_VariantFiltration/56",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-variantfiltration/21",
        "sbg:job": {
          "inputs": {
            "clusterWindowSize": 35,
            "use_jdk_deflater": false,
            "invertFilterExpression": false,
            "setFilteredGtToNocall": false,
            "filterNotInMask": false,
            "filterExpression": [
              "V1 != 1.0",
              "V2 == 2.0",
              "V3 > 3",
              "V4 >= 4",
              "V5 < 5",
              "V6 <= 6"
            ],
            "unsafe": null,
            "intervals": "intervals-string-value",
            "filter_expression": [
              "qd<2",
              "rank>10"
            ],
            "intervals_string": "",
            "createOutputVariantIndex": false,
            "no_cmdline_in_header": true,
            "secondsBetweenProgressUpdates": null,
            "genotypeFilterName": "",
            "dontRequireSoftClipsBothEnds": false,
            "genotype_filter_expression": [],
            "use_jdk_inflater": false,
            "clusterSize": 3,
            "variant": {
              "class": "File",
              "path": "/path/to/variant.ext",
              "secondaryFiles": [
                {
                  "path": ".idx"
                }
              ],
              "size": 0
            },
            "createOutputBamIndex": false,
            "memory_overhead_per_job": 0,
            "invalidatePreviousFilters": false,
            "keepReverse": false,
            "createOutputBamMD5": false,
            "disableBamIndexCaching": false,
            "invertGenotypeFilterExpression": false,
            "ambigFilterBases": null,
            "validation_strictness": null,
            "splitFilterExpressions": true,
            "exclude_intervals_string": "",
            "interval_merging_rule": null,
            "reference": {
              "class": "File",
              "path": "/path/to/reference.ext",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "size": 0
            },
            "invert_criteria": true,
            "missingValuesInExpressionsShouldEvaluateAsFailing": false,
            "bqsr": {
              "class": "File",
              "path": "/path/to/bqsr.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "disableSequenceDictionaryValidation": false,
            "pedigree": {
              "class": "File",
              "path": "/path/to/pedigree.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "filter_not_in_mask": false,
            "invert_selection": true,
            "addOutputSAMProgramRecord": false,
            "createOutputVariantMD5": false,
            "filter_name": [
              "qd",
              "rank"
            ],
            "disableToolDefaultReadFilters": false,
            "no_call": true,
            "variants": [
              {
                "path": "varaint.vcf"
              }
            ],
            "QUIET": false,
            "memory_per_job": 2048,
            "lenient": false,
            "genotype_filter_name": "",
            "gcs_max_retries": null,
            "excludeIntervals": [
              {
                "class": "File",
                "path": "/path/to/excludeIntervals-1.ext",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/excludeIntervals-2.ext",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "filterName": "",
            "genotypeFilterExpression": null
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 2429.1668445732903,
      "id": "#INDEL_GATK_VariantFiltration"
    },
    {
      "inputs": [
        {
          "id": "#INDEL_GATK_SelectVariants.verbosity"
        },
        {
          "source": [
            "#GATK_MergeVcfs.output"
          ],
          "id": "#INDEL_GATK_SelectVariants.variant"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.use_jdk_inflater"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.use_jdk_deflater"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.set_filtered_gt_to_nocall"
        },
        {
          "default": "INDEL",
          "id": "#INDEL_GATK_SelectVariants.select_type_to_include"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.select_type_to_exclude"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.select_random_fraction"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.select_expressions"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.seconds_between_progress_updates"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.sample_name"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.sample_file"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.sample_expressions"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.sample"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.restrict_alleles_to"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.remove_unused_alternates"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.remove_fraction_genotypes"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#INDEL_GATK_SelectVariants.reference"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.read_validation_stringency"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.read_name"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.read_index"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.read_filter"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.quiet"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.preserve_alleles"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.pl_filter_name"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.pedigree"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.minimum_mapping_quality"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.min_read_length"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.min_indel_size"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.min_fraction_filtered_genotypes"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.min_filtered_genotypes"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.mendelian_violation_qual_threshold"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.mendelian_violation"
        },
        {
          "default": 2048,
          "id": "#INDEL_GATK_SelectVariants.memory_per_job"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.memory_overhead_per_job"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.maximum_mapping_quality"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_read_length"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_nocal_lnumber"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_nocal_lfraction"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_indel_size"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_fragment_length"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_fraction_filtered_genotypes"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.max_filtered_genotypes"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.library"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.lenient"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.keep_reverse"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.keep_read_group"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.keep_original_dp"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.keep_original_ac"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.keep_ids"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.invert_select"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.invert_mendelian_violation"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.intervals_string"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.intervals_file"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.interval_set_rule"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.interval_padding"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.interval_merging_rule"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.interval_exclusion_padding"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.input"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.gcs_max_retries"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.filter_too_short"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_sample_name"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_sample_file"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_sample_expressions"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_non_variants"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_intervals_string"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_intervals_file"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_ids"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.exclude_filtered"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.discordance"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.disable_tool_default_read_filters"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.disable_sequence_dictionary_validation"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.disable_read_filter"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.disable_bam_index_caching"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.create_output_variant_md5"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.create_output_variant_index"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.create_output_bam_md5"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.create_output_bam_index"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.concordance"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.cloud_prefetch_buffer"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.cloud_index_prefetch_buffer"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.black_listed_lanes"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.black_list"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.ambig_filter_frac"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.ambig_filter_bases"
        },
        {
          "id": "#INDEL_GATK_SelectVariants.add_output_sam_program_record"
        }
      ],
      "sbg:y": 384.5641937480047,
      "outputs": [
        {
          "id": "#INDEL_GATK_SelectVariants.select_variants_vcf"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Select a subset of variants from a VCF file.\n\n###**Overview**  \n\nThis tool allows you to select a subset of variants based on various criteria in order to facilitate certain analyses such as comparing and contrasting cases vs. controls, extracting variant or non-variant loci that meet certain requirements, or troubleshooting some unexpected results, to name but a few.\n\nThere are many different options for selecting subsets of variants from a larger callset:\n\nExtract one or more samples from a callset based on either a complete sample name or a pattern match.\nSpecify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written as \"JEXL expressions\", which are documented in the article about using JEXL expressions.\nProvide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.\nSelect variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.\nThere are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.\n\n###**Input**  \n\nA variant call set in VCF format from which to select a subset.  \n\n###**Output**  \n\nA new VCF file containing the selected subset of variants.  \n\n###**Usage examples**   \n\n    ./gatk-launch SelectVariants \\\n     \t-R reference.fasta \\\n     \t-V input.vcf \\\n     \t-selectType SNP \\\n     \t-O output.vcf\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "Select Variants VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#variant"
            },
            "type": [
              "File"
            ],
            "description": "File to which variants should be written.",
            "id": "#select_variants_vcf"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296598,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "SelectVariants"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--variant"
            },
            "sbg:fileTypes": "VCF,VCF.GZ",
            "id": "#variant",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "A VCF file containing variants Required.",
            "sbg:altPrefix": "",
            "label": "Variant"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--set-filtered-gt-to-nocall"
            },
            "sbg:stageInput": null,
            "id": "#set_filtered_gt_to_nocall",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Set filtered genotypes to no-call Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Set Filtered Gt To Nocall"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--select-type-to-include"
            },
            "id": "#select_type_to_include",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "NO_VARIATION",
                  "SNP",
                  "MNP",
                  "INDEL",
                  "SYMBOLIC",
                  "MIXED"
                ],
                "name": "null"
              }
            ],
            "description": "Select only a certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}.",
            "sbg:altPrefix": "",
            "label": "Select Type To Include"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--select-type-to-exclude"
            },
            "id": "#select_type_to_exclude",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "NO_VARIATION",
                  "SNP",
                  "MNP",
                  "INDEL",
                  "SYMBOLIC",
                  "MIXED"
                ],
                "name": "null"
              }
            ],
            "description": "Do not select certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}.",
            "sbg:altPrefix": "",
            "label": "Select Type To Exclude"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--select-random-fraction"
            },
            "id": "#select_random_fraction",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Select a fraction of variants at random from the input Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Select Random Fraction"
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Select Expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "One or more criteria to use when selecting the data This argument may be specified 0 or more times. Default value: null.",
            "id": "#select_expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-name"
            },
            "id": "#sample_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Include genotypes from this sample This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-file"
            },
            "id": "#sample_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "File containing a list of samples to include This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-expressions"
            },
            "id": "#sample_expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Regular expression to select multiple samples This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample Expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--restrict-alleles-to"
            },
            "id": "#restrict_alleles_to",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "BIALLELIC",
                  "MULTIALLELIC"
                ],
                "name": "null"
              }
            ],
            "description": "Select only variants of a particular allelicity Default value: ALL. Possible values: {ALL, BIALLELIC, MULTIALLELIC}.",
            "sbg:altPrefix": "",
            "label": "Restrict Alleles To"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--remove-unused-alternates"
            },
            "sbg:stageInput": null,
            "id": "#remove_unused_alternates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Remove alternate alleles not present in any genotypes Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Remove Unused Alternates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--remove-fraction-genotypes"
            },
            "id": "#remove_fraction_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Select a fraction of genotypes at random from the input and sets them to no-call Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Remove Fraction Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence Default value: null.",
            "sbg:altPrefix": "",
            "label": "Reference"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "null"
              }
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--preserve-alleles"
            },
            "id": "#preserve_alleles",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "null"
              }
            ],
            "description": "Preserve original alleles, do not trim Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Preserve Alleles"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pedigree"
            },
            "id": "#pedigree",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Pedigree file Default value: null.",
            "sbg:altPrefix": "",
            "label": "Pedigree"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-indel-size"
            },
            "id": "#min_indel_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum size of indels to include Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Min Indel Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-fraction-filtered-genotypes"
            },
            "id": "#min_fraction_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Maximum fraction of samples filtered at the genotype level Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Min Fraction Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-filtered-genotypes"
            },
            "id": "#min_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum number of samples filtered at the genotype level Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Min Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mendelian-violation-qual-threshold"
            },
            "id": "#mendelian_violation_qual_threshold",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Minimum GQ score for each trio member to accept a site as a violation Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Mendelian Violation Qual Threshold"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mendelian-violation"
            },
            "sbg:stageInput": null,
            "id": "#mendelian_violation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output mendelian violation sites only Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Mendelian Violation"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-nocal-lnumber"
            },
            "id": "#max_nocal_lnumber",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of samples with no-call genotypes Default value: 2147483647.",
            "sbg:altPrefix": "",
            "label": "Max Nocal Lnumber"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-nocal-lfraction"
            },
            "id": "#max_nocal_lfraction",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Maximum fraction of samples with no-call genotypes Default value: 1.0.",
            "sbg:altPrefix": "",
            "label": "Max Nocal Lfraction"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-indel-size"
            },
            "id": "#max_indel_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum size of indels to include Default value: 2147483647.",
            "sbg:altPrefix": "",
            "label": "Max Indel Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fraction-filtered-genotypes"
            },
            "id": "#max_fraction_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Maximum fraction of samples filtered at the genotype level Default value: 1.0.",
            "sbg:altPrefix": "",
            "label": "Max Fraction Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-filtered-genotypes"
            },
            "id": "#max_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of samples filtered at the genotype level Default value: 2147483647.",
            "sbg:altPrefix": "",
            "label": "Max Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-original-dp"
            },
            "sbg:stageInput": null,
            "id": "#keep_original_dp",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Store the original DP value after subsetting Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Original Dp"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-original-ac"
            },
            "sbg:stageInput": null,
            "id": "#keep_original_ac",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Store the original AC, AF, and AN values after subsetting Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Original Ac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-ids"
            },
            "label": "Keep I Ds",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "List of variant IDs to select Default value: null.",
            "id": "#keep_ids"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-select"
            },
            "sbg:stageInput": null,
            "id": "#invert_select",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Invert the selection criteria for -select Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Select"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-mendelian-violation"
            },
            "sbg:stageInput": null,
            "id": "#invert_mendelian_violation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output non-mendelian violation sites only Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Mendelian Violation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "id": "#interval_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are including. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Padding"
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "description": "Interval merging rule for abutting intervals.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging_rule"
              }
            ],
            "sbg:altPrefix": "",
            "label": "Interval Merging Rule",
            "id": "#interval_merging_rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input"
            },
            "sbg:fileTypes": "BAM,SAM,CRAM",
            "id": "#input",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "BAM/SAM/CRAM file containing reads This argument may be specified 0 or more times. Default value: null.",
            "label": "Input"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--gcs-max-retries"
            },
            "sbg:stageInput": null,
            "description": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": "",
            "label": "Gcs Max Retries",
            "id": "#gcs_max_retries"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-sample-name"
            },
            "id": "#exclude_sample_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Exclude genotypes from this sample This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Sample Name"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-sample-file"
            },
            "sbg:stageInput": null,
            "id": "#exclude_sample_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "List of samples to exclude This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Sample File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-sample-expressions"
            },
            "id": "#exclude_sample_expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "List of sample expressions to exclude This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Sample Expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-non-variants"
            },
            "sbg:stageInput": null,
            "id": "#exclude_non_variants",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Don't include non-variant sites Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Exclude Non Variants"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#exclude_intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-ids"
            },
            "label": "Exclude I Ds",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "List of variant IDs to select Default value: null.",
            "id": "#exclude_ids"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-filtered"
            },
            "sbg:stageInput": null,
            "id": "#exclude_filtered",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Don't include filtered sites Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Exclude Filtered"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--discordance"
            },
            "id": "#discordance",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Output variants not called in this comparison track Default value: null.",
            "sbg:altPrefix": "",
            "label": "Discordance"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Disable Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "null"
              }
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--concordance"
            },
            "id": "#concordance",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Output variants also called in this comparison track Default value: null.",
            "sbg:altPrefix": "",
            "label": "Concordance"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          }
        ],
        "y": 384.5641937480047,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 16,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 16,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" SelectVariants --variant /path/to/variant.ext --output variant.vcf",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 2229.884854232661,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.variant)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.select_expressions){\n\tsexpression = $job.inputs.select_expressions\n\tfilter = []\n\tfor (i = 0; i < sexpression.length; i++) {\n      \t\tfilter.push(\" --selectExpressions '\", sexpression[i], \"'\")\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": ""
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/47",
        "label": "INDEL GATK SelectVariants",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-selectvariants/16",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296598,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/19",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500640364,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500887435,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/21",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1502718052,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405196,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105738,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1505747521,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1508488841,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1511522912,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/28",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1511786942,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1513786626,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/30",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1515588105,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/39",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1515590606,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/41",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1515599016,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/43",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1517403812,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/45",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1519648183,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/46",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1520946083,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/47",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946083,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/47",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-selectvariants/16",
        "sbg:job": {
          "inputs": {
            "ambigFilterBases": 3,
            "invertMendelianViolation": true,
            "exclude_sample_file": null,
            "use_jdk_deflater": false,
            "validation_strictness": null,
            "interval_merging_rule": null,
            "select_expressions": null,
            "disableBamIndexCaching": true,
            "reference": {
              "path": "/example/example.fasta",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ]
            },
            "unsafe": null,
            "setFilteredGtToNocall": true,
            "removeUnusedAlternates": true,
            "disableSequenceDictionaryValidation": true,
            "keepOriginalAC": 10,
            "select_type_to_include": [
              "INDEL",
              "MIXED"
            ],
            "exclude_intervals_string": "",
            "mendelianViolation": true,
            "intervals_string": "",
            "createOutputVariantIndex": true,
            "variants": [
              {
                "path": "/example/bam.ext"
              }
            ],
            "invertSelect": true,
            "no_cmdline_in_header": true,
            "sample_name": "",
            "secondsBetweenProgressUpdates": null,
            "createOutputVariantMD5": true,
            "disableToolDefaultReadFilters": true,
            "excludeFiltered": true,
            "createOutputBamIndex": true,
            "memory_per_job": 2048,
            "maxNOCALLnumber": null,
            "use_jdk_inflater": false,
            "maxNOCALLfraction": null,
            "addOutputSAMProgramRecord": true,
            "variant": {
              "class": "File",
              "path": "/path/to/variant.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "lenient": null,
            "keepOriginalDP": 1,
            "excludeNonVariants": true,
            "gcs_max_retries": null,
            "dontRequireSoftClipsBothEnds": true,
            "bqsr": {
              "class": "File",
              "path": "/path/to/bqsr.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "sample_expressions": "",
            "keepReverse": true,
            "memory_overhead_per_job": 0
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 2229.884854232661,
      "id": "#INDEL_GATK_SelectVariants"
    },
    {
      "inputs": [
        {
          "id": "#SNP_GATK_SelectVariants.verbosity"
        },
        {
          "source": [
            "#GATK_MergeVcfs.output"
          ],
          "id": "#SNP_GATK_SelectVariants.variant"
        },
        {
          "id": "#SNP_GATK_SelectVariants.use_jdk_inflater"
        },
        {
          "id": "#SNP_GATK_SelectVariants.use_jdk_deflater"
        },
        {
          "id": "#SNP_GATK_SelectVariants.set_filtered_gt_to_nocall"
        },
        {
          "default": "SNP",
          "id": "#SNP_GATK_SelectVariants.select_type_to_include"
        },
        {
          "id": "#SNP_GATK_SelectVariants.select_type_to_exclude"
        },
        {
          "id": "#SNP_GATK_SelectVariants.select_random_fraction"
        },
        {
          "id": "#SNP_GATK_SelectVariants.select_expressions"
        },
        {
          "id": "#SNP_GATK_SelectVariants.seconds_between_progress_updates"
        },
        {
          "id": "#SNP_GATK_SelectVariants.sample_name"
        },
        {
          "id": "#SNP_GATK_SelectVariants.sample_file"
        },
        {
          "id": "#SNP_GATK_SelectVariants.sample_expressions"
        },
        {
          "id": "#SNP_GATK_SelectVariants.sample"
        },
        {
          "id": "#SNP_GATK_SelectVariants.restrict_alleles_to"
        },
        {
          "id": "#SNP_GATK_SelectVariants.remove_unused_alternates"
        },
        {
          "id": "#SNP_GATK_SelectVariants.remove_fraction_genotypes"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#SNP_GATK_SelectVariants.reference"
        },
        {
          "id": "#SNP_GATK_SelectVariants.read_validation_stringency"
        },
        {
          "id": "#SNP_GATK_SelectVariants.read_name"
        },
        {
          "id": "#SNP_GATK_SelectVariants.read_index"
        },
        {
          "id": "#SNP_GATK_SelectVariants.read_filter"
        },
        {
          "id": "#SNP_GATK_SelectVariants.quiet"
        },
        {
          "id": "#SNP_GATK_SelectVariants.preserve_alleles"
        },
        {
          "id": "#SNP_GATK_SelectVariants.pl_filter_name"
        },
        {
          "id": "#SNP_GATK_SelectVariants.pedigree"
        },
        {
          "id": "#SNP_GATK_SelectVariants.minimum_mapping_quality"
        },
        {
          "id": "#SNP_GATK_SelectVariants.min_read_length"
        },
        {
          "id": "#SNP_GATK_SelectVariants.min_indel_size"
        },
        {
          "id": "#SNP_GATK_SelectVariants.min_fraction_filtered_genotypes"
        },
        {
          "id": "#SNP_GATK_SelectVariants.min_filtered_genotypes"
        },
        {
          "id": "#SNP_GATK_SelectVariants.mendelian_violation_qual_threshold"
        },
        {
          "id": "#SNP_GATK_SelectVariants.mendelian_violation"
        },
        {
          "default": 2048,
          "id": "#SNP_GATK_SelectVariants.memory_per_job"
        },
        {
          "id": "#SNP_GATK_SelectVariants.memory_overhead_per_job"
        },
        {
          "id": "#SNP_GATK_SelectVariants.maximum_mapping_quality"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_read_length"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_nocal_lnumber"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_nocal_lfraction"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_indel_size"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_fragment_length"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_fraction_filtered_genotypes"
        },
        {
          "id": "#SNP_GATK_SelectVariants.max_filtered_genotypes"
        },
        {
          "id": "#SNP_GATK_SelectVariants.library"
        },
        {
          "id": "#SNP_GATK_SelectVariants.lenient"
        },
        {
          "id": "#SNP_GATK_SelectVariants.keep_reverse"
        },
        {
          "id": "#SNP_GATK_SelectVariants.keep_read_group"
        },
        {
          "id": "#SNP_GATK_SelectVariants.keep_original_dp"
        },
        {
          "id": "#SNP_GATK_SelectVariants.keep_original_ac"
        },
        {
          "id": "#SNP_GATK_SelectVariants.keep_ids"
        },
        {
          "id": "#SNP_GATK_SelectVariants.invert_select"
        },
        {
          "id": "#SNP_GATK_SelectVariants.invert_mendelian_violation"
        },
        {
          "id": "#SNP_GATK_SelectVariants.intervals_string"
        },
        {
          "id": "#SNP_GATK_SelectVariants.intervals_file"
        },
        {
          "id": "#SNP_GATK_SelectVariants.interval_set_rule"
        },
        {
          "id": "#SNP_GATK_SelectVariants.interval_padding"
        },
        {
          "id": "#SNP_GATK_SelectVariants.interval_merging_rule"
        },
        {
          "id": "#SNP_GATK_SelectVariants.interval_exclusion_padding"
        },
        {
          "id": "#SNP_GATK_SelectVariants.input"
        },
        {
          "id": "#SNP_GATK_SelectVariants.gcs_max_retries"
        },
        {
          "id": "#SNP_GATK_SelectVariants.filter_too_short"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_sample_name"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_sample_file"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_sample_expressions"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_non_variants"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_intervals_string"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_intervals_file"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_ids"
        },
        {
          "id": "#SNP_GATK_SelectVariants.exclude_filtered"
        },
        {
          "id": "#SNP_GATK_SelectVariants.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#SNP_GATK_SelectVariants.discordance"
        },
        {
          "id": "#SNP_GATK_SelectVariants.disable_tool_default_read_filters"
        },
        {
          "id": "#SNP_GATK_SelectVariants.disable_sequence_dictionary_validation"
        },
        {
          "id": "#SNP_GATK_SelectVariants.disable_read_filter"
        },
        {
          "id": "#SNP_GATK_SelectVariants.disable_bam_index_caching"
        },
        {
          "id": "#SNP_GATK_SelectVariants.create_output_variant_md5"
        },
        {
          "id": "#SNP_GATK_SelectVariants.create_output_variant_index"
        },
        {
          "id": "#SNP_GATK_SelectVariants.create_output_bam_md5"
        },
        {
          "id": "#SNP_GATK_SelectVariants.create_output_bam_index"
        },
        {
          "id": "#SNP_GATK_SelectVariants.concordance"
        },
        {
          "id": "#SNP_GATK_SelectVariants.cloud_prefetch_buffer"
        },
        {
          "id": "#SNP_GATK_SelectVariants.cloud_index_prefetch_buffer"
        },
        {
          "id": "#SNP_GATK_SelectVariants.black_listed_lanes"
        },
        {
          "id": "#SNP_GATK_SelectVariants.black_list"
        },
        {
          "id": "#SNP_GATK_SelectVariants.ambig_filter_frac"
        },
        {
          "id": "#SNP_GATK_SelectVariants.ambig_filter_bases"
        },
        {
          "id": "#SNP_GATK_SelectVariants.add_output_sam_program_record"
        }
      ],
      "sbg:y": 117.42866564222146,
      "outputs": [
        {
          "id": "#SNP_GATK_SelectVariants.select_variants_vcf"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Select a subset of variants from a VCF file.\n\n###**Overview**  \n\nThis tool allows you to select a subset of variants based on various criteria in order to facilitate certain analyses such as comparing and contrasting cases vs. controls, extracting variant or non-variant loci that meet certain requirements, or troubleshooting some unexpected results, to name but a few.\n\nThere are many different options for selecting subsets of variants from a larger callset:\n\nExtract one or more samples from a callset based on either a complete sample name or a pattern match.\nSpecify criteria for inclusion that place thresholds on annotation values, e.g. \"DP > 1000\" (depth of coverage greater than 1000x), \"AF < 0.25\" (sites with allele frequency less than 0.25). These criteria are written as \"JEXL expressions\", which are documented in the article about using JEXL expressions.\nProvide concordance or discordance tracks in order to include or exclude variants that are also present in other given callsets.\nSelect variants based on criteria like their type (e.g. INDELs only), evidence of mendelian violation, filtering status, allelicity, and so on.\nThere are also several options for recording the original values of certain annotations that are recalculated when a subsetting the new callset, trimming alleles, and so on.\n\n###**Input**  \n\nA variant call set in VCF format from which to select a subset.  \n\n###**Output**  \n\nA new VCF file containing the selected subset of variants.  \n\n###**Usage examples**   \n\n    ./gatk-launch SelectVariants \\\n     \t-R reference.fasta \\\n     \t-V input.vcf \\\n     \t-selectType SNP \\\n     \t-O output.vcf\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "Select Variants VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#variant"
            },
            "type": [
              "File"
            ],
            "description": "File to which variants should be written.",
            "id": "#select_variants_vcf"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296598,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "SelectVariants"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--variant"
            },
            "sbg:fileTypes": "VCF,VCF.GZ",
            "id": "#variant",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "A VCF file containing variants Required.",
            "sbg:altPrefix": "",
            "label": "Variant"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--set-filtered-gt-to-nocall"
            },
            "sbg:stageInput": null,
            "id": "#set_filtered_gt_to_nocall",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Set filtered genotypes to no-call Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Set Filtered Gt To Nocall"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--select-type-to-include"
            },
            "id": "#select_type_to_include",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "NO_VARIATION",
                  "SNP",
                  "MNP",
                  "INDEL",
                  "SYMBOLIC",
                  "MIXED"
                ],
                "name": "null"
              }
            ],
            "description": "Select only a certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}.",
            "sbg:altPrefix": "",
            "label": "Select Type To Include"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--select-type-to-exclude"
            },
            "id": "#select_type_to_exclude",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "NO_VARIATION",
                  "SNP",
                  "MNP",
                  "INDEL",
                  "SYMBOLIC",
                  "MIXED"
                ],
                "name": "null"
              }
            ],
            "description": "Do not select certain type of variants from the input file This argument may be specified 0 or more times. Default value: null. Possible values: {NO_VARIATION, SNP, MNP, INDEL, SYMBOLIC, MIXED}.",
            "sbg:altPrefix": "",
            "label": "Select Type To Exclude"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--select-random-fraction"
            },
            "id": "#select_random_fraction",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Select a fraction of variants at random from the input Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Select Random Fraction"
          },
          {
            "sbg:toolDefaultValue": "[]",
            "label": "Select Expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "One or more criteria to use when selecting the data This argument may be specified 0 or more times. Default value: null.",
            "id": "#select_expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-name"
            },
            "id": "#sample_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Include genotypes from this sample This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-file"
            },
            "id": "#sample_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "File containing a list of samples to include This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-expressions"
            },
            "id": "#sample_expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Regular expression to select multiple samples This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample Expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--restrict-alleles-to"
            },
            "id": "#restrict_alleles_to",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "BIALLELIC",
                  "MULTIALLELIC"
                ],
                "name": "null"
              }
            ],
            "description": "Select only variants of a particular allelicity Default value: ALL. Possible values: {ALL, BIALLELIC, MULTIALLELIC}.",
            "sbg:altPrefix": "",
            "label": "Restrict Alleles To"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--remove-unused-alternates"
            },
            "sbg:stageInput": null,
            "id": "#remove_unused_alternates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Remove alternate alleles not present in any genotypes Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Remove Unused Alternates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--remove-fraction-genotypes"
            },
            "id": "#remove_fraction_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Select a fraction of genotypes at random from the input and sets them to no-call Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Remove Fraction Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence Default value: null.",
            "sbg:altPrefix": "",
            "label": "Reference"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "null"
              }
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--preserve-alleles"
            },
            "id": "#preserve_alleles",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "null"
              }
            ],
            "description": "Preserve original alleles, do not trim Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Preserve Alleles"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pedigree"
            },
            "id": "#pedigree",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Pedigree file Default value: null.",
            "sbg:altPrefix": "",
            "label": "Pedigree"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-indel-size"
            },
            "id": "#min_indel_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum size of indels to include Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Min Indel Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-fraction-filtered-genotypes"
            },
            "id": "#min_fraction_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Maximum fraction of samples filtered at the genotype level Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Min Fraction Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-filtered-genotypes"
            },
            "id": "#min_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum number of samples filtered at the genotype level Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Min Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mendelian-violation-qual-threshold"
            },
            "id": "#mendelian_violation_qual_threshold",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Minimum GQ score for each trio member to accept a site as a violation Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Mendelian Violation Qual Threshold"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mendelian-violation"
            },
            "sbg:stageInput": null,
            "id": "#mendelian_violation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output mendelian violation sites only Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Mendelian Violation"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-nocal-lnumber"
            },
            "id": "#max_nocal_lnumber",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of samples with no-call genotypes Default value: 2147483647.",
            "sbg:altPrefix": "",
            "label": "Max Nocal Lnumber"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-nocal-lfraction"
            },
            "id": "#max_nocal_lfraction",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Maximum fraction of samples with no-call genotypes Default value: 1.0.",
            "sbg:altPrefix": "",
            "label": "Max Nocal Lfraction"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-indel-size"
            },
            "id": "#max_indel_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum size of indels to include Default value: 2147483647.",
            "sbg:altPrefix": "",
            "label": "Max Indel Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fraction-filtered-genotypes"
            },
            "id": "#max_fraction_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Maximum fraction of samples filtered at the genotype level Default value: 1.0.",
            "sbg:altPrefix": "",
            "label": "Max Fraction Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-filtered-genotypes"
            },
            "id": "#max_filtered_genotypes",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of samples filtered at the genotype level Default value: 2147483647.",
            "sbg:altPrefix": "",
            "label": "Max Filtered Genotypes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-original-dp"
            },
            "sbg:stageInput": null,
            "id": "#keep_original_dp",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Store the original DP value after subsetting Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Original Dp"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-original-ac"
            },
            "sbg:stageInput": null,
            "id": "#keep_original_ac",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Store the original AC, AF, and AN values after subsetting Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Original Ac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-ids"
            },
            "label": "Keep I Ds",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "List of variant IDs to select Default value: null.",
            "id": "#keep_ids"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-select"
            },
            "sbg:stageInput": null,
            "id": "#invert_select",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Invert the selection criteria for -select Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Select"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--invert-mendelian-violation"
            },
            "sbg:stageInput": null,
            "id": "#invert_mendelian_violation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output non-mendelian violation sites only Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Invert Mendelian Violation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "id": "#interval_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are including. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Padding"
          },
          {
            "sbg:toolDefaultValue": "ALL",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "description": "Interval merging rule for abutting intervals.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging_rule"
              }
            ],
            "sbg:altPrefix": "",
            "label": "Interval Merging Rule",
            "id": "#interval_merging_rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input"
            },
            "sbg:fileTypes": "BAM,SAM,CRAM",
            "id": "#input",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "BAM/SAM/CRAM file containing reads This argument may be specified 0 or more times. Default value: null.",
            "label": "Input"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--gcs-max-retries"
            },
            "sbg:stageInput": null,
            "description": "If the GCS bucket channel errors out, how many times it will attempt to re-initiate the connection.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "sbg:altPrefix": "",
            "label": "Gcs Max Retries",
            "id": "#gcs_max_retries"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-sample-name"
            },
            "id": "#exclude_sample_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Exclude genotypes from this sample This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Sample Name"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-sample-file"
            },
            "sbg:stageInput": null,
            "id": "#exclude_sample_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "List of samples to exclude This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Sample File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-sample-expressions"
            },
            "id": "#exclude_sample_expressions",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "List of sample expressions to exclude This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Sample Expressions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-non-variants"
            },
            "sbg:stageInput": null,
            "id": "#exclude_non_variants",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Don't include non-variant sites Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Exclude Non Variants"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#exclude_intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-ids"
            },
            "label": "Exclude I Ds",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "List of variant IDs to select Default value: null.",
            "id": "#exclude_ids"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--exclude-filtered"
            },
            "sbg:stageInput": null,
            "id": "#exclude_filtered",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Don't include filtered sites Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Exclude Filtered"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--discordance"
            },
            "id": "#discordance",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Output variants not called in this comparison track Default value: null.",
            "sbg:altPrefix": "",
            "label": "Discordance"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Disable Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "true",
                  "false"
                ],
                "name": "null"
              }
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--concordance"
            },
            "id": "#concordance",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Output variants also called in this comparison track Default value: null.",
            "sbg:altPrefix": "",
            "label": "Concordance"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          }
        ],
        "y": 117.42866564222146,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 16,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 16,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" SelectVariants --variant /path/to/variant.ext --output variant.vcf",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 2189.9896155601896,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.variant)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.vcf'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.select_expressions){\n\tsexpression = $job.inputs.select_expressions\n\tfilter = []\n\tfor (i = 0; i < sexpression.length; i++) {\n      \t\tfilter.push(\" --selectExpressions '\", sexpression[i], \"'\")\n    \t}\n\treturn filter.join(\"\").trim()\n  } \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": ""
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/47",
        "label": "SNP GATK SelectVariants",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-selectvariants/16",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296598,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/19",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500640364,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500887435,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/21",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1502718052,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405196,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105738,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1505747521,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1508488841,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1511522912,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/28",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1511786942,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1513786626,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/30",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1515588105,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/39",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1515590606,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/41",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1515599016,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/43",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1517403812,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/45",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1519648183,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/46",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1520946083,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/47",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946083,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_SelectVariants/47",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-selectvariants/16",
        "sbg:job": {
          "inputs": {
            "ambigFilterBases": 3,
            "invertMendelianViolation": true,
            "exclude_sample_file": null,
            "use_jdk_deflater": false,
            "validation_strictness": null,
            "interval_merging_rule": null,
            "select_expressions": null,
            "disableBamIndexCaching": true,
            "reference": {
              "path": "/example/example.fasta",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ]
            },
            "unsafe": null,
            "setFilteredGtToNocall": true,
            "removeUnusedAlternates": true,
            "disableSequenceDictionaryValidation": true,
            "keepOriginalAC": 10,
            "select_type_to_include": [
              "INDEL",
              "MIXED"
            ],
            "exclude_intervals_string": "",
            "mendelianViolation": true,
            "intervals_string": "",
            "createOutputVariantIndex": true,
            "variants": [
              {
                "path": "/example/bam.ext"
              }
            ],
            "invertSelect": true,
            "no_cmdline_in_header": true,
            "sample_name": "",
            "secondsBetweenProgressUpdates": null,
            "createOutputVariantMD5": true,
            "disableToolDefaultReadFilters": true,
            "excludeFiltered": true,
            "createOutputBamIndex": true,
            "memory_per_job": 2048,
            "maxNOCALLnumber": null,
            "use_jdk_inflater": false,
            "maxNOCALLfraction": null,
            "addOutputSAMProgramRecord": true,
            "variant": {
              "class": "File",
              "path": "/path/to/variant.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "lenient": null,
            "keepOriginalDP": 1,
            "excludeNonVariants": true,
            "gcs_max_retries": null,
            "dontRequireSoftClipsBothEnds": true,
            "bqsr": {
              "class": "File",
              "path": "/path/to/bqsr.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "sample_expressions": "",
            "keepReverse": true,
            "memory_overhead_per_job": 0
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 2189.9896155601896,
      "id": "#SNP_GATK_SelectVariants"
    },
    {
      "inputs": [
        {
          "source": [
            "#GATK_HaplotypeCaller.output_vcf"
          ],
          "id": "#GATK_GenotypeGVCFs.variants"
        },
        {
          "id": "#GATK_GenotypeGVCFs.use_new_af_calculator"
        },
        {
          "id": "#GATK_GenotypeGVCFs.use_jdk_inflater"
        },
        {
          "id": "#GATK_GenotypeGVCFs.use_jdk_deflater"
        },
        {
          "id": "#GATK_GenotypeGVCFs.standard_min_confidence_threshold_for_calling"
        },
        {
          "id": "#GATK_GenotypeGVCFs.seconds_between_progress_updates"
        },
        {
          "id": "#GATK_GenotypeGVCFs.sample_ploidy"
        },
        {
          "id": "#GATK_GenotypeGVCFs.sample"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_GenotypeGVCFs.reference"
        },
        {
          "id": "#GATK_GenotypeGVCFs.read_validation_stringency"
        },
        {
          "id": "#GATK_GenotypeGVCFs.read_name"
        },
        {
          "id": "#GATK_GenotypeGVCFs.read_index"
        },
        {
          "id": "#GATK_GenotypeGVCFs.read_filter"
        },
        {
          "id": "#GATK_GenotypeGVCFs.quiet"
        },
        {
          "id": "#GATK_GenotypeGVCFs.pl_filter_name"
        },
        {
          "id": "#GATK_GenotypeGVCFs.minimum_mapping_quality"
        },
        {
          "id": "#GATK_GenotypeGVCFs.min_read_length"
        },
        {
          "id": "#GATK_GenotypeGVCFs.memory_per_job"
        },
        {
          "id": "#GATK_GenotypeGVCFs.memory_overhead_per_job"
        },
        {
          "id": "#GATK_GenotypeGVCFs.maximum_mapping_quality"
        },
        {
          "id": "#GATK_GenotypeGVCFs.max_read_length"
        },
        {
          "id": "#GATK_GenotypeGVCFs.max_genotype_count"
        },
        {
          "id": "#GATK_GenotypeGVCFs.max_fragment_length"
        },
        {
          "id": "#GATK_GenotypeGVCFs.max_alternate_alleles"
        },
        {
          "id": "#GATK_GenotypeGVCFs.library"
        },
        {
          "id": "#GATK_GenotypeGVCFs.lenient"
        },
        {
          "id": "#GATK_GenotypeGVCFs.keep_reverse"
        },
        {
          "id": "#GATK_GenotypeGVCFs.keep_read_group"
        },
        {
          "id": "#GATK_GenotypeGVCFs.intervals_string"
        },
        {
          "id": "#GATK_GenotypeGVCFs.intervals_file"
        },
        {
          "id": "#GATK_GenotypeGVCFs.interval_padding"
        },
        {
          "id": "#GATK_GenotypeGVCFs.interval_merging_rule"
        },
        {
          "id": "#GATK_GenotypeGVCFs.interval_exclusion_padding"
        },
        {
          "id": "#GATK_GenotypeGVCFs.input_prior"
        },
        {
          "id": "#GATK_GenotypeGVCFs.indel_heterozygosity"
        },
        {
          "id": "#GATK_GenotypeGVCFs.heterozygosity_stdev"
        },
        {
          "id": "#GATK_GenotypeGVCFs.heterozygosity"
        },
        {
          "id": "#GATK_GenotypeGVCFs.group"
        },
        {
          "id": "#GATK_GenotypeGVCFs.filter_too_short"
        },
        {
          "id": "#GATK_GenotypeGVCFs.exclude_intervals_string"
        },
        {
          "id": "#GATK_GenotypeGVCFs.exclude_intervals_file"
        },
        {
          "id": "#GATK_GenotypeGVCFs.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#GATK_GenotypeGVCFs.disable_tool_default_read_filters"
        },
        {
          "id": "#GATK_GenotypeGVCFs.disable_sequence_dictionary_validation"
        },
        {
          "id": "#GATK_GenotypeGVCFs.disable_read_filter"
        },
        {
          "id": "#GATK_GenotypeGVCFs.disable_bam_index_caching"
        },
        {
          "id": "#GATK_GenotypeGVCFs.dbsnp"
        },
        {
          "id": "#GATK_GenotypeGVCFs.create_output_variant_md5"
        },
        {
          "id": "#GATK_GenotypeGVCFs.create_output_variant_index"
        },
        {
          "id": "#GATK_GenotypeGVCFs.create_output_bam_md5"
        },
        {
          "id": "#GATK_GenotypeGVCFs.create_output_bam_index"
        },
        {
          "id": "#GATK_GenotypeGVCFs.cloud_prefetch_buffer"
        },
        {
          "id": "#GATK_GenotypeGVCFs.cloud_index_prefetch_buffer"
        },
        {
          "id": "#GATK_GenotypeGVCFs.black_listed_lanes"
        },
        {
          "id": "#GATK_GenotypeGVCFs.black_list"
        },
        {
          "id": "#GATK_GenotypeGVCFs.annotations_to_exclude"
        },
        {
          "id": "#GATK_GenotypeGVCFs.annotation"
        },
        {
          "id": "#GATK_GenotypeGVCFs.annotate_nda"
        },
        {
          "id": "#GATK_GenotypeGVCFs.ambig_filter_frac"
        },
        {
          "id": "#GATK_GenotypeGVCFs.ambig_filter_bases"
        },
        {
          "id": "#GATK_GenotypeGVCFs.add_output_sam_program_record"
        }
      ],
      "sbg:y": 207.62366547678548,
      "outputs": [
        {
          "id": "#GATK_GenotypeGVCFs.vcf"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Perform joint genotyping on one or more samples pre-called with HaplotypeCaller.\n\n###**Overview**  \nThis tool is designed to perform joint genotyping on multiple samples pre-called with HaplotypeCaller to produce a multi-sample callset in a highly scalable manner. However it can also be run on a single sample at a time to produce a single-sample callset. In any case, the input samples must possess genotype likelihoods produced by HaplotypeCaller with `-ERC GVCF` or `-ERC BP_RESOLUTION`.re-genotype the newly merged record, and then re-annotate it.\n\n###**Input**  \nOne or more GVCFs produced by in HaplotypeCaller with the `-ERC GVCF` or `-ERC BP_RESOLUTION` settings, containing the samples to joint-genotype. \n\n###**Output**  \nA final VCF in which all samples have been jointly genotyped. \n\n###**Usage example**   \n\n####**Perform joint genotyping on a set of GVCFs enumerated in the command line**\n\n     gatk-launch --javaOptions \"-Xmx4g\" GenotypeGVCFs \\\n       -R reference.fasta \\\n       -V input1.g.vcf \\\n       -V input2.g.vcf \\\n       -V input3.g.vcf \\\n       -O output.vcf\n\n####**Perform joint genotyping on a set of GVCFs listed in a text file, one per line**\n\n     gatk-launch --javaOptions \"-Xmx4g\" GenotypeGVCFs \\\n       -R reference.fasta \\\n       -V input_gvcfs.list \\\n       -O output.vcf\n \n###**Caveat**  \nOnly GVCF files produced by HaplotypeCaller (or CombineGVCFs) can be used as input for this tool. Some other programs produce files that they call GVCFs but those lack some important information (accurate genotype likelihoods for every position) that GenotypeGVCFs requires for its operation. \n\n###**Special note on ploidy**  \nThis tool is able to handle any ploidy (or mix of ploidies) intelligently; there is no need to specify ploidy for non-diploid organisms.  \n\n###**Additional Notes**\n- By default, the tool works only with VCF resource files. To use VCF.GZ resource files, the tool wrapper needs to be modified.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "Output VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "sbg:inheritMetadataFrom": "#variants"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Output VCF.",
            "id": "#vcf"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296429,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "GenotypeGVCFs"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:fileTypes": "G.VCF",
            "id": "#variants",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "A VCF file containing variants Required.",
            "sbg:altPrefix": "-V",
            "label": "Variants"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-new-af-calculator"
            },
            "sbg:stageInput": null,
            "id": "#use_new_af_calculator",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If provided, we will use the new AF model instead of the so-called exact model Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use New Af Calculator"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--standard-min-confidence-threshold-for-calling"
            },
            "id": "#standard_min_confidence_threshold_for_calling",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "The minimum phred-scaled confidence threshold at which variants should be called Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Standard Min Confidence Threshold For Calling"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-ploidy"
            },
            "id": "#sample_ploidy",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy). Default value: 2.",
            "sbg:altPrefix": "",
            "label": "Sample Ploidy"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "id": "#reference",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Reference sequence file Required.",
            "sbg:altPrefix": "",
            "label": "Reference"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "sbg:toolDefaultValue": "2048",
            "sbg:stageInput": null,
            "id": "#memory_per_job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job in MB.",
            "label": "Memory Per Job"
          },
          {
            "sbg:toolDefaultValue": "64",
            "sbg:stageInput": null,
            "id": "#memory_overhead_per_job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job.",
            "label": "Memory Overhead Per Job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-genotype-count"
            },
            "id": "#max_genotype_count",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of genotypes to consider at any site Default value: 1024.",
            "sbg:altPrefix": "",
            "label": "Max Genotype Count"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-alternate-alleles"
            },
            "id": "#max_alternate_alleles",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of alternate alleles to genotype Default value: 6.",
            "sbg:altPrefix": "",
            "label": "Max Alternate Alleles"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "id": "#interval_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are including. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "id": "#interval_merging_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL, OVERLAPPING_ONLY}",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--input-prior"
            },
            "id": "#input_prior",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Input prior for calls This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Input Prior"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--indel-heterozygosity"
            },
            "id": "#indel_heterozygosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept Default value: 1.25E-4.",
            "sbg:altPrefix": "",
            "label": "Indel Heterozygosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--heterozygosity-stdev"
            },
            "id": "#heterozygosity_stdev",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Standard deviation of eterozygosity for SNP and indel calling. Default value: 0.01.",
            "sbg:altPrefix": "",
            "label": "Heterozygosity Stdev"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--heterozygosity"
            },
            "id": "#heterozygosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept Default value: 0.001.",
            "sbg:altPrefix": "",
            "label": "Heterozygosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--group"
            },
            "id": "#group",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more classes/groups of annotations to apply to variant calls This argument may be specified 0 or more times. Default value: [StandardAnnotation].",
            "sbg:altPrefix": "",
            "label": "Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#exclude_intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Disable Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".idx"
              ],
              "prefix": "--dbsnp"
            },
            "sbg:fileTypes": "VCF,VCF.GZ",
            "id": "#dbsnp",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "DbSNP file Default value: null.",
            "label": "Dbsnp"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--annotations-to-exclude"
            },
            "id": "#annotations_to_exclude",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more specific annotations to exclude from recomputation. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Annotations To Exclude"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--annotation"
            },
            "id": "#annotation",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more specific annotations to recompute. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Annotation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--annotate-with-num-discovered-alleles"
            },
            "label": "Annotate Nda",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site Default value: false. Possible values: {true, false}.",
            "id": "#annotate_nda"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          }
        ],
        "y": 207.62366547678548,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 20,
        "sbg:wrapperAuthor": "filip_tubic",
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 20,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" GenotypeGVCFs --reference /path/to/reference.ext  --output variants.ext  --variant /path/to/variants.ext",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 1687.0880797341679,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length).join('.')\n  variant_namebase = variant_namebase.replace('.g.vcf', '.vcf')\n  return '--output ' + variant_namebase\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  variants = [].concat($job.inputs.variants)\n\n  cmd = []\n\n  for (i = 0; i < variants.length; i++) {\n    cmd.push('--variant', variants[i].path)\n  }\n\n  return cmd.join(' ')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/46",
        "label": "GATK GenotypeGVCFs",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-genotypegvcfs/20",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296429,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/12",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500640346,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/13",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500888771,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/14",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1502718039,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/15",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405179,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/16",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105716,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1504273013,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/18",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1504275157,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/19",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1504539153,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1504789598,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1508488829,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1511522870,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1513597901,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1513786603,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1515587916,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/37",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1515590570,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/39",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1515599084,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/42",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1516899308,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/43",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1516899356,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/44",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 18
          },
          {
            "sbg:modifiedOn": 1519648161,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/45",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 19
          },
          {
            "sbg:modifiedOn": 1520946137,
            "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/46",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 20
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946137,
        "sbg:revisionNotes": "Copy of vladimirk/whole-genome-sequencing-gatk-4-0/gatk-4-0-genotypegvcfs/46",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-genotypegvcfs/20",
        "sbg:job": {
          "inputs": {
            "ambigFilterBases": 2,
            "useNewAFCalculator": true,
            "use_jdk_deflater": true,
            "interval_merging_rule": "interval_merging_rule-string-value",
            "use_jdk_inflater": true,
            "disableBamIndexCaching": true,
            "reference": {
              "class": "File",
              "path": "/path/to/reference.ext",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "size": 0
            },
            "disableSequenceDictionaryValidation": true,
            "exclude_intervals_string": "",
            "intervals_string": "",
            "createOutputVariantIndex": true,
            "addOutputSAMProgramRecord": true,
            "createOutputVariantMD5": true,
            "disableToolDefaultReadFilters": true,
            "dontRequireSoftClipsBothEnds": true,
            "variants": {
              "class": "File",
              "path": "/path/to/variants.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "QUIET": true,
            "memory_per_job": 2048,
            "lenient": true,
            "createOutputBamIndex": true,
            "annotateNDA": true,
            "keepReverse": true,
            "createOutputBamMD5": true,
            "memory_overhead_per_job": 0
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 1687.0880797341679,
      "scatter": "#GATK_GenotypeGVCFs.variants",
      "id": "#GATK_GenotypeGVCFs"
    },
    {
      "inputs": [
        {
          "id": "#GATK_HaplotypeCaller.wgs_hg38_mode_memory"
        },
        {
          "id": "#GATK_HaplotypeCaller.verbosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_new_qual_calculator"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_jdk_inflater"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_jdk_deflater"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_filtered_reads_for_annotations"
        },
        {
          "id": "#GATK_HaplotypeCaller.use_alleles_trigger"
        },
        {
          "id": "#GATK_HaplotypeCaller.standard_min_confidence_threshold_for_calling"
        },
        {
          "id": "#GATK_HaplotypeCaller.smith_waterman"
        },
        {
          "id": "#GATK_HaplotypeCaller.seconds_between_progress_updates"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_ploidy"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.sample"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_HaplotypeCaller.reference"
        },
        {
          "id": "#GATK_HaplotypeCaller.recover_dangling_heads"
        },
        {
          "source": [
            "#GATK_ApplyBQSR.output"
          ],
          "id": "#GATK_HaplotypeCaller.reads"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_validation_stringency"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_index"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_group_black_list"
        },
        {
          "id": "#GATK_HaplotypeCaller.read_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.quiet"
        },
        {
          "id": "#GATK_HaplotypeCaller.platform_filter_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.phred_scaled_global_read_mismapping_rate"
        },
        {
          "id": "#GATK_HaplotypeCaller.pcr_indel_model"
        },
        {
          "id": "#GATK_HaplotypeCaller.pair_hmm_gap_continuation_penalty"
        },
        {
          "id": "#GATK_HaplotypeCaller.output_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.num_pruning_samples"
        },
        {
          "id": "#GATK_HaplotypeCaller.native_pair_hmm_use_double_precision"
        },
        {
          "id": "#GATK_HaplotypeCaller.native_pair_hmm_threads"
        },
        {
          "id": "#GATK_HaplotypeCaller.minimum_mapping_quality"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_read_length"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_pruning"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_dangling_branch_length"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_base_quality_score"
        },
        {
          "id": "#GATK_HaplotypeCaller.min_assembly_region_size"
        },
        {
          "default": 2048,
          "id": "#GATK_HaplotypeCaller.memory_per_job"
        },
        {
          "default": 64,
          "id": "#GATK_HaplotypeCaller.memory_overhead_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.maximum_mapping_quality"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_reads_per_alignment_start"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_read_length"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_prob_propagation_distance"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_num_haplotypes_in_population"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_genotype_count"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_fragment_length"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_assembly_region_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.max_alternate_alleles"
        },
        {
          "id": "#GATK_HaplotypeCaller.library"
        },
        {
          "id": "#GATK_HaplotypeCaller.lenient"
        },
        {
          "id": "#GATK_HaplotypeCaller.kmer_size"
        },
        {
          "id": "#GATK_HaplotypeCaller.keep_reverse"
        },
        {
          "id": "#GATK_HaplotypeCaller.keep_read_group"
        },
        {
          "id": "#GATK_HaplotypeCaller.intervals_string"
        },
        {
          "source": [
            "#SBG_Prepare_Intervals.intervals"
          ],
          "id": "#GATK_HaplotypeCaller.intervals_file"
        },
        {
          "default": "UNION",
          "id": "#GATK_HaplotypeCaller.interval_set_rule"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_padding"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_merging_rule"
        },
        {
          "id": "#GATK_HaplotypeCaller.interval_exclusion_padding"
        },
        {
          "id": "#GATK_HaplotypeCaller.input_prior"
        },
        {
          "id": "#GATK_HaplotypeCaller.indel_size_to_eliminate_in_ref_model"
        },
        {
          "id": "#GATK_HaplotypeCaller.indel_heterozygosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.include_interval_name_in_output_name"
        },
        {
          "id": "#GATK_HaplotypeCaller.heterozygosity_stdev"
        },
        {
          "id": "#GATK_HaplotypeCaller.heterozygosity"
        },
        {
          "id": "#GATK_HaplotypeCaller.gvcf_gq_bands"
        },
        {
          "id": "#GATK_HaplotypeCaller.graph_output"
        },
        {
          "default": "DISCOVERY",
          "id": "#GATK_HaplotypeCaller.genotyping_mode"
        },
        {
          "id": "#GATK_HaplotypeCaller.filter_too_short"
        },
        {
          "id": "#GATK_HaplotypeCaller.exclude_intervals_string"
        },
        {
          "id": "#GATK_HaplotypeCaller.exclude_intervals_file"
        },
        {
          "default": "GVCF",
          "id": "#GATK_HaplotypeCaller.emit_ref_confidence"
        },
        {
          "id": "#GATK_HaplotypeCaller.dont_use_soft_clipped_bases"
        },
        {
          "id": "#GATK_HaplotypeCaller.dont_trim_active_regions"
        },
        {
          "id": "#GATK_HaplotypeCaller.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#GATK_HaplotypeCaller.dont_increase_kmer_sizes_for_cycles"
        },
        {
          "id": "#GATK_HaplotypeCaller.do_not_run_physical_phasing"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_tool_default_read_filters"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_tool_default_annotations"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_sequence_dictionary_validation"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_read_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_optimizations"
        },
        {
          "id": "#GATK_HaplotypeCaller.disable_bam_index_caching"
        },
        {
          "id": "#GATK_HaplotypeCaller.debug"
        },
        {
          "source": [
            "#GATK_IndexFeatureFile.output_with_index"
          ],
          "id": "#GATK_HaplotypeCaller.db_snp"
        },
        {
          "id": "#GATK_HaplotypeCaller.create_output_variant_md5"
        },
        {
          "id": "#GATK_HaplotypeCaller.create_output_variant_index"
        },
        {
          "id": "#GATK_HaplotypeCaller.create_output_bam_md5"
        },
        {
          "id": "#GATK_HaplotypeCaller.create_output_bam_index"
        },
        {
          "id": "#GATK_HaplotypeCaller.cpus_per_job"
        },
        {
          "id": "#GATK_HaplotypeCaller.contamination_fraction_to_filter"
        },
        {
          "id": "#GATK_HaplotypeCaller.contamination_fraction_per_sample_file"
        },
        {
          "id": "#GATK_HaplotypeCaller.consensus"
        },
        {
          "id": "#GATK_HaplotypeCaller.comp"
        },
        {
          "id": "#GATK_HaplotypeCaller.cloud_prefetch_buffer"
        },
        {
          "id": "#GATK_HaplotypeCaller.cloud_index_prefetch_buffer"
        },
        {
          "id": "#GATK_HaplotypeCaller.black_listed_lanes"
        },
        {
          "id": "#GATK_HaplotypeCaller.base_quality_score_threshold"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_writer_type"
        },
        {
          "id": "#GATK_HaplotypeCaller.bam_output"
        },
        {
          "id": "#GATK_HaplotypeCaller.assembly_region_padding"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotations_to_exclude"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotation_group"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotation"
        },
        {
          "id": "#GATK_HaplotypeCaller.annotate_nda"
        },
        {
          "id": "#GATK_HaplotypeCaller.ambig_filter_frac"
        },
        {
          "id": "#GATK_HaplotypeCaller.ambig_filter_bases"
        },
        {
          "id": "#GATK_HaplotypeCaller.allow_non_unique_kmers_in_ref"
        },
        {
          "id": "#GATK_HaplotypeCaller.alleles"
        },
        {
          "id": "#GATK_HaplotypeCaller.all_site_p_ls"
        },
        {
          "id": "#GATK_HaplotypeCaller.add_output_sam_program_record"
        },
        {
          "id": "#GATK_HaplotypeCaller.activity_profile_out"
        },
        {
          "id": "#GATK_HaplotypeCaller.active_probability_threshold"
        }
      ],
      "sbg:y": 315.842745364086,
      "outputs": [
        {
          "id": "#GATK_HaplotypeCaller.output_vcf"
        },
        {
          "id": "#GATK_HaplotypeCaller.output_bam"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Call germline SNPs and indels via local re-assembly of haplotypes.\n\n###**Overview**  \n\nThe HaplotypeCaller is capable of calling SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region. In other words, whenever the program encounters a region showing signs of variation, it discards the existing mapping information and completely reassembles the reads in that region. This allows the HaplotypeCaller to be more accurate when calling regions that are traditionally difficult to call, for example when they contain different types of variants close to each other. It also makes the HaplotypeCaller much better at calling indels than position-based callers like UnifiedGenotyper.\n\nIn the GVCF workflow used for scalable variant calling in DNA sequence data, HaplotypeCaller runs per-sample to generate an intermediate GVCF (not to be used in final analysis), which can then be used in GenotypeGVCFs for joint genotyping of multiple samples in a very efficient way. The GVCF workflow enables rapid incremental processing of samples as they roll off the sequencer, as well as scaling to very large cohort sizes (e.g. the 92K exomes of ExAC).\n\nIn addition, HaplotypeCaller is able to handle non-diploid organisms as well as pooled experiment data. Note however that the algorithms used to calculate variant likelihoods is not well suited to extreme allele frequencies (relative to ploidy) so its use is not recommended for somatic (cancer) variant discovery. For that purpose, use Mutect2 instead.\n\nFinally, HaplotypeCaller is also able to correctly handle the splice junctions that make RNAseq a challenge for most variant callers, on the condition that the input read data has previously been processed according to our recommendations as documented here. \n\n###**Input**  \nInput bam file(s) from which to make variant calls\n\n###**Output**  \nEither a VCF or GVCF file with raw, unfiltered SNP and indel calls. Regular VCFs must be filtered either by variant recalibration (Best Practice) or hard-filtering before use in downstream analyses. If using the GVCF workflow, the output is a GVCF file that must first be run through GenotypeGVCFs and then filtering before further analysis.\n\n###**Usage examples**  \nThese are example commands that show how to run HaplotypeCaller for typical use cases. Have a look at the method documentation for the basic GVCF workflow.\n\n####**Single-sample GVCF calling (outputs intermediate GVCF)**\n\n     gatk-launch --javaOptions \"-Xmx4g\" HaplotypeCaller  \\\n       -R reference.fasta \\\n       -I input.bam \\\n       -O output.g.vcf \\\n       -ERC GVCF\n\n####**Single-sample GVCF calling with allele-specific annotations**\n\n     gatk-launch --javaOptions \"-Xmx4g\" HaplotypeCaller  \\\n       -R reference.fasta \\\n       -I input.bam \\\n       -O output.g.vcf \\\n       -ERC GVCF \\\n       -G Standard \\\n       -G AS_Standard\n\n####**Variant calling with bamout to show realigned reads**\n\n     gatk-launch --javaOptions \"-Xmx4g\" HaplotypeCaller  \\\n       -R reference.fasta \\\n       -I input.bam \\\n       -O output.vcf \\\n       -bamout bamout.bam\n\n###**Caveats**\n\n- We have not yet fully tested the interaction between the GVCF-based calling or the multisample calling and the RNAseq-specific functionalities. Use those in combination at your own risk.\n\n###**Special note on ploidy**\n\nThis tool is able to handle many non-diploid use cases; the desired ploidy can be specified using the -ploidy argument. Note however that very high ploidies (such as are encountered in large pooled experiments) may cause performance challenges including excessive slowness. We are working on resolving these limitations.\n\n###**Additional Notes**\n- When working with PCR-free data, be sure to set `-pcr_indel_model NONE` (see argument below).\n- When running in `-ERC GVCF` or `-ERC BP_RESOLUTION` modes, the confidence threshold is automatically set to 0. This cannot be overridden by the command line. The threshold can be set manually to the desired level in the next step of the workflow (GenotypeGVCFs)\n- We recommend using a list of intervals to speed up analysis. See this document for details.\n- When using genotype given alleles mode, GATK HaplotypeCaller will try to confirm mutations in a given BAM file. If there are no reads for a position given in the alleles file, the output VCF will not contain that position.\n- By default, the tool works only with VCF resource files. To use VCF.GZ resource files, the tool wrapper needs to be modified.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "VCF",
            "outputBinding": {
              "glob": "*.vcf",
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#reads"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "A raw, unfiltered, highly specific callset in VCF format.",
            "id": "#output_vcf"
          },
          {
            "sbg:fileTypes": "BAM",
            "label": "Output BAM",
            "outputBinding": {
              "glob": "*.bam",
              "secondaryFiles": [
                ".bai"
              ],
              "sbg:inheritMetadataFrom": "#reads"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Reassembled BAM outputted if the appropriate flag is set.",
            "id": "#output_bam"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296570,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  memory = 0\n  \n  if($job.inputs.memory_per_job){\n  \t memory = $job.inputs.memory_per_job\n  }\n  else{\n    if($job.inputs.wgs_hg38_mode_memory){\n      \treference_name = $job.inputs.reference.path.replace(/^.*[\\\\\\/]/, '')\n      \n       \tif(reference_name.indexOf('38') >-1){\n      \t\tmemory = $job.inputs.wgs_hg38_mode_memory\n    \t}\n        else{\n       \t\tmemory = 2048 \n        }\n    }\n  \telse{\n       memory = 2048\n  \t}\n  }\n  \n  return '\\\"-Xmx'.concat(memory, 'M') + '\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "HaplotypeCaller"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Set recommended value for memory if reference v38 is used",
            "label": "Wgs Hg38 Mode Memory",
            "id": "#wgs_hg38_mode_memory"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-new-qual-calculator"
            },
            "label": "Use New Qual Calculator",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If provided, we will use the new qual model. Default value: false. Possible values: {true, false}.",
            "id": "#use_new_qual_calculator"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-filtered-reads-for-annotations"
            },
            "sbg:stageInput": null,
            "id": "#use_filtered_reads_for_annotations",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use the contamination-filtered read maps for the purposes of annotating variants Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Filtered Reads For Annotations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-alleles-trigger"
            },
            "sbg:stageInput": null,
            "id": "#use_alleles_trigger",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use additional trigger on variants found in an external alleles file Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Alleles Trigger"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--standard-min-confidence-threshold-for-calling"
            },
            "id": "#standard_min_confidence_threshold_for_calling",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "The minimum phred-scaled confidence threshold at which variants should be called Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Standard Min Confidence Threshold For Calling"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--smith-waterman"
            },
            "sbg:stageInput": null,
            "id": "#smith_waterman",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "FASTEST_AVAILABLE",
                  "AVX_ENABLED",
                  "JAVA"
                ],
                "name": "smith_waterman"
              }
            ],
            "description": "Which Smith-Waterman implementation to use, generally FASTEST_AVAILABLE is the right choice  Default value: JAVA.",
            "label": "Smith-Waterman"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-ploidy"
            },
            "id": "#sample_ploidy",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in each pool * Sample Ploidy). Default value: 2.",
            "sbg:altPrefix": "",
            "label": "Sample Ploidy"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample-name"
            },
            "id": "#sample_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Name of single sample to use from a multi-sample bam Default value: null.",
            "sbg:altPrefix": "",
            "label": "Sample Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "id": "#reference",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Reference sequence file Required.",
            "sbg:altPrefix": "",
            "label": "Reference"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--recover-dangling-heads"
            },
            "sbg:stageInput": null,
            "id": "#recover_dangling_heads",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "This argument is deprecated since version 3.3 Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Recover Dangling Heads"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input",
              "sbg:cmdInclude": true
            },
            "sbg:fileTypes": "BAM",
            "id": "#reads",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "BAM/SAM/CRAM file containing reads This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Reads"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-group-black-list"
            },
            "label": "Read Group Black List",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "id": "#read_group_black_list"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--platform-filter-name"
            },
            "label": "Platform Filter Name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Platform attribute (PL) to match. This argument must be specified at least once.",
            "id": "#platform_filter_name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--phred-scaled-global-read-mismapping-rate"
            },
            "id": "#phred_scaled_global_read_mismapping_rate",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The global assumed mismapping rate for reads Default value: 45.",
            "sbg:altPrefix": "",
            "label": "Phred Scaled Global Read Mismapping Rate"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pcr-indel-model"
            },
            "id": "#pcr_indel_model",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "NONE",
                  "HOSTILE",
                  "AGGRESSIVE",
                  "CONSERVATIVE"
                ],
                "name": "null"
              }
            ],
            "description": "The PCR indel model to use Default value: CONSERVATIVE. Possible values: {NONE, HOSTILE, AGGRESSIVE, CONSERVATIVE}.",
            "sbg:altPrefix": "",
            "label": "Pcr Indel Model"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pair-hmm-gap-continuation-penalty"
            },
            "label": "Pair HMM Gap Continuation Penalty",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Flat gap continuation penalty for use in the Pair HMM Default value: 10.",
            "id": "#pair_hmm_gap_continuation_penalty"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--output-mode"
            },
            "id": "#output_mode",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "EMIT_VARIANTS_ONLY",
                  "EMIT_ALL_CONFIDENT_SITES",
                  "EMIT_ALL_SITES"
                ],
                "name": "null"
              }
            ],
            "description": "Specifies which type of calls we should output Default value: EMIT_VARIANTS_ONLY. Possible values: {EMIT_VARIANTS_ONLY, EMIT_ALL_CONFIDENT_SITES, EMIT_ALL_SITES}.",
            "sbg:altPrefix": "",
            "label": "Output Mode"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--num-pruning-samples"
            },
            "id": "#num_pruning_samples",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of samples that must pass the minPruning threshold Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Num Pruning Samples"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--native-pair-hmm-use-double-precision"
            },
            "label": "Native Pair Hmm Use Double Precision",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use double precision in the native pairHmm. This is slower but matches the java implementation better. Default value: false.",
            "id": "#native_pair_hmm_use_double_precision"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--native-pair-hmm-threads"
            },
            "id": "#native_pair_hmm_threads",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "How many threads should a native pairHMM implementation use Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Native Pair Hmm Threads"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 20.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-pruning"
            },
            "id": "#min_pruning",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum support to not prune paths in the graph Default value: 2.",
            "sbg:altPrefix": "",
            "label": "Min Pruning"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-dangling-branch-length"
            },
            "id": "#min_dangling_branch_length",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum length of a dangling branch to attempt recovery Default value: 4.",
            "sbg:altPrefix": "",
            "label": "Min Dangling Branch Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-base-quality-score"
            },
            "id": "#min_base_quality_score",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum base quality required to consider a base for calling Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Min Base Quality Score"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-assembly-region-size"
            },
            "id": "#min_assembly_region_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum size of an assembly region Default value: 50.",
            "sbg:altPrefix": "",
            "label": "Min Assembly Region Size"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of RAM memory to be used per job. Defaults to 2048MB for Single threaded jobs,and all of the available memory on the instance for multi-threaded jobs.",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-reads-per-alignment-start"
            },
            "id": "#max_reads_per_alignment_start",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of reads to retain per alignment start position. Reads above this threshold will be downsampled. Set to 0 to disable. Default value: 50.",
            "sbg:altPrefix": "",
            "label": "Max Reads Per Alignment Start"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-prob-propagation-distance"
            },
            "id": "#max_prob_propagation_distance",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Upper limit on how many bases away probability mass can be moved around when calculating the boundaries between active and inactive assembly regions Default value: 50.",
            "sbg:altPrefix": "",
            "label": "Max Prob Propagation Distance"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-num-haplotypes-in-population"
            },
            "id": "#max_num_haplotypes_in_population",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of haplotypes to consider for your population Default value: 128.",
            "sbg:altPrefix": "",
            "label": "Max Num Haplotypes In Population"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-genotype-count"
            },
            "id": "#max_genotype_count",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of genotypes to consider at any site Default value: 1024.",
            "sbg:altPrefix": "",
            "label": "Max Genotype Count"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-assembly-region-size"
            },
            "id": "#max_assembly_region_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum size of an assembly region Default value: 300.",
            "sbg:altPrefix": "",
            "label": "Max Assembly Region Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-alternate-alleles"
            },
            "id": "#max_alternate_alleles",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum number of alternate alleles to genotype Default value: 6.",
            "sbg:altPrefix": "",
            "label": "Max Alternate Alleles"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--kmer-size"
            },
            "id": "#kmer_size",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Kmer size to use in the read threading assembler This argument may be specified 0 or more times. Default value: [10, 25].",
            "sbg:altPrefix": "",
            "label": "Kmer Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "sbg:fileTypes": "TXT, BED",
            "inputBinding": {
              "itemSeparator": " ",
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if($job.inputs.intervals_file){\n    if($job.inputs.intervals_file instanceof Array){\n      if($job.inputs.intervals_file.length > 1){\n        if([].concat($job.inputs.reads)[0].metadata)\n          if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n            return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n      } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n    } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n  } else\n    return ''\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": false
            },
            "sbg:stageInput": "link",
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "id": "#intervals_file",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "id": "#interval_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are including. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "id": "#interval_merging_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL",
                  "OVERLAPPING_ONLY"
                ],
                "name": "interval_merging_rule"
              }
            ],
            "description": "Interval merging rule for abutting intervals. Default value: ALL.",
            "label": "Interval Merging Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--input-prior"
            },
            "id": "#input_prior",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Input prior for calls This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Input Prior"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--indel-size-to-eliminate-in-ref-model"
            },
            "id": "#indel_size_to_eliminate_in_ref_model",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The size of an indel to check for in the reference model Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Indel Size To Eliminate In Ref Model"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--indel-heterozygosity"
            },
            "id": "#indel_heterozygosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Heterozygosity for indel calling. See the GATKDocs for heterozygosity for full details on the meaning of this population genetics concept Default value: 1.25E-4.",
            "sbg:altPrefix": "",
            "label": "Indel Heterozygosity"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "sbg:stageInput": null,
            "label": "Include Interval Name In Output Name",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Include interval name in output name.",
            "id": "#include_interval_name_in_output_name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--heterozygosity-stdev"
            },
            "id": "#heterozygosity_stdev",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Standard deviation of eterozygosity for SNP and indel calling. Default value: 0.01.",
            "sbg:altPrefix": "",
            "label": "Heterozygosity Stdev"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--heterozygosity"
            },
            "id": "#heterozygosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Heterozygosity value used to compute prior likelihoods for any locus. See the GATKDocs for full details on the meaning of this population genetics concept Default value: 0.001.",
            "sbg:altPrefix": "",
            "label": "Heterozygosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--gvcf-gq-bands"
            },
            "label": "Gvcf GQ Bands",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "GQ thresholds for reference confidence bands This argument may be specified 0 or more times. Default value: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 80, 90, 99].",
            "id": "#gvcf_gq_bands"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--graph-output"
            },
            "id": "#graph_output",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Write debug assembly graph information to this file Default value: null.",
            "sbg:altPrefix": "",
            "label": "Graph Output"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--genotyping-mode"
            },
            "id": "#genotyping_mode",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "DISCOVERY",
                  "GENOTYPE_GIVEN_ALLELES"
                ],
                "name": "null"
              }
            ],
            "description": "Specifies how to determine the alternate alleles to use for genotyping Default value: DISCOVERY. Possible values: {DISCOVERY, GENOTYPE_GIVEN_ALLELES}.",
            "sbg:altPrefix": "",
            "label": "Genotyping Mode"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#exclude_intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--emit-ref-confidence"
            },
            "id": "#emit_ref_confidence",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "NONE",
                  "BP_RESOLUTION",
                  "GVCF"
                ],
                "name": "null"
              }
            ],
            "description": "Mode for emitting reference confidence scores Default value: NONE. Possible values: {NONE, BP_RESOLUTION, GVCF}.",
            "sbg:altPrefix": "",
            "label": "Emit Ref Confidence"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-use-soft-clipped-bases"
            },
            "sbg:stageInput": null,
            "id": "#dont_use_soft_clipped_bases",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not analyze soft clipped bases in the reads Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Use Soft Clipped Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-trim-active-regions"
            },
            "sbg:stageInput": null,
            "id": "#dont_trim_active_regions",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, we will not trim down the active region from the full region (active + extension) to just the active interval for genotyping Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Trim Active Regions"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-increase-kmer-sizes-for-cycles"
            },
            "sbg:stageInput": null,
            "id": "#dont_increase_kmer_sizes_for_cycles",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable iterating over kmer sizes when graph cycles are detected Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Increase Kmer Sizes For Cycles"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--do-not-run-physical-phasing"
            },
            "sbg:stageInput": null,
            "id": "#do_not_run_physical_phasing",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable physical phasing Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Do Not Run Physical Phasing"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--disable-tool-default-annotations"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_annotations",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default annotations.",
            "label": "Disable Tool Default Annotations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Disable Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-optimizations"
            },
            "sbg:stageInput": null,
            "id": "#disable_optimizations",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Don't skip calculations in ActiveRegions with no variants Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Optimizations"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--debug"
            },
            "sbg:stageInput": null,
            "id": "#debug",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Print out very verbose debug information about each triggering active region Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Debug"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  if($job.inputs.db_snp)\n    return '--dbsnp ' + [].concat($job.inputs.db_snp)[0].path\n  else return ''\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true,
              "secondaryFiles": [
                ".idx"
              ]
            },
            "sbg:fileTypes": "VCF",
            "id": "#db_snp",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "DbSNP file Default value: null.",
            "sbg:altPrefix": "-D",
            "label": "Db Snp"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "type": [
              "null",
              "int"
            ],
            "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used. Set to 0 for auto-detect (use with caution,as auto-detect will find the optimal value in most cases).",
            "label": "Cpus Per Job",
            "id": "#cpus_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--contamination-fraction-to-filter"
            },
            "id": "#contamination_fraction_to_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove Default value: 0.0.",
            "sbg:altPrefix": "",
            "label": "Contamination Fraction To Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--contamination-fraction-per-sample-file"
            },
            "id": "#contamination_fraction_per_sample_file",
            "required": false,
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Tab-separated File containing fraction of contamination in sequencing data (per sample) to aggressively remove. Format should be \"<SampleID><TAB><Contamination>\" (Contamination is double) per line; No header. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Contamination Fraction Per Sample File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--consensus"
            },
            "sbg:stageInput": null,
            "id": "#consensus",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Consensus mode Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Consensus"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--comp"
            },
            "id": "#comp",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Comparison VCF file(s) This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Comp"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--base-quality-score-threshold"
            },
            "id": "#base_quality_score_threshold",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Base qualities below this threshold will be reduced to the minimum (6) Default value: 18.",
            "sbg:altPrefix": "",
            "label": "Base Quality Score Threshold"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--bam-writer-type"
            },
            "id": "#bam_writer_type",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ALL_POSSIBLE_HAPLOTYPES",
                  "CALLED_HAPLOTYPES"
                ],
                "name": "null"
              }
            ],
            "description": "Which haplotypes should be written to the BAM Default value: CALLED_HAPLOTYPES. Possible values: {ALL_POSSIBLE_HAPLOTYPES, CALLED_HAPLOTYPES}.",
            "sbg:altPrefix": "",
            "label": "Bam Writer Type"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--bam-output"
            },
            "label": "Bam Output",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "File to which assembled haplotypes should be written Default value: null.",
            "id": "#bam_output"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--assembly-region-padding"
            },
            "id": "#assembly_region_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of additional bases of context to include around each assembly region Default value: 100.",
            "sbg:altPrefix": "",
            "label": "Assembly Region Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--annotations-to-exclude"
            },
            "label": "Annotations To Exclude",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more specific annotations to exclude from variant calls  This argument may be specified 0 or more times. Default value: null.",
            "id": "#annotations_to_exclude"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--annotation-group"
            },
            "label": "Annotation Group",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more groups of annotations to apply to variant calls  This argument may be specified 0 or more times. Default value: [StandardAnnotation, StandardHCAnnotation].",
            "id": "#annotation_group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--annotation"
            },
            "id": "#annotation",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more specific annotations to apply to variant calls This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Annotation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--annotate-with-num-discovered-alleles"
            },
            "label": "Annotate Nda",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site Default value: false. Possible values: {true, false}.",
            "id": "#annotate_nda"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--allow-non-unique-kmers-in-ref"
            },
            "sbg:stageInput": null,
            "id": "#allow_non_unique_kmers_in_ref",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow graphs that have non-unique kmers in the reference Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Allow Non Unique Kmers In Ref"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".idx"
              ],
              "prefix": "--alleles"
            },
            "label": "Alleles",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES Default value: null.",
            "id": "#alleles"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--all-site-p-ls"
            },
            "sbg:stageInput": null,
            "id": "#all_site_p_ls",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Annotate all sites with PLs Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "All Site P Ls"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--activity-profile-out"
            },
            "label": "Activity Profile Out",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Output the raw activity profile results in IGV format. Default value: null.",
            "id": "#activity_profile_out"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--active-probability-threshold"
            },
            "id": "#active_probability_threshold",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Minimum probability for a locus to be considered active. Default value: 0.002.",
            "sbg:altPrefix": "",
            "label": "Active Probability Threshold"
          }
        ],
        "y": 315.842745364086,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 30,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 30,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" HaplotypeCaller --input /path/to/input.bam --reference /path/to/reference.fa --output input.g.vcf",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  memory = 0\n  \n  if($job.inputs.memory_per_job){\n  \t memory = $job.inputs.memory_per_job\n  }\n  else{\n    if($job.inputs.wgs_hg38_mode_memory){\n      \treference_name = $job.inputs.reference.path.replace(/^.*[\\\\\\/]/, '')\n      \n       \tif(reference_name.indexOf('38') >-1){\n      \t\tmemory = $job.inputs.wgs_hg38_mode_memory\n    \t}\n        else{\n       \t\tmemory = 2048 \n        }\n    }\n  \telse{\n       memory = 2048\n  \t}\n  }\n       \n  if($job.inputs.memory_overhead_per_job){\n\treturn memory + $job.inputs.memory_overhead_per_job  \n  }\n  else{\n  \treturn memory\n  }\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 1532.7304075849204,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\t\n  interval_name = ''\n  \n  if ($job.inputs.include_interval_name_in_output_name){\n    if($job.inputs.intervals_file){\n      interval_path = [].concat($job.inputs.intervals_file)[0].path\n      interval_name = interval_path.split('/')[interval_path.split('/').length - 1].split('.')\n      interval_name.pop()\n      interval_name = '_' + interval_name.join('')\n    }\n  }\n  \n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  \n  if (read_name[read_name.length - 2] == 'recalibrated')\n  \tread_namebase = read_name.slice(0, read_name.length - 2).join('.')\n  else\n    read_namebase = read_name.slice(0, read_name.length - 1).join('.')\n   \n  if($job.inputs.emit_ref_confidence == 'GVCF')\n  \treturn read_namebase + interval_name + '.g.vcf'\n  else\n  \treturn read_namebase + interval_name +  '.vcf'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          },
          {
            "position": 100,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  reads = [].concat($job.inputs.reads)\n  \n  if ($job.inputs.bam_output) {\n    \n    return '--bam-output ' + reads[0].path.split('/').pop().split('.').slice(0,-1).join('.') + '.reassembled.bam'\n    \n  } else {\n    \n    return ''\n    \n  }\n  \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/78",
        "label": "GATK HaplotypeCaller",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-haplotypecaller/30",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296570,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500640351,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/25",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500887426,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1502111506,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1502190447,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/28",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1502718044,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1503405184,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/33",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1504105725,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/34",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1504190940,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/35",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1504264072,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/38",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1504264485,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/39",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1504264657,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/40",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1504273058,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/41",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1504275166,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/42",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1504789607,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/45",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1505823077,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/46",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1507566130,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/49",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1507625689,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/50",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1511522877,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/51",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 18
          },
          {
            "sbg:modifiedOn": 1513786609,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/52",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 19
          },
          {
            "sbg:modifiedOn": 1515587922,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/64",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 20
          },
          {
            "sbg:modifiedOn": 1515590582,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/66",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 21
          },
          {
            "sbg:modifiedOn": 1515599053,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/70",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 22
          },
          {
            "sbg:modifiedOn": 1516365803,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/71",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 23
          },
          {
            "sbg:modifiedOn": 1516373194,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/72",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 24
          },
          {
            "sbg:modifiedOn": 1516899315,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/73",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 25
          },
          {
            "sbg:modifiedOn": 1516960383,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/74",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 26
          },
          {
            "sbg:modifiedOn": 1516968545,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/75",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 27
          },
          {
            "sbg:modifiedOn": 1519225983,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/76",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 28
          },
          {
            "sbg:modifiedOn": 1519900717,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/77",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 29
          },
          {
            "sbg:modifiedOn": 1520946125,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/78",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 30
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946125,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_HaplotypeCaller/78",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-haplotypecaller/30",
        "sbg:job": {
          "inputs": {
            "useNewAFCalculator": false,
            "doNotRunPhysicalPhasing": false,
            "readShardPadding": null,
            "emitDroppedReads": false,
            "gq_threshold": [
              null
            ],
            "heterozygosityStandardDeviation": null,
            "write_to_bam": null,
            "max_active_region_size": null,
            "min_length": null,
            "intervals_string": "",
            "createOutputVariantIndex": false,
            "no_cmdline_in_header": false,
            "contamination_fraction": null,
            "debug": false,
            "band_pass": "",
            "dontRequireSoftClipsBothEnds": false,
            "createOutputBamIndex": false,
            "max_reads_active_reg": null,
            "secondsBetweenProgressUpdates": null,
            "no_active_region_trim": false,
            "activity_profile_out": "",
            "bqsr": {
              "class": "File",
              "path": "/path/to/bqsr.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "keepReverse": false,
            "emit_ref_confidence": "GVCF",
            "min_reads_per_algn": null,
            "allowNonUniqueKmersInRef": false,
            "include_interval_name_in_output_name": false,
            "indel_size": null,
            "force_active": false,
            "dontTrimActiveRegions": false,
            "dontIncreaseKmerSizesForCycles": false,
            "useAllelesTrigger": false,
            "addOutputSAMProgramRecord": false,
            "pcr_indel_model": null,
            "emitRefConfidence": null,
            "createOutputVariantMD5": false,
            "kmer_size": null,
            "genotyping_mode": null,
            "consensus_mode": false,
            "disableToolDefaultReadFilters": false,
            "bamout": false,
            "annotation_group": "",
            "memory_overhead_per_job": null,
            "QUIET": false,
            "disable_tool_default_annotations": true,
            "createOutputBamMD5": false,
            "annotate_all_sites_PLs": false,
            "disableOptimizations": false,
            "min_base_q_scores": null,
            "max_haplotypes": null,
            "useDoublePrecision": false,
            "consensus": false,
            "cpus_per_job": null,
            "db_snp": {
              "class": "File",
              "path": "/path/to/db_snp.vcf",
              "secondaryFiles": [
                {
                  "path": ".idx"
                }
              ],
              "size": 0
            },
            "ambigFilterBases": null,
            "wgs_hg38_mode_memory": null,
            "graph_file": "",
            "use_jdk_deflater": false,
            "mismapping_rate": null,
            "active_reg_ext": "",
            "use_filtered_reads": false,
            "disableBamIndexCaching": false,
            "memory_per_job": null,
            "dont_increase_kmers": false,
            "output_raw_activity": "",
            "exclude_intervals_string": "",
            "bamOutput": false,
            "dontUseSoftClippedBases": false,
            "maxReadsInMemoryPerSample": null,
            "disable_opt": false,
            "allow_non_unique_kmers": false,
            "use_jdk_inflater": false,
            "maxTotalReadsInMemory": null,
            "interval_merging_rule": null,
            "min_graph_pruning": "",
            "bam_out": "",
            "readShardSize": null,
            "use_allele_trigger": false,
            "annotation_groups": [
              ""
            ],
            "exclude_ann": [
              ""
            ],
            "useFilteredReadsForAnnotations": false,
            "prob_threshold": null,
            "disable_phasing": false,
            "reference": {
              "class": "File",
              "path": "/path/to/reference.fa",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "size": 0
            },
            "smith_waterman": null,
            "disableSequenceDictionaryValidation": false,
            "active_reg_output_file_name": "",
            "min_pruning_threshold": "",
            "sample_name": "",
            "reads": [
              {
                "class": "File",
                "path": "/path/to/input.bam",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "no_soft_clipped": false,
            "gap_penalty": null,
            "out_mode": null,
            "recoverDanglingHeads": false,
            "lenient": false,
            "annotateNDA": false,
            "native_pair_hmm_use_double_precision": false,
            "allSitePLs": false,
            "max_genotype_count": null,
            "intervals_file": [
              {
                "class": "File",
                "path": "/path/to/1.bed",
                "secondaryFiles": [],
                "size": 0
              }
            ]
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 1532.7304075849204,
      "scatter": "#GATK_HaplotypeCaller.reads",
      "id": "#GATK_HaplotypeCaller"
    },
    {
      "inputs": [
        {
          "id": "#GATK_BaseRecalibrator.verbosity"
        },
        {
          "id": "#GATK_BaseRecalibrator.use_original_qualities"
        },
        {
          "id": "#GATK_BaseRecalibrator.use_jdk_inflater"
        },
        {
          "id": "#GATK_BaseRecalibrator.use_jdk_deflater"
        },
        {
          "id": "#GATK_BaseRecalibrator.seconds_between_progress_updates"
        },
        {
          "id": "#GATK_BaseRecalibrator.sample"
        },
        {
          "source": [
            "#SBG_FASTA_Indices.fasta_reference"
          ],
          "id": "#GATK_BaseRecalibrator.reference"
        },
        {
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ],
          "id": "#GATK_BaseRecalibrator.reads"
        },
        {
          "id": "#GATK_BaseRecalibrator.read_validation_stringency"
        },
        {
          "id": "#GATK_BaseRecalibrator.read_name"
        },
        {
          "id": "#GATK_BaseRecalibrator.read_index"
        },
        {
          "id": "#GATK_BaseRecalibrator.read_filter"
        },
        {
          "id": "#GATK_BaseRecalibrator.quiet"
        },
        {
          "id": "#GATK_BaseRecalibrator.quantizing_levels"
        },
        {
          "id": "#GATK_BaseRecalibrator.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_BaseRecalibrator.pl_filter_name"
        },
        {
          "id": "#GATK_BaseRecalibrator.mismatches_default_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.mismatches_context_size"
        },
        {
          "id": "#GATK_BaseRecalibrator.minimum_mapping_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.min_read_length"
        },
        {
          "id": "#GATK_BaseRecalibrator.memory_per_job"
        },
        {
          "id": "#GATK_BaseRecalibrator.memory_overhead_per_job"
        },
        {
          "id": "#GATK_BaseRecalibrator.maximum_mapping_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.maximum_cycle_value"
        },
        {
          "id": "#GATK_BaseRecalibrator.max_read_length"
        },
        {
          "id": "#GATK_BaseRecalibrator.max_fragment_length"
        },
        {
          "id": "#GATK_BaseRecalibrator.low_quality_tail"
        },
        {
          "id": "#GATK_BaseRecalibrator.library"
        },
        {
          "id": "#GATK_BaseRecalibrator.lenient"
        },
        {
          "source": [
            "#GATK_IndexFeatureFile_2.output_with_index",
            "#GATK_IndexFeatureFile.output_with_index",
            "#GATK_IndexFeatureFile_1.output_with_index"
          ],
          "id": "#GATK_BaseRecalibrator.known_sites"
        },
        {
          "id": "#GATK_BaseRecalibrator.keep_reverse"
        },
        {
          "id": "#GATK_BaseRecalibrator.keep_read_group"
        },
        {
          "id": "#GATK_BaseRecalibrator.intervals_string"
        },
        {
          "source": [
            "#intervals_file"
          ],
          "id": "#GATK_BaseRecalibrator.intervals_file"
        },
        {
          "id": "#GATK_BaseRecalibrator.interval_set_rule"
        },
        {
          "id": "#GATK_BaseRecalibrator.interval_merging_rule"
        },
        {
          "id": "#GATK_BaseRecalibrator.interval_exclusion_padding"
        },
        {
          "id": "#GATK_BaseRecalibrator.insertions_default_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.indels_context_size"
        },
        {
          "id": "#GATK_BaseRecalibrator.filter_too_short"
        },
        {
          "id": "#GATK_BaseRecalibrator.exclude_intervals_string"
        },
        {
          "id": "#GATK_BaseRecalibrator.exclude_intervals_file"
        },
        {
          "id": "#GATK_BaseRecalibrator.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#GATK_BaseRecalibrator.disable_tool_default_read_filters"
        },
        {
          "id": "#GATK_BaseRecalibrator.disable_sequence_dictionary_validation"
        },
        {
          "id": "#GATK_BaseRecalibrator.disable_read_filter"
        },
        {
          "id": "#GATK_BaseRecalibrator.disable_bam_index_caching"
        },
        {
          "id": "#GATK_BaseRecalibrator.deletions_default_quality"
        },
        {
          "id": "#GATK_BaseRecalibrator.default_base_qualities"
        },
        {
          "id": "#GATK_BaseRecalibrator.create_output_variant_md5"
        },
        {
          "id": "#GATK_BaseRecalibrator.create_output_variant_index"
        },
        {
          "id": "#GATK_BaseRecalibrator.create_output_bam_md5"
        },
        {
          "id": "#GATK_BaseRecalibrator.create_output_bam_index"
        },
        {
          "id": "#GATK_BaseRecalibrator.cloud_prefetch_buffer"
        },
        {
          "id": "#GATK_BaseRecalibrator.cloud_index_prefetch_buffer"
        },
        {
          "id": "#GATK_BaseRecalibrator.bqsr_baq_gap_open_penalty"
        },
        {
          "id": "#GATK_BaseRecalibrator.black_listed_lanes"
        },
        {
          "id": "#GATK_BaseRecalibrator.black_list"
        },
        {
          "id": "#GATK_BaseRecalibrator.binary_tag_name"
        },
        {
          "id": "#GATK_BaseRecalibrator.ambig_filter_frac"
        },
        {
          "id": "#GATK_BaseRecalibrator.ambig_filter_bases"
        },
        {
          "id": "#GATK_BaseRecalibrator.add_output_vcf_command_line"
        },
        {
          "id": "#GATK_BaseRecalibrator.add_output_sam_program_record"
        }
      ],
      "sbg:y": 360.23835659974196,
      "outputs": [
        {
          "id": "#GATK_BaseRecalibrator.recalibration_file"
        },
        {
          "id": "#GATK_BaseRecalibrator.performance_summary"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "First pass of the base quality score recalibration -- Generates recalibration table based on various covariates (such as read group, reported quality score, machine cycle, and nucleotide context).\n\n###**Overview**  \n\nThis walker is designed to work as the first pass in a two-pass processing step. It does a by-locus traversal operating only at sites that are not in dbSNP. We assume that all reference mismatches we see are therefore errors and indicative of poor base quality. This walker generates tables based on various user-specified covariates (such as read group, reported quality score, cycle, and context). Since there is a large amount of data one can then calculate an empirical probability of error given the particular covariates seen at this site, where p(error) = num mismatches / num observations. The output file is a table (of the several covariate values, num observations, num mismatches, empirical quality score).\n\nNote: ReadGroupCovariate and QualityScoreCovariate are required covariates and will be added for the user regardless of whether or not they were specified.\n\n###**Inputs**  \n\nThe input read data whose base quality scores need to be assessed.\nA database of known polymorphic sites to skip over.\n\n###**Output**  \n\nA GATK Report file with many tables:\n\n- The list of arguments\n- The quantized qualities table\n- The recalibration table by read group\n- The recalibration table by quality score\n- The recalibration table for all the optional covariates\n\nThe GATK Report is intended to be easy to read by humans or computers. Check out the documentation of the GATKReport to learn how to manipulate this table.\n\n###**Usage example**  \n\n     ./gatk-launch BaseRecalibrator \\ \n     \t -R reference.fasta \\ \n         -I input.bam \\   \n         --knownSites latest_dbsnp.vcf \\  \n         -O recalibration.table \n\n###**Additional Notes**\n\n- By default, the tool works only with VCF resource files. To use VCF.GZ resource files, the tool wrapper needs to be modified.\n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "GRP",
            "label": "BQSR Table",
            "outputBinding": {
              "glob": "*.recal_data.grp",
              "sbg:inheritMetadataFrom": "#reads"
            },
            "type": [
              "File"
            ],
            "description": "The output recalibration table file to create.",
            "id": "#recalibration_file"
          },
          {
            "outputBinding": {
              "glob": "*.txt"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Test",
            "label": "Performance Summary",
            "id": "#performance_summary"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296554,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "BaseRecalibrator"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-original-qualities"
            },
            "sbg:stageInput": null,
            "id": "#use_original_qualities",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use the base quality scores from the OQ tag Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Original Qualities"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "loadContents": true,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Reference sequence file Required.",
            "sbg:altPrefix": "",
            "label": "Reference"
          },
          {
            "sbg:fileTypes": "CRAM, BAM",
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input"
            },
            "sbg:stageInput": null,
            "description": "BAM/SAM/CRAM file containing reads This argument must be specified at least once. Required.",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "sbg:altPrefix": "",
            "label": "Reads",
            "id": "#reads"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "label": "Read Index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically.  This argument may be specified 0 or more times. Default value: null.",
            "id": "#read_index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "sbg:toolDefaultValue": "16",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quantizing-levels"
            },
            "id": "#quantizing_levels",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "number of distinct quality scores in the quantized output  Default value: 16.",
            "label": "Quantizing Levels"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--preserve-qscores-less-than"
            },
            "id": "#preserve_qscores_less_than",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Don't recalibrate bases with quality scores less than this threshold (with -bqsr) Default value: 6.",
            "sbg:altPrefix": "",
            "label": "Preserve Qscores Less Than"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mismatches-default-quality"
            },
            "id": "#mismatches_default_quality",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Default quality for the base mismatches covariate Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Mismatches Default Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--mismatches-context-size"
            },
            "id": "#mismatches_context_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the k-mer context to be used for base mismatches Default value: 2.",
            "sbg:altPrefix": "",
            "label": "Mismatches Context Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "type": [
              "null",
              "int"
            ],
            "sbg:stageInput": null,
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "type": [
              "null",
              "int"
            ],
            "sbg:stageInput": null,
            "description": "Memory Overhead Per Job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-cycle-value"
            },
            "id": "#maximum_cycle_value",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "The maximum cycle value permitted for the Cycle covariate Default value: 500.",
            "sbg:altPrefix": "",
            "label": "Maximum Cycle Value"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--low-quality-tail"
            },
            "id": "#low_quality_tail",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum quality for the bases in the tail of the reads to be considered Default value: 2.",
            "sbg:altPrefix": "",
            "label": "Low Quality Tail"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "id": "#lenient",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n\treturn ''\n}",
                "engine": "#cwl-js-engine"
              },
              "secondaryFiles": [
                ".idx"
              ]
            },
            "sbg:fileTypes": "TXT, BED, VCF",
            "id": "#known_sites",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "One or more databases of known polymorphic sites used to exclude regions around known polymorphisms from analysis. This argument must be specified at least once. Required.",
            "sbg:altPrefix": "-knownSites",
            "label": "Known Sites"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n    if ($job.inputs.reference && $job.inputs.intervals_string){\n        fasta = $job.inputs.reference.contents\n        interval = $job.inputs.intervals_string\n        // fasta - UCSC format\n        if (fasta.indexOf(\">chr\") != -1){\n            // INTERVAL - UCSC format, all w/ chr\n            if (interval.indexOf(\"chr\") != -1){\n                return interval\n            }// if (interval.indexOf(\"chr\") == -1)\n            // interval - 1000G format, convert to UCSC\n            else{\n                if (Number(interval) || interval == \"X\" || interval == \"Y\"){\n                    return \"chr\".concat(interval)\n                }// if (Number(interval)|| interval == \"X\" || interval == \"Y\")\n                else{\n                    if (interval == \"MT\"){\n                        return \"chrM\"\n                    }//if (interval == \"MT\")\n                    else{\n                        if(Number(interval.substr(2,6))<211){\n                            n = Number(interval.substr(2,6)) - 190;\n                            s = \"chr\";\n                            s = s.concat(n.toString());\n                            s = s.concat(\"_gl\");\n                            s = s.concat(interval.substr(2,6));\n                            s = s.concat(\"_random\");\n                            return s\n                        }// if(Number(interval.substr(2,interval.length-2))<211)\n                        else{\n                            if(Number(interval.substr(2,6))<250) {\n                                s = \"chrUn_gl\";\n                                s = s.concat(interval.substr(2,6));\n                                return s\n                            }//if(Number(interval.substr(2,interval.length-2))<250)\n                            else {\n                                return interval\n                            }//if(Number(interval.substr(2,interval.length-2))<250) - else\n                        }// if(Number(interval.substr(2,interval.length-2))<211) - else\n                    }//if (interval == \"MT\") - else\n                }//if (Number(interval)|| interval == \"X\" || interval == \"Y\") - else\n            }//if (interval.indexOf(\"chr\") == -1) - else\n        }//if (fasta.indexOf(\">chr\") == -1)\n        // fasta - 1000G format\n        else{\n            //interval - USCS format, all w/ chr, convert to 1000G\n            if(interval.indexOf(\"chr\") != -1){\n                if(Number(interval.substr(3,2)) && interval.length<6 || interval == \"chrX\" || interval == \"chrY\"){\n                    return interval.substr(3,2)\n                }//if(Number(interval.substr(3,interval.length)) != NaN || interval == \"chrX\" || bsqr == \"chrY\")\n                else{\n                    if (interval == \"chrM\") {\n                        return \"MT\"\n                    }//if (interval == \"chrM\")\n                    else{\n                        s = \"GL\";\n                        s = s.concat(interval.substr(8,6));\n                        s = s.concat(\".1\");\n                        return s\n                    }//if (interval == \"chrM\") - else\n                }//if(Number(interval.substr(3,interval.length)) != NaN || interval == \"chrX\" || bsqr == \"chrY\") - else\n            }//if($job.inputs.interval.indexOf(\"chr\") == -1)\n            // interval - 1000G format\n            else{\n                return interval\n            }//(interval.indexOf(\"chr\") == -1) - else\n        }//if (fasta.indexOf(\">chr\") == -1) - else\n    }//if ($job.inputs.fasta && $job.inputs.interval)\n}\n",
                "engine": "#cwl-js-engine"
              },
              "separate": true,
              "prefix": "--intervals"
            },
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-padding"
            },
            "sbg:stageInput": null,
            "id": "#interval_merging_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL, OVERLAPPING_ONLY}",
            "label": "Interval merging rule"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--insertions-default-quality"
            },
            "id": "#insertions_default_quality",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Default quality for the base insertions covariate Default value: 45.",
            "sbg:altPrefix": "",
            "label": "Insertions Default Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--indels-context-size"
            },
            "id": "#indels_context_size",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the k-mer context to be used for base insertions and deletions Default value: 3.",
            "sbg:altPrefix": "",
            "label": "Indels Context Size"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:stageInput": null,
            "id": "#exclude_intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#exclude_intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "id": "#dont_require_soft_clips_both_ends",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "id": "#disable_tool_default_read_filters",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "id": "#disable_sequence_dictionary_validation",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "label": "Disable Read Filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more                               times. Default value: null. Possible Values: {MappedReadFilter,                               MappingQualityAvailableReadFilter, MappingQualityNotZeroReadFilter,                               NotDuplicateReadFilter, NotSecondaryAlignmentReadFilter,                               PassesVendorQualityCheckReadFilter, WellformedReadFilter}",
            "id": "#disable_read_filter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "id": "#disable_bam_index_caching",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--deletions-default-quality"
            },
            "id": "#deletions_default_quality",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Default quality for the base deletions covariate Default value: 45.",
            "sbg:altPrefix": "",
            "label": "Deletions Default Quality"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--default-base-qualities"
            },
            "id": "#default_base_qualities",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Assign a default base quality Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Default Base Qualities"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_variant_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_md5",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-index"
            },
            "sbg:stageInput": null,
            "id": "#create_output_bam_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Create Output Bam Index"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--bqsr-baq-gap-open-penalty"
            },
            "id": "#bqsr_baq_gap_open_penalty",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "BQSR BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets Default value: 40.0.",
            "sbg:altPrefix": "",
            "label": "Bqsr Baq Gap Open Penalty"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--binary-tag-name"
            },
            "id": "#binary_tag_name",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "The binary tag covariate name if using it Default value: null.",
            "sbg:altPrefix": "",
            "label": "Binary Tag Name"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of non-regular bases (e.g. N) above which to filter Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "sbg:toolDefaultValue": "TRUE",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  return ''\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": false,
              "prefix": "--add-output-vcf-command-line"
            },
            "sbg:stageInput": null,
            "description": "If true, adds a command line header line to created VCF file. Default value: true.",
            "type": [
              "null",
              "boolean"
            ],
            "id": "#add_output_vcf_command_line",
            "label": "Adds a command line header line to created VCF file"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "id": "#add_output_sam_program_record",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record"
          }
        ],
        "y": 360.23835659974196,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 22,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 22,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "appUrl": "/u/vladimirk/gatk-3-7/apps/#vladimirk/gatk-3-7/gatk-3-7-baserecalibrator/5",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx4M\" BaseRecalibrator --input /path/to/reads-1.ext --input /path/to/reads-2.ext --reference /path/to/reference.ext  --output reads-1.recal_data.grp  --create-output-bam-index  --known-sites /path/to/known_sites-1.ext",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 998.8099151774204,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return '--output ' + read_namebase + '.recal_data.grp'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": ""
          },
          {
            "valueFrom": "--create-output-bam-index",
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  known_sites = [].concat($job.inputs.known_sites)\n\n  cmd = []\n\n  for (i = 0; i < known_sites.length; i++) {\n    cmd.push('--known-sites', known_sites[i].path)\n  }\n\n  return cmd.join(' ')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/72",
        "label": "GATK BaseRecalibrator",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-baserecalibrator/22",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296554,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/16",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500640330,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500887417,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1502111498,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1502718029,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1503064609,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/31",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1503064951,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/32",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1503405166,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/34",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1504105701,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/42",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1504272902,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/44",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1504275139,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/45",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1504280144,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/46",
            "sbg:modifiedBy": "vladimirk",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1504789585,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/48",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1507625019,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/49",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1511522861,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/50",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          },
          {
            "sbg:modifiedOn": 1513786582,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/51",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 15
          },
          {
            "sbg:modifiedOn": 1515587884,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/62",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 16
          },
          {
            "sbg:modifiedOn": 1515590561,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/65",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 17
          },
          {
            "sbg:modifiedOn": 1515594349,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/66",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 18
          },
          {
            "sbg:modifiedOn": 1515599103,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/69",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 19
          },
          {
            "sbg:modifiedOn": 1519396104,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/70",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 20
          },
          {
            "sbg:modifiedOn": 1519648152,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/71",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 21
          },
          {
            "sbg:modifiedOn": 1520946168,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/72",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 22
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic",
          "vladimirk"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946168,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/GATK_BaseRecalibrator/72",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-baserecalibrator/22",
        "sbg:job": {
          "inputs": {
            "ambigFilterBases": 2,
            "known_sites": [
              {
                "class": "File",
                "path": "/path/to/known_sites-1.ext",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "use_jdk_deflater": true,
            "keepReverse": true,
            "addOutputSAMProgramRecord": true,
            "interval_merging_rule": "interval_merging_rule-string-value",
            "use_jdk_inflater": true,
            "disableBamIndexCaching": true,
            "reference": {
              "class": "File",
              "path": "/path/to/reference.ext",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "size": 0
            },
            "exclude_intervals_file": {
              "class": "File",
              "path": "/path/to/exclude_intervals_file.ext",
              "secondaryFiles": [],
              "size": 0
            },
            "memory_per_job": 4,
            "disableSequenceDictionaryValidation": true,
            "useOriginalQualities": true,
            "intervals_string": "intervals_string-string-value",
            "createOutputVariantIndex": 5.081587263149359,
            "no_cmdline_in_header": true,
            "reads": [
              {
                "class": "File",
                "path": "/path/to/reads-1.ext",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/reads-2.ext",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "createOutputVariantMD5": 0.6317428673703886,
            "disableToolDefaultReadFilters": true,
            "dontRequireSoftClipsBothEnds": true,
            "QUIET": true,
            "lenient": true,
            "add_output_vcf_command_line": true,
            "exclude_intervals_string": "exclude_intervals_string-string-value",
            "cpu_per_job": 2,
            "secondsBetweenProgressUpdates": 1,
            "createOutputBamIndex": 6.802465483383213,
            "threads_per_job": 2,
            "createOutputBamMD5": 1.7560880637573613,
            "memory_overhead_per_job": 1,
            "intervals_file": {
              "class": "File",
              "path": "/path/to/intervals_file.ext",
              "secondaryFiles": [],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 5
          }
        }
      },
      "sbg:x": 998.8099151774204,
      "id": "#GATK_BaseRecalibrator"
    },
    {
      "inputs": [
        {
          "id": "#GATK_IndexFeatureFile_2.verbosity"
        },
        {
          "id": "#GATK_IndexFeatureFile_2.use_jdk_inflater"
        },
        {
          "id": "#GATK_IndexFeatureFile_2.use_jdk_deflater"
        },
        {
          "id": "#GATK_IndexFeatureFile_2.quiet"
        },
        {
          "id": "#GATK_IndexFeatureFile_2.memory_per_job"
        },
        {
          "id": "#GATK_IndexFeatureFile_2.memory_overhead_per_job"
        },
        {
          "source": [
            "#indels_1000g_phase1"
          ],
          "id": "#GATK_IndexFeatureFile_2.feature_file"
        }
      ],
      "sbg:y": 787.5645454551587,
      "outputs": [
        {
          "id": "#GATK_IndexFeatureFile_2.output_with_index"
        },
        {
          "id": "#GATK_IndexFeatureFile_2.index"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
        "outputs": [
          {
            "sbg:fileTypes": "VCF,BED,RECAL",
            "label": "Output file with index",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  \treturn $job.inputs.feature_file.path.split('/').slice(-1)[0]\n}",
                "engine": "#cwl-js-engine"
              },
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#feature_file"
            },
            "type": [
              "File"
            ],
            "description": "Output file with index.",
            "id": "#output_with_index"
          },
          {
            "sbg:fileTypes": "IDX",
            "label": "Index file",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  \toutput_name = $job.inputs.feature_file.path.split('/').slice(-1)[0]\n    \n    if (output_name.endsWith('.gz')) {\n    \treturn output_name + '.tbi'\n    }\n  \telse {\n     \treturn output_name + '.idx'\n  \t}  \n}",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Index file",
            "id": "#index"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296617,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "IndexFeatureFile"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--feature-file"
            },
            "sbg:stageInput": "link",
            "id": "#feature_file",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format Required.",
            "sbg:altPrefix": "",
            "label": "Feature File"
          }
        ],
        "y": 787.5645454551587,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 14,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 14,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" IndexFeatureFile --feature_file /path/to/feature_file.vcf.gz --output feature_file.vcf.gz.tbi",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 731.0259079546089,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  \toutput_name = $job.inputs.feature_file.path.split('/').slice(-1)[0]\n    \n    if (output_name.endsWith('.gz')) {\n    \treturn output_name + '.tbi'\n    }\n  \telse {\n     \treturn output_name + '.idx'\n  \t}  \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
        "label": "GATK IndexFeatureFile",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-index-feature-file/14",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296617,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500367649,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500640357,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1500887430,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405190,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105732,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1504108418,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1504109513,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1504273463,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1504275173,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1509714097,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1511522886,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/30",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1515587930,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/40",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1515590594,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/42",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1520946086,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946086,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/14",
        "sbg:job": {
          "inputs": {
            "use_jdk_deflater": false,
            "use_jdk_inflater": false,
            "memory_overhead_per_job": 0,
            "feature_file": {
              "class": "File",
              "path": "/path/to/feature_file.vcf.gz",
              "secondaryFiles": [],
              "size": 0
            },
            "QUIET": false,
            "memory_per_job": 2048
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 731.0259079546089,
      "id": "#GATK_IndexFeatureFile_2"
    },
    {
      "inputs": [
        {
          "id": "#GATK_IndexFeatureFile_1.verbosity"
        },
        {
          "id": "#GATK_IndexFeatureFile_1.use_jdk_inflater"
        },
        {
          "id": "#GATK_IndexFeatureFile_1.use_jdk_deflater"
        },
        {
          "id": "#GATK_IndexFeatureFile_1.quiet"
        },
        {
          "id": "#GATK_IndexFeatureFile_1.memory_per_job"
        },
        {
          "id": "#GATK_IndexFeatureFile_1.memory_overhead_per_job"
        },
        {
          "source": [
            "#mills"
          ],
          "id": "#GATK_IndexFeatureFile_1.feature_file"
        }
      ],
      "sbg:y": 962.3083878480738,
      "outputs": [
        {
          "id": "#GATK_IndexFeatureFile_1.output_with_index"
        },
        {
          "id": "#GATK_IndexFeatureFile_1.index"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
        "outputs": [
          {
            "sbg:fileTypes": "VCF,BED,RECAL",
            "label": "Output file with index",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  \treturn $job.inputs.feature_file.path.split('/').slice(-1)[0]\n}",
                "engine": "#cwl-js-engine"
              },
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#feature_file"
            },
            "type": [
              "File"
            ],
            "description": "Output file with index.",
            "id": "#output_with_index"
          },
          {
            "sbg:fileTypes": "IDX",
            "label": "Index file",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  \toutput_name = $job.inputs.feature_file.path.split('/').slice(-1)[0]\n    \n    if (output_name.endsWith('.gz')) {\n    \treturn output_name + '.tbi'\n    }\n  \telse {\n     \treturn output_name + '.idx'\n  \t}  \n}",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Index file",
            "id": "#index"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296617,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "IndexFeatureFile"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--feature-file"
            },
            "sbg:stageInput": "link",
            "id": "#feature_file",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format Required.",
            "sbg:altPrefix": "",
            "label": "Feature File"
          }
        ],
        "y": 962.3083878480738,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 14,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 14,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" IndexFeatureFile --feature_file /path/to/feature_file.vcf.gz --output feature_file.vcf.gz.tbi",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 737.3081347667422,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  \toutput_name = $job.inputs.feature_file.path.split('/').slice(-1)[0]\n    \n    if (output_name.endsWith('.gz')) {\n    \treturn output_name + '.tbi'\n    }\n  \telse {\n     \treturn output_name + '.idx'\n  \t}  \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
        "label": "GATK IndexFeatureFile",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-index-feature-file/14",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296617,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500367649,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500640357,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1500887430,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405190,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105732,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1504108418,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1504109513,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1504273463,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1504275173,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1509714097,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1511522886,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/30",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1515587930,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/40",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1515590594,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/42",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1520946086,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946086,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/14",
        "sbg:job": {
          "inputs": {
            "use_jdk_deflater": false,
            "use_jdk_inflater": false,
            "memory_overhead_per_job": 0,
            "feature_file": {
              "class": "File",
              "path": "/path/to/feature_file.vcf.gz",
              "secondaryFiles": [],
              "size": 0
            },
            "QUIET": false,
            "memory_per_job": 2048
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 737.3081347667422,
      "id": "#GATK_IndexFeatureFile_1"
    },
    {
      "inputs": [
        {
          "id": "#GATK_IndexFeatureFile.verbosity"
        },
        {
          "id": "#GATK_IndexFeatureFile.use_jdk_inflater"
        },
        {
          "id": "#GATK_IndexFeatureFile.use_jdk_deflater"
        },
        {
          "id": "#GATK_IndexFeatureFile.quiet"
        },
        {
          "id": "#GATK_IndexFeatureFile.memory_per_job"
        },
        {
          "id": "#GATK_IndexFeatureFile.memory_overhead_per_job"
        },
        {
          "source": [
            "#dbsnp"
          ],
          "id": "#GATK_IndexFeatureFile.feature_file"
        }
      ],
      "sbg:y": 1128.3337852690124,
      "outputs": [
        {
          "id": "#GATK_IndexFeatureFile.output_with_index"
        },
        {
          "id": "#GATK_IndexFeatureFile.index"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Creates indices for Feature-containing files, such as VCF and BED files.\n\n###**Overview** \nCreates indices for Feature-containing files, such as VCF and BED files.\n\n###**Inputs**  \nA feature file to be indexed.  \n\n###**Outputs**  \nAn index file.\n\n###**Usage example**\n\n    java -Xmx4g -jar gatk.jar \\  \n         IndexFeatureFile \\  \n         --feature_file feature_file.vcf \\ \n         --output feature_file.vcf.idx",
        "outputs": [
          {
            "sbg:fileTypes": "VCF,BED,RECAL",
            "label": "Output file with index",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  \treturn $job.inputs.feature_file.path.split('/').slice(-1)[0]\n}",
                "engine": "#cwl-js-engine"
              },
              "secondaryFiles": [
                ".idx"
              ],
              "sbg:inheritMetadataFrom": "#feature_file"
            },
            "type": [
              "File"
            ],
            "description": "Output file with index.",
            "id": "#output_with_index"
          },
          {
            "sbg:fileTypes": "IDX",
            "label": "Index file",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  \toutput_name = $job.inputs.feature_file.path.split('/').slice(-1)[0]\n    \n    if (output_name.endsWith('.gz')) {\n    \treturn output_name + '.tbi'\n    }\n  \telse {\n     \treturn output_name + '.idx'\n  \t}  \n}",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Index file",
            "id": "#index"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296617,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "IndexFeatureFile"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Quiet"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job",
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job",
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--feature-file"
            },
            "sbg:stageInput": "link",
            "id": "#feature_file",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Feature file (eg., VCF or BED file) to index. Must be in a tribble-supported format Required.",
            "sbg:altPrefix": "",
            "label": "Feature File"
          }
        ],
        "y": 1128.3337852690124,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 14,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 14,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk-launch --javaOptions \"-Xmx2048M\" IndexFeatureFile --feature_file /path/to/feature_file.vcf.gz --output feature_file.vcf.gz.tbi",
        "sbg:modifiedBy": "teodora.aleksic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "3c3b8e0ed4e5",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "stdout": "",
        "x": 737.0517058525492,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  \toutput_name = $job.inputs.feature_file.path.split('/').slice(-1)[0]\n    \n    if (output_name.endsWith('.gz')) {\n    \treturn output_name + '.tbi'\n    }\n  \telse {\n     \treturn output_name + '.idx'\n  \t}  \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
        "label": "GATK IndexFeatureFile",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-index-feature-file/14",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedOn": 1500296617,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/16",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 0
          },
          {
            "sbg:modifiedOn": 1500367649,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/17",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 1
          },
          {
            "sbg:modifiedOn": 1500640357,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/18",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 2
          },
          {
            "sbg:modifiedOn": 1500887430,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/20",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 3
          },
          {
            "sbg:modifiedOn": 1503405190,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/21",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 4
          },
          {
            "sbg:modifiedOn": 1504105732,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/22",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 5
          },
          {
            "sbg:modifiedOn": 1504108418,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/23",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 6
          },
          {
            "sbg:modifiedOn": 1504109513,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/24",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 7
          },
          {
            "sbg:modifiedOn": 1504273463,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/26",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 8
          },
          {
            "sbg:modifiedOn": 1504275173,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/27",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 9
          },
          {
            "sbg:modifiedOn": 1509714097,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/29",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 10
          },
          {
            "sbg:modifiedOn": 1511522886,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/30",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 11
          },
          {
            "sbg:modifiedOn": 1515587930,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/40",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 12
          },
          {
            "sbg:modifiedOn": 1515590594,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/42",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 13
          },
          {
            "sbg:modifiedOn": 1520946086,
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revision": 14
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1520946086,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-index-feature-file/43",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-4-0-index-feature-file/14",
        "sbg:job": {
          "inputs": {
            "use_jdk_deflater": false,
            "use_jdk_inflater": false,
            "memory_overhead_per_job": 0,
            "feature_file": {
              "class": "File",
              "path": "/path/to/feature_file.vcf.gz",
              "secondaryFiles": [],
              "size": 0
            },
            "QUIET": false,
            "memory_per_job": 2048
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 737.0517058525492,
      "id": "#GATK_IndexFeatureFile"
    },
    {
      "inputs": [
        {
          "default": "File per chr with alt contig in a single file",
          "id": "#SBG_Prepare_Intervals.split_mode"
        },
        {
          "id": "#SBG_Prepare_Intervals.format"
        },
        {
          "id": "#SBG_Prepare_Intervals.fai_file"
        },
        {
          "source": [
            "#intervals_file"
          ],
          "id": "#SBG_Prepare_Intervals.bed_file"
        }
      ],
      "sbg:y": 658.4616348529505,
      "outputs": [
        {
          "id": "#SBG_Prepare_Intervals.str_arr"
        },
        {
          "id": "#SBG_Prepare_Intervals.names"
        },
        {
          "id": "#SBG_Prepare_Intervals.intervals"
        }
      ],
      "run": {
        "sbg:toolkitVersion": "1.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{ \n  if ($job.inputs.bed_file){\n    glob = $job.inputs.bed_file.path\n\tglob = glob.split('/').slice(-1)[0]\n  }\n  else if($job.inputs.fai_file){\n    glob = $job.inputs.fai_file.path\n\tglob = glob.split('/').slice(-1)[0].split('.').slice(0, -1).join('.') + '.bed'\n  }\n\n  return glob\n}",
                "engine": "#cwl-js-engine"
              },
              "loadContents": true,
              "outputEval": {
                "class": "Expression",
                "script": "{ rows = $self[0].contents\n  if (rows[rows.length -1] == '\\n'){\n    rows = rows.split(/\\r?\\n/).slice(0,-1);\n  }\n  else {\n    rows = rows.split(/\\r?\\n/);\n  }\n  out_list = []\n  for (i=0; i<rows.length; i++)\n  {\n    row = rows[i];\n    chromosome = row.split(\"\\t\")[0];\n    start = row.split(\"\\t\")[1];\n    end = row.split(\"\\t\")[2];\n    if(typeof start !== \"undefined\"){\n    \tinterval = chromosome.concat(\":\", start, \"-\", end);\n    }\n    else{\n    \tinterval = chromosome\n    }    \n    out_list.push(interval);\n  }\n  return out_list;\n  \t\n}\n",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              {
                "items": "string",
                "type": "array"
              }
            ],
            "description": "Outputs BED content as strings.",
            "label": "String output",
            "id": "#str_arr"
          },
          {
            "outputBinding": {
              "glob": "Intervals/names.txt",
              "loadContents": true,
              "outputEval": {
                "class": "Expression",
                "script": "{   \n content =  $self[0].contents.replace(/\\0/g, '')\n content = content.replace('[','')\n content = content.replace(']','')\n content = content.replace(/\\'/g, \"\")\n content = content.replace(/\\s/g, '')\n content_arr = content.split(\",\")\n\n return content_arr\n \n\n} ",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              "string"
            ],
            "description": "File containing the names of created files.",
            "label": "Output file names",
            "id": "#names"
          },
          {
            "sbg:fileTypes": "BED",
            "label": "Intervals",
            "outputBinding": {
              "glob": "Intervals/*.bed",
              "sbg:metadata": {
                "sbg_scatter": "true"
              }
            },
            "type": [
              "null",
              {
                "items": "File",
                "type": "array",
                "name": "intervals"
              }
            ],
            "description": "Array of BED files genereted as per selected Split Mode.",
            "id": "#intervals"
          }
        ],
        "label": "SBG Prepare Intervals",
        "successCodes": [],
        "sbg:createdOn": 1473083821,
        "requirements": [
          {
            "class": "CreateFileRequirement",
            "fileDef": [
              {
                "fileContent": "\"\"\"\nUsage:\n    sbg_prepare_intervals.py [options] [--fastq FILE --bed FILE --mode INT --format STR --others STR]\n\nDescription:\n    Purpose of this tool is to split BED file into files based on the selected mode.\n    If bed file is not provided fai(fasta index) file is converted to bed.\n\nOptions:\n\n    -h, --help            Show this message.\n\n    -v, -V, --version     Tool version.\n\n    -b, -B, --bed FILE    Path to input bed file.\n\n    --fai FILE            Path to input fai file.\n\n    --format STR          Output file format.\n\n    --mode INT            Select input mode.\n\n\"\"\"\n\n\nimport os\nimport sys\nimport glob\nimport shutil\nfrom docopt import docopt\n\ndefault_extension = '.bed'  # for output files\n\n\ndef create_file(contents, contig_name, extension=default_extension):\n    \"\"\"function for creating a file for all intervals in a contig\"\"\"\n\n    new_file = open(\"Intervals/\" + contig_name + extension, \"w\")\n    new_file.write(contents)\n    new_file.close()\n\n\ndef add_to_file(line, name, extension=default_extension):\n    \"\"\"function for adding a line to a file\"\"\"\n\n    new_file = open(\"Intervals/\" + name + extension, \"a\")\n    if lformat == formats[1]:\n        sep = line.split(\"\\t\")\n        line = sep[0] + \":\" + sep[1] + \"-\" + sep[2]\n    new_file.write(line)\n    new_file.close()\n\n\ndef fai2bed(fai):\n    \"\"\"function to create a bed file from fai file\"\"\"\n\n    region_thr = 10000000  # threshold used to determine starting point accounting for telomeres in chromosomes\n    basename = fai[0:fai.rfind(\".\")]\n    with open(fai, \"r\") as ins:\n        new_array = []\n        for line in ins:\n            len_reg = int(line.split()[1])\n            cutoff = 0 if (\n            len_reg < region_thr) else 0  # sd\\\\telomeres or start with 1\n            new_line = line.split()[0] + '\\t' + str(cutoff) + '\\t' + str(\n                len_reg + cutoff)\n            new_array.append(new_line)\n    new_file = open(basename + \".bed\", \"w\")\n    new_file.write(\"\\n\".join(new_array))\n    return basename + \".bed\"\n\n\ndef chr_intervals(no_of_chrms=23):\n    \"\"\"returns all possible designations for chromosome intervals\"\"\"\n\n    chrms = []\n    for i in range(1, no_of_chrms):\n        chrms.append(\"chr\" + str(i))\n        chrms.append(str(i))\n    chrms.extend([\"x\", \"y\", \"chrx\", \"chry\"])\n    return chrms\n\n\ndef mode_1(orig_file):\n    \"\"\"mode 1: every line is a new file\"\"\"\n\n    with open(orig_file, \"r\") as ins:\n        prev = \"\"\n        counter = 0\n        names = []\n        for line in ins:\n            if is_header(line):\n                continue\n            if line.split()[0] == prev:\n                counter += 1\n            else:\n                counter = 0\n            suffix = \"\" if (counter == 0) else \"_\" + str(counter)\n            create_file(line, line.split()[0] + suffix)\n            names.append(line.split()[0] + suffix)\n            prev = line.split()[0]\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_2(orig_file, others_name):\n    \"\"\"mode 2: separate file is created for each chromosome, and one file is created for other intervals\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, 'r') as ins:\n        for line in ins:\n            if is_header(line):\n                continue\n            name = line.split()[0]\n            if name.lower() in chrms:\n                name = name\n            else:\n                name = others_name\n            try:\n                add_to_file(line, name)\n                if not name in names:\n                    names.append(name)\n            except:\n                raise Exception(\n                    \"Couldn't create or write in the file in mode 2\")\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_3(orig_file, extension=default_extension):\n    \"\"\"mode 3: input file is staged to output\"\"\"\n\n    orig_name = orig_file.split(\"/\")[len(orig_file.split(\"/\")) - 1]\n    output_file = r\"./Intervals/\" + orig_name[\n                                    0:orig_name.rfind('.')] + extension\n\n    shutil.copyfile(orig_file, output_file)\n\n    names = [orig_name[0:orig_name.rfind('.')]]\n    create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_4(orig_file, others_name):\n    \"\"\"mode 4: every interval in chromosomes is in a separate file. Other intervals are in a single file\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, \"r\") as ins:\n        counter = {}\n        for line in ins:\n            if line.startswith('@'):\n                continue\n            name = line.split()[0].lower()\n            if name in chrms:\n                if name in counter:\n                    counter[name] += 1\n                else:\n                    counter[name] = 0\n                suffix = \"\" if (counter[name] == 0) else \"_\" + str(counter[name])\n                create_file(line, name + suffix)\n                names.append(name + suffix)\n                prev = name\n            else:\n                name = others_name\n                if not name in names:\n                    names.append(name)\n                try:\n                    add_to_file(line, name)\n                except:\n                    raise Exception(\n                        \"Couldn't create or write in the file in mode 4\")\n\n    create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef prepare_intervals():\n    # reading input files and split mode from command line\n    args = docopt(__doc__, version='1.0')\n\n    bed_file = args['--bed']\n    fai_file = args['--fai']\n    split_mode = int(args['--mode'])\n\n    # define file name for non-chromosomal contigs\n    others_name = 'others'\n\n    global formats, lformat\n    formats = [\"chr start end\", \"chr:start-end\"]\n    lformat = args['--format']\n    if lformat == None:\n        lformat = formats[0]\n    if not lformat in formats:\n        raise Exception('Unsuported interval format')\n\n    if not os.path.exists(r\"./Intervals\"):\n        os.mkdir(r\"./Intervals\")\n    else:\n        files = glob.glob(r\"./Intervals/*\")\n        for f in files:\n            os.remove(f)\n\n    # create variable input_file taking bed_file as priority\n    if bed_file:\n        input_file = bed_file\n    elif fai_file:\n        input_file = fai2bed(fai_file)\n    else:\n        raise Exception('No input files are provided')\n\n    # calling adequate split mode function\n    if split_mode == 1:\n        mode_1(input_file)\n    elif split_mode == 2:\n        mode_2(input_file, others_name)\n    elif split_mode == 3:\n        if bed_file:\n            mode_3(input_file)\n        else:\n            raise Exception('Bed file is required for mode 3')\n    elif split_mode == 4:\n        mode_4(input_file, others_name)\n    else:\n        raise Exception('Split mode value is not set')\n\n\ndef is_header(line):\n    x = line.split('\\t')\n    try:\n        int(x[1])\n        int(x[2])\n        header = False\n    except:\n        sys.stderr.write('Line is skipped: {}'.format(line))\n        header = True\n    return header\n\n\nif __name__ == '__main__':\n    prepare_intervals()",
                "filename": "sbg_prepare_intervals.py"
              }
            ]
          },
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "python",
          "sbg_prepare_intervals.py"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "sbg:MemRequirement",
            "value": 1000
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/bogdang/sbg_prepare_intervals:1.0"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          }
        ],
        "sbg:project": "bix-demo/sbgtools-demo",
        "stdout": "",
        "x": 985.0001612107014,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\t\n  if ($job.inputs.format)\n  \treturn \"--format \" + \"\\\"\" + $job.inputs.format + \"\\\"\"\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:latestRevision": 15,
        "y": 658.4616348529505,
        "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:\n\n1. File per interval - The tool creates one interval file per line of the input BED(FAI) file.\nEach interval file contains a single line (one of the lines of BED(FAI) input file).\n\n2. File per chr with alt contig in a single file - For each contig(chromosome) a single file\nis created containing all the intervals corresponding to it .\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n3. Output original BED - BED file is required for execution of this mode. If mode 3 is applied input is passed to the output.\n\n4. File per interval with alt contig in a single file - For each chromosome a single file is created for each interval.\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n##### Common issues: \nDo not use option 1 (File per interval) with exome BED or a BED with a lot of GL contigs, as it will create a large number of files.",
        "sbg:projectName": "SBGTools - Demo New",
        "inputs": [
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 3,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n  mode = $job.inputs.split_mode\n  switch (mode) \n  {\n    case \"File per interval\": \n      return 1\n    case \"File per chr with alt contig in a single file\": \n      return 2\n    case \"Output original BED\": \n      return 3\n    case \"File per interval with alt contig in a single file\": \n      return 4  \n  }\n  return 3\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true,
              "prefix": "--mode"
            },
            "label": "Split mode",
            "sbg:category": "Input",
            "type": [
              {
                "type": "enum",
                "symbols": [
                  "File per interval",
                  "File per chr with alt contig in a single file",
                  "Output original BED",
                  "File per interval with alt contig in a single file"
                ],
                "name": "split_mode"
              }
            ],
            "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:  1. File per interval - The tool creates one interval file per line of the input BED(FAI) file. Each interval file contains a single line (one of the lines of BED(FAI) input file).  2. File per chr with alt contig in a single file - For each contig(chromosome) a single file is created containing all the intervals corresponding to it . All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\").  3. Output original BED - BED file is required for execution of this mode. If mode 3 is applied input is passed to the output.  4. File per interval with alt contig in a single file - For each chromosome a single file is created for each interval. All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\"). NOTE: Do not use option 1 (File per interval) with exome BED or a BED with a lot of GL contigs, as it will create a large number of files.",
            "id": "#split_mode"
          },
          {
            "sbg:category": "Input",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "chr start end",
                  "chr:start-end"
                ],
                "name": "format"
              }
            ],
            "label": "Interval format",
            "description": "Format of the intervals in the generated files.",
            "id": "#format"
          },
          {
            "sbg:fileTypes": "FAI",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 2,
              "separate": true,
              "prefix": "--fai"
            },
            "sbg:stageInput": "link",
            "description": "FAI file is converted to BED format if BED file is not provided.",
            "required": false,
            "sbg:category": "File Input",
            "type": [
              "null",
              "File"
            ],
            "id": "#fai_file",
            "label": "Input FAI file"
          },
          {
            "sbg:fileTypes": "BED",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 1,
              "separate": true,
              "prefix": "--bed"
            },
            "sbg:stageInput": "link",
            "description": "Input BED file containing intervals. Required for modes 3 and 4.",
            "required": false,
            "sbg:category": "File Input",
            "type": [
              "null",
              "File"
            ],
            "id": "#bed_file",
            "label": "Input BED file"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "medjo",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:id": "h-618c514d/h-d8806994/h-ec911b59/0",
        "sbg:toolkit": "SBGTools",
        "sbg:revision": 15,
        "sbg:categories": [
          "Converters"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-prepare-intervals/15",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/75",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1473083821
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/76",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1473084447
          },
          {
            "sbg:modifiedBy": "medjo",
            "sbg:revisionNotes": null,
            "sbg:revision": 2,
            "sbg:modifiedOn": 1473928444
          },
          {
            "sbg:modifiedBy": "medjo",
            "sbg:revisionNotes": "split_mode set to required",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1474970272
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": "Fixed Toolkit name.",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1478525360
          },
          {
            "sbg:modifiedBy": "medjo",
            "sbg:revisionNotes": "Description changed",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1491904483
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Common issues added",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1491905063
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Change the Javascript for adding the format argument into the command line",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1500382475
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Removed lower() from mode_2",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1503074487
          },
          {
            "sbg:modifiedBy": "medjo",
            "sbg:revisionNotes": "String output added",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1503398050
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Glob fix for fai input",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1504515792
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Removed sbg:format for string output from json",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1508491917
          },
          {
            "sbg:modifiedBy": "medjo",
            "sbg:revisionNotes": "Bug fixed - if bed file is not ended with \\n tool will work as expected.",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1512057641
          },
          {
            "sbg:modifiedBy": "bogdang",
            "sbg:revisionNotes": "Ignore header lines",
            "sbg:revision": 13,
            "sbg:modifiedOn": 1528202923
          },
          {
            "sbg:modifiedBy": "luka.topalovic",
            "sbg:revisionNotes": "Back to revision 12",
            "sbg:revision": 14,
            "sbg:modifiedOn": 1529595373
          },
          {
            "sbg:modifiedBy": "medjo",
            "sbg:revisionNotes": "check for header",
            "sbg:revision": 15,
            "sbg:modifiedOn": 1530193387
          }
        ],
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "sbg:license": "Apache License 2.0",
        "sbg:createdBy": "vladimirk",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "python sbg_prepare_intervals.py  --format \"chr start end\" --mode 2",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1530193387,
        "sbg:revisionNotes": "check for header",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "bix-demo",
          "vladimirk",
          "medjo",
          "nikola_jovanovic",
          "teodora.aleksic",
          "luka.topalovic",
          "bogdang"
        ],
        "sbg:job": {
          "inputs": {
            "fai_file": {
              "class": "File",
              "path": "/path/to/fai_file.fasta.fai",
              "secondaryFiles": [],
              "size": 0
            },
            "split_mode": "File per chr with alt contig in a single file",
            "format": "chr start end"
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          }
        }
      },
      "sbg:x": 985.0001612107014,
      "id": "#SBG_Prepare_Intervals"
    },
    {
      "inputs": [
        {
          "source": [
            "#SBG_Untar_fasta.output_fasta"
          ],
          "id": "#SBG_FASTA_Indices.reference"
        },
        {
          "id": "#SBG_FASTA_Indices.memory_per_job"
        }
      ],
      "sbg:y": -130.66664127508696,
      "outputs": [
        {
          "id": "#SBG_FASTA_Indices.fasta_reference"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_index"
        },
        {
          "id": "#SBG_FASTA_Indices.fasta_dict"
        }
      ],
      "run": {
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  return $job.inputs.reference.path.split('/').pop()\n}",
                "engine": "#cwl-js-engine"
              },
              "secondaryFiles": [
                ".fai",
                "^.dict",
                "^^.dict"
              ],
              "sbg:inheritMetadataFrom": "#reference"
            },
            "type": [
              "null",
              "File"
            ],
            "sbg:fileTypes": "FASTA",
            "id": "#fasta_reference",
            "label": "Reference"
          },
          {
            "outputBinding": {
              "glob": "*.fai",
              "sbg:metadata": {}
            },
            "type": [
              "null",
              "File"
            ],
            "sbg:fileTypes": "FAI",
            "id": "#fasta_index",
            "label": "FASTA Index"
          },
          {
            "outputBinding": {
              "glob": "*.dict",
              "sbg:metadata": {}
            },
            "type": [
              "null",
              "File"
            ],
            "sbg:fileTypes": "DICT",
            "id": "#fasta_dict",
            "label": "FASTA Dictionary"
          }
        ],
        "label": "SBG FASTA Indices",
        "successCodes": [],
        "sbg:createdOn": 1450911283,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "samtools",
          "faidx"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "b177f5bd06db",
            "dockerPull": "images.sbgenomics.com/nikola_jovanovic/samtoolspicard:1.0"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job)return $job.inputs.memory_per_job + 500\n  else return 2548\n}",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "y": -130.66664127508696,
        "stdout": "",
        "x": 373.33346019851314,
        "arguments": [
          {
            "position": 1,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  memory = '2048'\n  if ($job.inputs.memory_per_job){\n    memory = $job.inputs.memory_per_job\n  }\n  filename = $job.inputs.reference.path.split('/').pop()\n  basename = filename.split('.')\n  if (filename.endsWith('.gz')){\n    basename.pop()\n  }\n  basename.pop()\n  name = basename.join('.')\n  return 'java -Xmx' + memory + 'M -jar /opt/picard.jar CreateSequenceDictionary R=' + $job.inputs.reference.path + ' O=' + name + '.dict'\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "&&"
          }
        ],
        "class": "CommandLineTool",
        "sbg:latestRevision": 12,
        "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
        "sbg:projectName": "SBGTools - Demo New",
        "inputs": [
          {
            "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true
            },
            "sbg:stageInput": "link",
            "description": "FASTA file to be indexed",
            "required": true,
            "sbg:category": "Input files",
            "type": [
              "File"
            ],
            "id": "#reference",
            "label": "FASTA file"
          },
          {
            "sbg:toolDefaultValue": "2048",
            "label": "Memory per job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory in megabytes required for each execution of the tool.",
            "id": "#memory_per_job"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "vladimirk",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/sbg-fasta-indices/19",
        "sbg:toolkit": "SBGTools",
        "sbg:revision": 12,
        "sbg:categories": [
          "Indexing"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-fasta-indices/12",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911283
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911283
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 2,
            "sbg:modifiedOn": 1458655251
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 3,
            "sbg:modifiedOn": 1458655509
          },
          {
            "sbg:modifiedBy": "markop",
            "sbg:revisionNotes": null,
            "sbg:revision": 4,
            "sbg:modifiedOn": 1458658019
          },
          {
            "sbg:modifiedBy": "markop",
            "sbg:revisionNotes": null,
            "sbg:revision": 5,
            "sbg:modifiedOn": 1458669249
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Removed python script. Changed docker to just samtools and picard. Wrapped both faidx and CreateSequenceDictionary and exposed memory parameter for java execution.",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1504530329
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Changed join to join('.').",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1506419953
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Added support for FA.GZ, FASTA.GZ",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1519907048
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Added secondary .dict support for fasta.gz",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1519909639
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "returned to rev 8",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1528989492
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "rev 7",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1528990550
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "rev 9: Added secondary .dict support",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1528991971
          }
        ],
        "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
        "sbg:license": "Apache License 2.0",
        "sbg:createdBy": "bix-demo",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "samtools faidx  /path/to/reference.fa.gz && java -Xmx10M -jar /opt/picard.jar CreateSequenceDictionary R=/path/to/reference.fa.gz O=reference.dict",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1528991971,
        "sbg:revisionNotes": "rev 9: Added secondary .dict support",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "bix-demo",
          "vladimirk",
          "markop",
          "nikola_jovanovic"
        ],
        "sbg:job": {
          "inputs": {
            "reference": {
              "class": "File",
              "path": "/path/to/reference.fa.gz",
              "secondaryFiles": [],
              "size": 0
            },
            "memory_per_job": 10
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 510
          }
        }
      },
      "sbg:x": 373.33346019851314,
      "id": "#SBG_FASTA_Indices"
    },
    {
      "inputs": [
        {
          "id": "#FastQC.threads"
        },
        {
          "id": "#FastQC.quiet"
        },
        {
          "id": "#FastQC.nogroup"
        },
        {
          "id": "#FastQC.nano"
        },
        {
          "id": "#FastQC.memory_per_job"
        },
        {
          "id": "#FastQC.limits_file"
        },
        {
          "id": "#FastQC.kmers"
        },
        {
          "source": [
            "#fastq"
          ],
          "id": "#FastQC.input_fastq"
        },
        {
          "id": "#FastQC.format"
        },
        {
          "id": "#FastQC.cpus_per_job"
        },
        {
          "id": "#FastQC.contaminants_file"
        },
        {
          "id": "#FastQC.casava"
        },
        {
          "id": "#FastQC.adapters_file"
        }
      ],
      "sbg:y": 420.0000894202157,
      "outputs": [
        {
          "id": "#FastQC.report_zip"
        },
        {
          "id": "#FastQC.report_html"
        }
      ],
      "run": {
        "sbg:toolkitVersion": "0.11.4",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "ZIP",
            "label": "Report zip",
            "outputBinding": {
              "glob": "*_fastqc.zip",
              "sbg:metadata": {
                "__inherit__": "input_fastq"
              },
              "sbg:inheritMetadataFrom": "#input_fastq"
            },
            "type": [
              "null",
              {
                "items": "File",
                "type": "array",
                "name": "report_zip"
              }
            ],
            "description": "Zip archive of the report.",
            "id": "#report_zip"
          },
          {
            "sbg:fileTypes": "HTML",
            "label": "Report HTMLs",
            "outputBinding": {
              "glob": "*.html",
              "sbg:inheritMetadataFrom": "#input_fastq"
            },
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "FastQC reports in HTML format.",
            "id": "#report_html"
          }
        ],
        "label": "FastQC",
        "successCodes": [],
        "sbg:createdOn": 1450911593,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "fastqc"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "759c4c8fbafd",
            "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  // if cpus_per_job is set, it takes precedence\n  if ($job.inputs.cpus_per_job) {\n    return $job.inputs.cpus_per_job \n  }\n  // if threads parameter is set, the number of CPUs is set based on that parametere\n  else if ($job.inputs.threads) {\n    return $job.inputs.threads\n  }\n  // else the number of CPUs is determined by the number of input files, up to 7 -- default\n  else return Math.min([].concat($job.inputs.input_fastq).length,7)\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  // if memory_per_job is set, it takes precedence\n  if ($job.inputs.memory_per_job){\n    return $job.inputs.memory_per_job\n  }\n  // if threads parameter is set, memory req is set based on the number of threads\n  else if ($job.inputs.threads){\n    return 1024 + 300*$job.inputs.threads\n  }\n  // else the memory req is determined by the number of input files, up to 7 -- default\n  else return (1024 + 300*Math.min([].concat($job.inputs.input_fastq).length,7))\n}\n\n",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "sbg:project": "bix-demo/fastqc-0-11-4-demo",
        "stdout": "",
        "x": 115.66668864091304,
        "arguments": [
          {
            "valueFrom": "--noextract",
            "separate": true,
            "prefix": ""
          },
          {
            "valueFrom": ".",
            "separate": true,
            "prefix": "--outdir"
          }
        ],
        "class": "CommandLineTool",
        "sbg:latestRevision": 11,
        "y": 420.0000894202157,
        "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data. \n\nSince it's necessary to convert the tool report in order to show them on Seven Bridges platform, it's recommended to use [FastQC Analysis workflow instead](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/). \n\nFastQC is a tool which takes a FASTQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.",
        "sbg:projectName": "FastQC 0.11.4 - Demo",
        "inputs": [
          {
            "sbg:toolDefaultValue": "1",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "valueFrom": {
                "class": "Expression",
                "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  if (! $job.inputs.threads){\n    $job.inputs.threads = [].concat($job.inputs.input_fastq).length\n  }\n  return Math.min($job.inputs.threads,7)\n}",
                "engine": "#cwl-js-engine"
              },
              "separate": true,
              "prefix": "--threads"
            },
            "id": "#threads",
            "sbg:category": "Options",
            "type": [
              "null",
              "int"
            ],
            "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
            "sbg:altPrefix": "-t",
            "label": "Threads"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--quiet"
            },
            "id": "#quiet",
            "sbg:category": "Options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Supress all progress messages on stdout and only report errors.",
            "sbg:altPrefix": "-q",
            "label": "Quiet"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "--nogroup"
            },
            "label": "Nogroup",
            "sbg:category": "Options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
            "id": "#nogroup"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "--nano"
            },
            "label": "Nano",
            "sbg:category": "Options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
            "id": "#nano"
          },
          {
            "sbg:toolDefaultValue": "Determined by the number of input files",
            "label": "Amount of memory allocated per job execution.",
            "sbg:category": "Execution parameters",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of memory allocated per execution of FastQC job.",
            "id": "#memory_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--limits"
            },
            "sbg:fileTypes": "TXT",
            "id": "#limits_file",
            "required": false,
            "sbg:category": "File inputs",
            "type": [
              "null",
              "File"
            ],
            "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
            "sbg:altPrefix": "-l",
            "label": "Limits"
          },
          {
            "sbg:toolDefaultValue": "7",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--kmers"
            },
            "id": "#kmers",
            "sbg:category": "Options",
            "type": [
              "null",
              "int"
            ],
            "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
            "sbg:altPrefix": "-f",
            "label": "Kmers"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "position": 100,
              "separate": true
            },
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
            "id": "#input_fastq",
            "required": true,
            "sbg:category": "File inputs",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "input_fastq"
              }
            ],
            "description": "Input file.",
            "label": "Input file"
          },
          {
            "sbg:toolDefaultValue": "FASTQ",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--format"
            },
            "id": "#format",
            "sbg:category": "Options",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "bam",
                  "sam",
                  "bam_mapped",
                  "sam_mapped",
                  "fastq"
                ],
                "name": "format"
              }
            ],
            "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
            "sbg:altPrefix": "-f",
            "label": "Format"
          },
          {
            "sbg:toolDefaultValue": "Determined by the number of input files",
            "label": "Number of CPUs.",
            "sbg:category": "Execution parameters",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of CPUs to be allocated per execution of FastQC.",
            "id": "#cpus_per_job"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--contaminants"
            },
            "sbg:fileTypes": "TXT",
            "id": "#contaminants_file",
            "required": false,
            "sbg:category": "File inputs",
            "type": [
              "null",
              "File"
            ],
            "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:altPrefix": "-c",
            "label": "Contaminants"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "--casava"
            },
            "label": "Casava",
            "sbg:category": "Options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
            "id": "#casava"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--adapters"
            },
            "sbg:fileTypes": "TXT",
            "id": "#adapters_file",
            "required": false,
            "sbg:category": "File inputs",
            "type": [
              "null",
              "File"
            ],
            "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
            "sbg:altPrefix": "-a",
            "label": "Adapters"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "nikola_jovanovic",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/19",
        "sbg:toolkit": "FastQC",
        "sbg:revision": 11,
        "sbg:categories": [
          "FASTQ-Processing",
          "Quality-Control",
          "Quantification"
        ],
        "sbg:links": [
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/",
            "label": "Homepage"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip",
            "label": "Source Code"
          },
          {
            "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial",
            "label": "Wiki"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip",
            "label": "Download"
          },
          {
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc",
            "label": "Publication"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911593
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911593
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911594
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:revision": 3,
            "sbg:modifiedOn": 1459870965
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": null,
            "sbg:revision": 4,
            "sbg:modifiedOn": 1465990120
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": "Input categories added.",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1476188095
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1476270496
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1476354537
          },
          {
            "sbg:modifiedBy": "mladenlSBG",
            "sbg:revisionNotes": "IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"\n\nAdded automatised handling of BAM and SAM files. Also, added security measures for better automated threading handling.",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1488882730
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Changed the file types of limits, adapters and contaminants files to be TXT, they have to be in format name[tab]sequence. Format should be similar to the one in the Configuration folder provided with FastQC, txt files.\n\n\"IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1488980183
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1493223877
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "HTML output added.",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1529400574
          }
        ],
        "sbg:toolAuthor": "Babraham Institute",
        "sbg:license": "GNU General Public License v3.0 only",
        "sbg:createdBy": "bix-demo",
        "sbg:publisher": "sbg",
        "cwlVersion": "sbg:draft-2",
        "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.fastq  /path/to/input_fastq-2.fastq",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1529400574,
        "sbg:revisionNotes": "HTML output added.",
        "id": "bix-demo/fastqc-0-11-4-demo/fastqc-0-11-4/11",
        "sbg:contributors": [
          "bix-demo",
          "mladenlSBG",
          "nikola_jovanovic"
        ],
        "sbg:job": {
          "inputs": {
            "input_fastq": [
              {
                "class": "File",
                "path": "/path/to/input_fastq-1.fastq",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input_fastq-2.fastq",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "memory_per_job": null,
            "cpus_per_job": null,
            "format": null,
            "threads": null,
            "quiet": true
          },
          "allocatedResources": {
            "cpu": 2,
            "mem": 1624
          }
        }
      },
      "sbg:x": 115.66668864091304,
      "id": "#FastQC"
    },
    {
      "inputs": [
        {
          "id": "#GATK_MergeVcfs_1.verbosity"
        },
        {
          "id": "#GATK_MergeVcfs_1.validation_stringency"
        },
        {
          "id": "#GATK_MergeVcfs_1.use_jdk_inflater"
        },
        {
          "id": "#GATK_MergeVcfs_1.use_jdk_deflater"
        },
        {
          "id": "#GATK_MergeVcfs_1.reference"
        },
        {
          "id": "#GATK_MergeVcfs_1.quiet"
        },
        {
          "id": "#GATK_MergeVcfs_1.memory_per_job"
        },
        {
          "id": "#GATK_MergeVcfs_1.memory_overhead_per_job"
        },
        {
          "id": "#GATK_MergeVcfs_1.max_records_in_ram"
        },
        {
          "source": [
            "#GATK_HaplotypeCaller.output_vcf"
          ],
          "id": "#GATK_MergeVcfs_1.input"
        },
        {
          "id": "#GATK_MergeVcfs_1.create_md5_file"
        },
        {
          "id": "#GATK_MergeVcfs_1.create_index"
        },
        {
          "id": "#GATK_MergeVcfs_1.compression_level"
        },
        {
          "default": true,
          "id": "#GATK_MergeVcfs_1.clip_intervals"
        }
      ],
      "sbg:y": 442.14276546878887,
      "outputs": [
        {
          "id": "#GATK_MergeVcfs_1.output"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Merges multiple VCF files into one VCF file. Input files must be sorted by their contigs and, within contigs, by start position. The input files must have the same sample and contig lists. An index file is created and a sequence dictionary is required by default.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "The merged VCF file.",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  inputs = [].concat($job.inputs.input)\n  \n  if (inputs[0].path.endsWith('.gz'))\n    return '*.vcf.gz'\n  else\n    return '*.vcf'\n}",
                "engine": "#cwl-js-engine"
              },
              "sbg:inheritMetadataFrom": "#input"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "The merged VCF file. File format is determined by file extension.",
            "id": "#output"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1506343410,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "MergeVcfs"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VERBOSITY"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "verbosity"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VALIDATION_STRINGENCY"
            },
            "id": "#validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency"
              }
            ],
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}.",
            "label": "Validation Stringency"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_INFLATER"
            },
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "label": "Use Jdk Inflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_DEFLATER"
            },
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--REFERENCE_SEQUENCE"
            },
            "label": "Reference",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence file. Default value: null.",
            "id": "#reference"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--QUIET"
            },
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "label": "Quiet"
          },
          {
            "sbg:toolDefaultValue": "2048",
            "sbg:stageInput": null,
            "id": "#memory_per_job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job in MB.",
            "label": "Memory per job in MB"
          },
          {
            "sbg:stageInput": null,
            "label": "Memory overhead per jobin MB",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job.",
            "id": "#memory_overhead_per_job"
          },
          {
            "sbg:toolDefaultValue": "500000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MAX_RECORDS_IN_RAM"
            },
            "id": "#max_records_in_ram",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000.",
            "label": "Max Records In Ram"
          },
          {
            "sbg:stageInput": null,
            "label": "Input",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "VCF input files File format is determined by file extension. This argument must be specified at least once. Required.",
            "sbg:altPrefix": "-I",
            "id": "#input"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_MD5_FILE"
            },
            "id": "#create_md5_file",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}.",
            "label": "Create Md5 File"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_INDEX"
            },
            "id": "#create_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: true. Possible values: {true, false}.",
            "label": "Create Index"
          },
          {
            "sbg:toolDefaultValue": "5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--COMPRESSION_LEVEL"
            },
            "id": "#compression_level",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5.",
            "label": "Compression Level"
          },
          {
            "sbg:stageInput": null,
            "label": "Clip Intervals",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Clip intervals name from output file name",
            "id": "#clip_intervals"
          }
        ],
        "y": 442.14276546878887,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 15,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 15,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx1M\" MergeVcfs --OUTPUT input-1.vcf  --INPUT /path/to/input-1.vcf --INPUT /path/to/input-2.vcf --INPUT /path/to/input-3.vcf",
        "sbg:modifiedBy": "vladimirk",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          }
        ],
        "stdout": "",
        "x": 1701.9638875893365,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  function find_prefix(variants)\n  {\n    var prefix = ''\n    var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    \n    // Finds longest common prefix between variant names\n    for (var i = 1; i < variants.length; ++i)\n    {\n      var j = 0;\n      var current = variants[i].path.replace(/^.*[\\\\\\/]/, '')\n      \n      while(first[j] == current[j] && \n            j < (first.length - 1) && \n            j < (current.length - 1)) ++j\n      \n      // Inits prefixs or shortens it\n      if (i == 1 || prefix.length > j)\n      \tprefix = first.slice(0, j)\n    }\n    \n    // Clips trailing characters\n    while (prefix.endsWith('.') || prefix.endsWith('_') || prefix.endsWith('-'))\n      prefix = prefix.slice(0, prefix.length - 1)\n      \n    return prefix\n  }\n  \n  \n  var variants = [].concat($job.inputs.input)\n  \n  if ($job.inputs.clip_intervals && variants.length > 1)\n  {\n    var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    \n    var extensions = ''\n    \n    if (first.endsWith('.g.vcf'))\n      extensions = '.g.vcf'\n    else if (first.endsWith('.vcf'))\n      extensions = '.vcf'\n    else if (first.endsWith('.g.vcf.gz'))\n      extensions = '.g.vcf.gz'\n    else if (first.endsWith('.vcf.gz'))\n      extensions = '.vcf.gz'\n    \n    var prefix = find_prefix(variants)\n    \n    if (prefix.length > 0)\n      return prefix + extensions\n    else \n      return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n    return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--OUTPUT"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  inputs = $job.inputs.input\n\n  cmd = []\n\n  for (i = 0; i < inputs.length; i++) {\n    cmd.push('--INPUT', inputs[i].path)\n  }\n\n  return cmd.join(' ')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
        "label": "GATK MergeVcfs",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-mergevcfs/15",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/5",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1506343410
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/6",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1508488837
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/7",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1511522896
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/8",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1511529512
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/9",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1511787087
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/10",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1511797504
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/11",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1513786620
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/21",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1515587940
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/23",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1515590601
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/24",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1515599046
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/25",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1516963239
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/26",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1516968554
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/28",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1519225872
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/29",
            "sbg:revision": 13,
            "sbg:modifiedOn": 1519648172
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/30",
            "sbg:revision": 14,
            "sbg:modifiedOn": 1520946084
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
            "sbg:revision": 15,
            "sbg:modifiedOn": 1530615364
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic",
          "vladimirk"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1530615364,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-mergevcfs/15",
        "sbg:job": {
          "inputs": {
            "max_records_in_ram": null,
            "input": [
              {
                "class": "File",
                "path": "/path/to/input-1.vcf",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input-2.vcf",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input-3.vcf",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "use_jdk_deflater": false,
            "QUIET": false,
            "memory_overhead_per_job": 5,
            "clip_intervals": false,
            "use_jdk_inflater": false,
            "memory_per_job": 1,
            "CREATE_MD5_FILE": false,
            "validation_stringency": null,
            "create_md5_file": false,
            "compression_level": null,
            "CREATE_INDEX": false,
            "verbosity": null,
            "create_index": false,
            "quiet": false
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 1701.9638875893365,
      "id": "#GATK_MergeVcfs_1"
    },
    {
      "inputs": [
        {
          "id": "#GATK_MergeVcfs.verbosity"
        },
        {
          "id": "#GATK_MergeVcfs.validation_stringency"
        },
        {
          "id": "#GATK_MergeVcfs.use_jdk_inflater"
        },
        {
          "id": "#GATK_MergeVcfs.use_jdk_deflater"
        },
        {
          "id": "#GATK_MergeVcfs.reference"
        },
        {
          "id": "#GATK_MergeVcfs.quiet"
        },
        {
          "id": "#GATK_MergeVcfs.memory_per_job"
        },
        {
          "id": "#GATK_MergeVcfs.memory_overhead_per_job"
        },
        {
          "id": "#GATK_MergeVcfs.max_records_in_ram"
        },
        {
          "source": [
            "#GATK_GenotypeGVCFs.vcf"
          ],
          "id": "#GATK_MergeVcfs.input"
        },
        {
          "id": "#GATK_MergeVcfs.create_md5_file"
        },
        {
          "id": "#GATK_MergeVcfs.create_index"
        },
        {
          "id": "#GATK_MergeVcfs.compression_level"
        },
        {
          "default": true,
          "id": "#GATK_MergeVcfs.clip_intervals"
        }
      ],
      "sbg:y": 220.63094443603117,
      "outputs": [
        {
          "id": "#GATK_MergeVcfs.output"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Merges multiple VCF files into one VCF file. Input files must be sorted by their contigs and, within contigs, by start position. The input files must have the same sample and contig lists. An index file is created and a sequence dictionary is required by default.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "The merged VCF file.",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  inputs = [].concat($job.inputs.input)\n  \n  if (inputs[0].path.endsWith('.gz'))\n    return '*.vcf.gz'\n  else\n    return '*.vcf'\n}",
                "engine": "#cwl-js-engine"
              },
              "sbg:inheritMetadataFrom": "#input"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "The merged VCF file. File format is determined by file extension.",
            "id": "#output"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1506343410,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "MergeVcfs"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VERBOSITY"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "verbosity"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VALIDATION_STRINGENCY"
            },
            "id": "#validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency"
              }
            ],
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}.",
            "label": "Validation Stringency"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_INFLATER"
            },
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "label": "Use Jdk Inflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_DEFLATER"
            },
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--REFERENCE_SEQUENCE"
            },
            "label": "Reference",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence file. Default value: null.",
            "id": "#reference"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--QUIET"
            },
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "label": "Quiet"
          },
          {
            "sbg:toolDefaultValue": "2048",
            "sbg:stageInput": null,
            "id": "#memory_per_job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job in MB.",
            "label": "Memory per job in MB"
          },
          {
            "sbg:stageInput": null,
            "label": "Memory overhead per jobin MB",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job.",
            "id": "#memory_overhead_per_job"
          },
          {
            "sbg:toolDefaultValue": "500000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MAX_RECORDS_IN_RAM"
            },
            "id": "#max_records_in_ram",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000.",
            "label": "Max Records In Ram"
          },
          {
            "sbg:stageInput": null,
            "label": "Input",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "VCF input files File format is determined by file extension. This argument must be specified at least once. Required.",
            "sbg:altPrefix": "-I",
            "id": "#input"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_MD5_FILE"
            },
            "id": "#create_md5_file",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}.",
            "label": "Create Md5 File"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_INDEX"
            },
            "id": "#create_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: true. Possible values: {true, false}.",
            "label": "Create Index"
          },
          {
            "sbg:toolDefaultValue": "5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--COMPRESSION_LEVEL"
            },
            "id": "#compression_level",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5.",
            "label": "Compression Level"
          },
          {
            "sbg:stageInput": null,
            "label": "Clip Intervals",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Clip intervals name from output file name",
            "id": "#clip_intervals"
          }
        ],
        "y": 220.63094443603117,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 15,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 15,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx1M\" MergeVcfs --OUTPUT input-1.vcf  --INPUT /path/to/input-1.vcf --INPUT /path/to/input-2.vcf --INPUT /path/to/input-3.vcf",
        "sbg:modifiedBy": "vladimirk",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          }
        ],
        "stdout": "",
        "x": 1900.130568668466,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  function find_prefix(variants)\n  {\n    var prefix = ''\n    var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    \n    // Finds longest common prefix between variant names\n    for (var i = 1; i < variants.length; ++i)\n    {\n      var j = 0;\n      var current = variants[i].path.replace(/^.*[\\\\\\/]/, '')\n      \n      while(first[j] == current[j] && \n            j < (first.length - 1) && \n            j < (current.length - 1)) ++j\n      \n      // Inits prefixs or shortens it\n      if (i == 1 || prefix.length > j)\n      \tprefix = first.slice(0, j)\n    }\n    \n    // Clips trailing characters\n    while (prefix.endsWith('.') || prefix.endsWith('_') || prefix.endsWith('-'))\n      prefix = prefix.slice(0, prefix.length - 1)\n      \n    return prefix\n  }\n  \n  \n  var variants = [].concat($job.inputs.input)\n  \n  if ($job.inputs.clip_intervals && variants.length > 1)\n  {\n    var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    \n    var extensions = ''\n    \n    if (first.endsWith('.g.vcf'))\n      extensions = '.g.vcf'\n    else if (first.endsWith('.vcf'))\n      extensions = '.vcf'\n    else if (first.endsWith('.g.vcf.gz'))\n      extensions = '.g.vcf.gz'\n    else if (first.endsWith('.vcf.gz'))\n      extensions = '.vcf.gz'\n    \n    var prefix = find_prefix(variants)\n    \n    if (prefix.length > 0)\n      return prefix + extensions\n    else \n      return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n    return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--OUTPUT"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  inputs = $job.inputs.input\n\n  cmd = []\n\n  for (i = 0; i < inputs.length; i++) {\n    cmd.push('--INPUT', inputs[i].path)\n  }\n\n  return cmd.join(' ')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
        "label": "GATK MergeVcfs",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-mergevcfs/15",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/5",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1506343410
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/6",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1508488837
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/7",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1511522896
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/8",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1511529512
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/9",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1511787087
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/10",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1511797504
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/11",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1513786620
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/21",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1515587940
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/23",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1515590601
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/24",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1515599046
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/25",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1516963239
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/26",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1516968554
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/28",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1519225872
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/29",
            "sbg:revision": 13,
            "sbg:modifiedOn": 1519648172
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/30",
            "sbg:revision": 14,
            "sbg:modifiedOn": 1520946084
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
            "sbg:revision": 15,
            "sbg:modifiedOn": 1530615364
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic",
          "vladimirk"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1530615364,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-mergevcfs/15",
        "sbg:job": {
          "inputs": {
            "max_records_in_ram": null,
            "input": [
              {
                "class": "File",
                "path": "/path/to/input-1.vcf",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input-2.vcf",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input-3.vcf",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "use_jdk_deflater": false,
            "QUIET": false,
            "memory_overhead_per_job": 5,
            "clip_intervals": false,
            "use_jdk_inflater": false,
            "memory_per_job": 1,
            "CREATE_MD5_FILE": false,
            "validation_stringency": null,
            "create_md5_file": false,
            "compression_level": null,
            "CREATE_INDEX": false,
            "verbosity": null,
            "create_index": false,
            "quiet": false
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 1900.130568668466,
      "id": "#GATK_MergeVcfs"
    },
    {
      "inputs": [
        {
          "source": [
            "#SBG_FASTQ_Quality_Adjuster.result"
          ],
          "id": "#SBG_Pair_FASTQs_by_Metadata.fastq_list"
        }
      ],
      "sbg:y": 199.48723191481605,
      "outputs": [
        {
          "id": "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
        }
      ],
      "run": {
        "sbg:project": "bix-demo/sbgtools-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "FASTQ,FQ,FASTQ.GZ,FQ.GZ",
            "label": "List of grouped FASTQ files",
            "outputBinding": {
              "outputEval": {
                "class": "Expression",
                "script": "{\n  function get_meta_map(m,file,meta){\n    if (meta in file.metadata){\n      return m[file.metadata[meta]]\n    }\n    else{\n      return m['Undefined']\n    }\n  }\n  \n  function create_new_map(map, file, meta){\n    if (meta in file.metadata) {\n      map[file.metadata[meta]] = {}\n      return map[file.metadata[meta]]\n    }\n    else {\n      map['Undefined'] = {}\n      return map['Undefined']\n    }\n  }\n  \n  arr = [].concat($job.inputs.fastq_list)\n  map = {}\n  \n  for (i in arr){\n    \n    sm_map = get_meta_map(map, arr[i], 'sample_id')\n    if(!sm_map) sm_map = create_new_map(map, arr[i], 'sample_id')\n    \n    lb_map = get_meta_map(sm_map, arr[i], 'library_id')\n    if(!lb_map) lb_map = create_new_map(sm_map, arr[i], 'library_id')\n    \n    pu_map = get_meta_map(lb_map, arr[i], 'platform_unit_id')\n    if (!pu_map) pu_map = create_new_map(lb_map, arr[i], 'platform_unit_id')\n    \n    if ('file_segment_number' in arr[i].metadata){\n      if (pu_map[arr[i].metadata['file_segment_number']]) {\n        a = pu_map[arr[i].metadata['file_segment_number']]\n        ar = [].concat(a)\n        ar = ar.concat(arr[i])\n        pu_map[arr[i].metadata['file_segment_number']] = ar\n      }\n      else pu_map[arr[i].metadata['file_segment_number']] = [].concat(arr[i])\n    }\n    else {\n      if (pu_map['Undefined']){\n        a = pu_map['Undefined']\n        ar = [].concat(a)\n        ar = ar.concat(arr[i])\n        pu_map['Undefined'] = ar\n      }\n      else {\n        pu_map['Undefined'] = [].concat(arr[i])\n      }\n    }\n  }\n  tuple_list = []\n  for (sm in map)\n    for (lb in map[sm])\n      for (pu in map[sm][lb]){\n        for (fsm in map[sm][lb][pu]){\n          list = map[sm][lb][pu][fsm]\n          tuple_list.push(list)\n        }\n      }\n  return tuple_list    \n}",
                "engine": "#cwl-js-engine"
              }
            },
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "List of grouped FASTQ files by metadata fields.",
            "id": "#tuple_list"
          }
        ],
        "label": "SBG Pair FASTQs by Metadata",
        "successCodes": [],
        "sbg:createdOn": 1450911289,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "echo",
          "'Pairing",
          "FASTQs!'"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "d41a0837ab81",
            "dockerPull": "images.sbgenomics.com/nikola_jovanovic/alpine:1"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": 1024
          }
        ],
        "y": 199.48723191481605,
        "stdout": "",
        "x": 163.58977860670942,
        "arguments": [],
        "class": "CommandLineTool",
        "sbg:latestRevision": 12,
        "description": "Tool accepts list of FASTQ files groups them into separate lists. This grouping is done using metadata values and their hierarchy (Sample ID > Library ID > Platform unit ID > File segment number) which should create unique combinations for each pair of FASTQ files. Important metadata fields are Sample ID, Library ID, Platform unit ID and File segment number. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files. Files with no paired end metadata are grouped in the same way as the ones with paired end metadata, generally they should be alone in a separate list. Files with no metadata set will be grouped together. \n\nIf there are more than two files in a group, this might create errors further down most pipelines and the user should check if the metadata fields for those files are set properly.",
        "sbg:projectName": "SBGTools - Demo New",
        "inputs": [
          {
            "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
            "label": "List of FASTQ files",
            "required": true,
            "sbg:stageInput": "link",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "List of the FASTQ files with properly set metadata fileds.",
            "id": "#fastq_list"
          }
        ],
        "stdin": "",
        "sbg:modifiedBy": "nikola_jovanovic",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:id": "admin/sbg-public-data/sbg-pair-fastqs-by-metadata/14",
        "sbg:toolkit": "SBGTools",
        "sbg:revision": 12,
        "sbg:categories": [
          "Converters",
          "Other"
        ],
        "id": "bix-demo/sbgtools-demo/sbg-pair-fastqs-by-metadata/12",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 0,
            "sbg:modifiedOn": 1450911289
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 1,
            "sbg:modifiedOn": 1450911290
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 2,
            "sbg:modifiedOn": 1450911290
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 3,
            "sbg:modifiedOn": 1463403276
          },
          {
            "sbg:modifiedBy": "markop",
            "sbg:revisionNotes": "Link fastq_list",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1469015151
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Added support for single file.",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1472059795
          },
          {
            "sbg:modifiedBy": "bix-demo",
            "sbg:revisionNotes": null,
            "sbg:revision": 6,
            "sbg:modifiedOn": 1489510320
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": null,
            "sbg:revision": 7,
            "sbg:modifiedOn": 1489665046
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Fixed a typo.",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1498052477
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Fix - error message will appear if files are grouped but have no metadata.",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1504713791
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Changed order of pairings (pe1,pe2).",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1505480936
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Changed to JavaScript",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1508759852
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Changed docker image to images.sbgenomics.com.",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1530873664
          }
        ],
        "sbg:toolAuthor": "",
        "sbg:license": "Apache License 2.0",
        "sbg:createdBy": "bix-demo",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "echo 'Pairing FASTQs!'",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1530873664,
        "sbg:revisionNotes": "Changed docker image to images.sbgenomics.com.",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "bix-demo",
          "vladimirk",
          "markop",
          "nikola_jovanovic"
        ],
        "sbg:job": {
          "inputs": {
            "fastq_list": [
              {
                "class": "File",
                "metadata": {
                  "sample_id": "a",
                  "paired_end": "1"
                },
                "path": "/asda/dsa/sda/sda/fasta1.fastq",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "path": "/asda/dsa/sda/sda/fasta2.fastq",
                "metadata": {
                  "sample_id": "a",
                  "paired_end": "2"
                },
                "secondaryFiles": []
              },
              {
                "path": "/asda/dsa/sda/sda/fasta3.fastq",
                "metadata": {
                  "sample_id": "b",
                  "paired_end": ""
                },
                "secondaryFiles": []
              }
            ]
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1024
          }
        }
      },
      "sbg:x": 163.58977860670942,
      "id": "#SBG_Pair_FASTQs_by_Metadata"
    },
    {
      "inputs": [
        {
          "id": "#GATK_MergeVcfs_2.verbosity"
        },
        {
          "id": "#GATK_MergeVcfs_2.validation_stringency"
        },
        {
          "id": "#GATK_MergeVcfs_2.use_jdk_inflater"
        },
        {
          "id": "#GATK_MergeVcfs_2.use_jdk_deflater"
        },
        {
          "id": "#GATK_MergeVcfs_2.reference"
        },
        {
          "id": "#GATK_MergeVcfs_2.quiet"
        },
        {
          "id": "#GATK_MergeVcfs_2.memory_per_job"
        },
        {
          "id": "#GATK_MergeVcfs_2.memory_overhead_per_job"
        },
        {
          "id": "#GATK_MergeVcfs_2.max_records_in_ram"
        },
        {
          "source": [
            "#INDEL_GATK_VariantFiltration.filtered_vcf",
            "#SNP_GATK_VariantFiltration.filtered_vcf"
          ],
          "id": "#GATK_MergeVcfs_2.input"
        },
        {
          "id": "#GATK_MergeVcfs_2.create_md5_file"
        },
        {
          "id": "#GATK_MergeVcfs_2.create_index"
        },
        {
          "id": "#GATK_MergeVcfs_2.compression_level"
        },
        {
          "id": "#GATK_MergeVcfs_2.clip_intervals"
        }
      ],
      "sbg:y": 266.6927176062019,
      "outputs": [
        {
          "id": "#GATK_MergeVcfs_2.output"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "description": "Merges multiple VCF files into one VCF file. Input files must be sorted by their contigs and, within contigs, by start position. The input files must have the same sample and contig lists. An index file is created and a sequence dictionary is required by default.",
        "outputs": [
          {
            "sbg:fileTypes": "VCF",
            "label": "The merged VCF file.",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  inputs = [].concat($job.inputs.input)\n  \n  if (inputs[0].path.endsWith('.gz'))\n    return '*.vcf.gz'\n  else\n    return '*.vcf'\n}",
                "engine": "#cwl-js-engine"
              },
              "sbg:inheritMetadataFrom": "#input"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "The merged VCF file. File format is determined by file extension.",
            "id": "#output"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1506343410,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "MergeVcfs"
        ],
        "temporaryFailCodes": [],
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VERBOSITY"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "verbosity"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "STRICT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--VALIDATION_STRINGENCY"
            },
            "id": "#validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "validation_stringency"
              }
            ],
            "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. Possible values: {STRICT, LENIENT, SILENT}.",
            "label": "Validation Stringency"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_INFLATER"
            },
            "id": "#use_jdk_inflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "label": "Use Jdk Inflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--USE_JDK_DEFLATER"
            },
            "id": "#use_jdk_deflater",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "label": "Use Jdk Deflater"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--REFERENCE_SEQUENCE"
            },
            "label": "Reference",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence file. Default value: null.",
            "id": "#reference"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--QUIET"
            },
            "id": "#quiet",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "label": "Quiet"
          },
          {
            "sbg:toolDefaultValue": "2048",
            "sbg:stageInput": null,
            "id": "#memory_per_job",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory per job in MB.",
            "label": "Memory per job in MB"
          },
          {
            "sbg:stageInput": null,
            "label": "Memory overhead per jobin MB",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Memory overhead per job.",
            "id": "#memory_overhead_per_job"
          },
          {
            "sbg:toolDefaultValue": "500000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--MAX_RECORDS_IN_RAM"
            },
            "id": "#max_records_in_ram",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "When writing SAM files that need to be sorted, this will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000.",
            "label": "Max Records In Ram"
          },
          {
            "sbg:stageInput": null,
            "label": "Input",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "VCF input files File format is determined by file extension. This argument must be specified at least once. Required.",
            "sbg:altPrefix": "-I",
            "id": "#input"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_MD5_FILE"
            },
            "id": "#create_md5_file",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to create an MD5 digest for any BAM or FASTQ files created. Default value: false. Possible values: {true, false}.",
            "label": "Create Md5 File"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--CREATE_INDEX"
            },
            "id": "#create_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Whether to create a BAM index when writing a coordinate-sorted BAM file. Default value: true. Possible values: {true, false}.",
            "label": "Create Index"
          },
          {
            "sbg:toolDefaultValue": "5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--COMPRESSION_LEVEL"
            },
            "id": "#compression_level",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5.",
            "label": "Compression Level"
          },
          {
            "sbg:stageInput": null,
            "label": "Clip Intervals",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Clip intervals name from output file name",
            "id": "#clip_intervals"
          }
        ],
        "y": 266.6927176062019,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 15,
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 15,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx1M\" MergeVcfs --OUTPUT input-1.vcf  --INPUT /path/to/input-1.vcf --INPUT /path/to/input-2.vcf --INPUT /path/to/input-3.vcf",
        "sbg:modifiedBy": "vladimirk",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          }
        ],
        "stdout": "",
        "x": 2703.333440621696,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  function find_prefix(variants)\n  {\n    var prefix = ''\n    var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    \n    // Finds longest common prefix between variant names\n    for (var i = 1; i < variants.length; ++i)\n    {\n      var j = 0;\n      var current = variants[i].path.replace(/^.*[\\\\\\/]/, '')\n      \n      while(first[j] == current[j] && \n            j < (first.length - 1) && \n            j < (current.length - 1)) ++j\n      \n      // Inits prefixs or shortens it\n      if (i == 1 || prefix.length > j)\n      \tprefix = first.slice(0, j)\n    }\n    \n    // Clips trailing characters\n    while (prefix.endsWith('.') || prefix.endsWith('_') || prefix.endsWith('-'))\n      prefix = prefix.slice(0, prefix.length - 1)\n      \n    return prefix\n  }\n  \n  \n  var variants = [].concat($job.inputs.input)\n  \n  if ($job.inputs.clip_intervals && variants.length > 1)\n  {\n    var first = variants[0].path.replace(/^.*[\\\\\\/]/, '')\n    \n    var extensions = ''\n    \n    if (first.endsWith('.g.vcf'))\n      extensions = '.g.vcf'\n    else if (first.endsWith('.vcf'))\n      extensions = '.vcf'\n    else if (first.endsWith('.g.vcf.gz'))\n      extensions = '.g.vcf.gz'\n    else if (first.endsWith('.vcf.gz'))\n      extensions = '.vcf.gz'\n    \n    var prefix = find_prefix(variants)\n    \n    if (prefix.length > 0)\n      return prefix + extensions\n    else \n      return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n    return variants[0].path.replace(/^.*[\\\\\\/]/, '')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--OUTPUT"
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  inputs = $job.inputs.input\n\n  cmd = []\n\n  for (i = 0; i < inputs.length; i++) {\n    cmd.push('--INPUT', inputs[i].path)\n  }\n\n  return cmd.join(' ')\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
        "label": "GATK MergeVcfs",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-mergevcfs/15",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/5",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1506343410
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/6",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1508488837
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/7",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1511522896
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/8",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1511529512
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/9",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1511787087
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/10",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1511797504
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/11",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1513786620
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/21",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1515587940
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/23",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1515590601
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/24",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1515599046
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/25",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1516963239
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/26",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1516968554
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/28",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1519225872
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/29",
            "sbg:revision": 13,
            "sbg:modifiedOn": 1519648172
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/30",
            "sbg:revision": 14,
            "sbg:modifiedOn": 1520946084
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
            "sbg:revision": 15,
            "sbg:modifiedOn": 1530615364
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "teodora.aleksic",
          "vladimirk"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1530615364,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-mergevcfs/31",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "admin/sbg-public-data/gatk-mergevcfs/15",
        "sbg:job": {
          "inputs": {
            "max_records_in_ram": null,
            "input": [
              {
                "class": "File",
                "path": "/path/to/input-1.vcf",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input-2.vcf",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input-3.vcf",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "use_jdk_deflater": false,
            "QUIET": false,
            "memory_overhead_per_job": 5,
            "clip_intervals": false,
            "use_jdk_inflater": false,
            "memory_per_job": 1,
            "CREATE_MD5_FILE": false,
            "validation_stringency": null,
            "create_md5_file": false,
            "compression_level": null,
            "CREATE_INDEX": false,
            "verbosity": null,
            "create_index": false,
            "quiet": false
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 2703.333440621696,
      "id": "#GATK_MergeVcfs_2"
    },
    {
      "inputs": [
        {
          "id": "#BWA_INDEX_1.total_memory"
        },
        {
          "source": [
            "#reference"
          ],
          "id": "#BWA_INDEX_1.reference"
        },
        {
          "id": "#BWA_INDEX_1.prefix_of_the_index_to_be_output"
        },
        {
          "id": "#BWA_INDEX_1.do_not_add_alt_contig_to_reference"
        },
        {
          "id": "#BWA_INDEX_1.bwt_construction"
        },
        {
          "id": "#BWA_INDEX_1.block_size"
        },
        {
          "id": "#BWA_INDEX_1.add_64_to_fasta_name"
        }
      ],
      "sbg:y": 44.6153840905817,
      "outputs": [
        {
          "id": "#BWA_INDEX_1.indexed_reference"
        }
      ],
      "run": {
        "sbg:project": "vladimirk/bwa-mem-bundle-0-7-17-demo",
        "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.\n\nTAR also contains alt reference from bwa.kit suggested by the author of the tool.",
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "TAR",
            "label": "TARed fasta with its BWA indices",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                "engine": "#cwl-js-engine"
              },
              "sbg:metadata": {
                "reference": {
                  "class": "Expression",
                  "script": "{\n  path = [].concat($job.inputs.reference)[0].path.split('/')\n  last = path.pop()\n  return last\n}",
                  "engine": "#cwl-js-engine"
                }
              },
              "sbg:inheritMetadataFrom": "#reference"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "TARed fasta with its BWA indices.",
            "id": "#indexed_reference"
          }
        ],
        "label": "BWA INDEX",
        "successCodes": [],
        "sbg:createdOn": 1531828242,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "id": "vladimirk/bwa-mem-bundle-0-7-17-demo/bwa-index/3",
        "baseCommand": [
          {
            "class": "Expression",
            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    \n    cp_alt_cmd = ''\n\n    if(!$job.inputs.do_not_add_alt_contig_to_reference){\n      if (reference_file.search('38') >= 0){\n        cp_alt_cmd = 'cp /opt/hs38DH.fa.alt ' + reference_file + '.alt ; '\n      }\n    }\n    \n    index_cmd = 'bwa index '+ reference_file + ' '\n    \n    return cp_alt_cmd + index_cmd\n  }\n}",
            "engine": "#cwl-js-engine"
          }
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "2f813371e803",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.17"
          },
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  \n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else if (ext=='tar'){\n    return 128\n  }\n    {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "y": 44.6153840905817,
        "stdout": "",
        "x": 55.38462453763157,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    extensions = ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa'\n    if(!$job.inputs.do_not_add_alt_contig_to_reference){\n      if (reference_file.search('38') >= 0){\n        extensions = extensions + ' *.alt ; '\n      }\n    }\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + extensions\n    return ' ; ' + tar_cmd\n  }\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:latestRevision": 3,
        "sbg:publisher": "sbg",
        "sbg:validationErrors": [],
        "inputs": [
          {
            "sbg:category": "Configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference).",
            "label": "Total memory [Gb]",
            "id": "#total_memory"
          },
          {
            "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
            "sbg:stageInput": "link",
            "description": "Input reference fasta of TAR file with reference and indices.",
            "required": true,
            "sbg:category": "File input",
            "type": [
              "File"
            ],
            "id": "#reference",
            "label": "Reference"
          },
          {
            "sbg:category": "Configuration",
            "type": [
              "null",
              "string"
            ],
            "description": "Prefix of the index [same as fasta name].",
            "label": "Prefix of the index to be output",
            "id": "#prefix_of_the_index_to_be_output"
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:stageInput": null,
            "label": "Do not add alt contigs file to TAR bundle",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Do not add alt contigs file to TAR bundle.",
            "id": "#do_not_add_alt_contig_to_reference"
          },
          {
            "sbg:toolDefaultValue": "auto",
            "label": "Bwt construction",
            "sbg:category": "Configuration",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "bwt_construction",
                "symbols": [
                  "bwtsw",
                  "is",
                  "div"
                ]
              }
            ],
            "id": "#bwt_construction",
            "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes."
          },
          {
            "sbg:toolDefaultValue": "10000000",
            "label": "Block size",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "int"
            ],
            "id": "#block_size",
            "description": "Block size for the bwtsw algorithm (effective with -a bwtsw)."
          },
          {
            "sbg:category": "Configuration",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*.",
            "label": "Output index files renamed by adding 64",
            "id": "#add_64_to_fasta_name"
          }
        ],
        "stdin": "",
        "sbg:projectName": "BWA MEM Bundle 0.7.17 - Demo",
        "sbg:modifiedBy": "vladimirk",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 3,
        "sbg:toolkit": "BWA",
        "sbg:toolkitVersion": "0.7.17",
        "sbg:categories": [
          "Indexing",
          "FASTA-Processing"
        ],
        "sbg:links": [
          {
            "id": "http://bio-bwa.sourceforge.net/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lh3/bwa",
            "label": "Source code"
          },
          {
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/bio-bwa/",
            "label": "Download"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
            "label": "Publication"
          }
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-index/18",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1531828242
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "add alt to TAR",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1531839752
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "*.alt correction",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1531840345
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "docs",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1531844984
          }
        ],
        "sbg:toolAuthor": "Heng Li",
        "sbg:license": "GNU Affero General Public License v3.0, MIT License",
        "sbg:createdBy": "vladimirk",
        "sbg:id": "h-e0b67355/h-c5380c77/h-fbe3939f/0",
        "sbg:cmdPreview": "cp /opt/hs38DH.fa.alt reference38.fasta.alt ; bwa index reference38.fasta            ; tar -cf reference38.fasta.tar reference38.fasta *.amb *.ann *.bwt *.pac *.sa *.alt ;",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1531844984,
        "sbg:revisionNotes": "docs",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "vladimirk"
        ],
        "sbg:job": {
          "inputs": {
            "do_not_add_alt_contig_to_reference": false,
            "bwt_construction": null,
            "prefix_of_the_index_to_be_output": "prefix",
            "total_memory": null,
            "block_size": null,
            "add_64_to_fasta_name": false,
            "reference": {
              "class": "File",
              "path": "/path/to/the/reference38.fasta",
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1536
          }
        }
      },
      "sbg:x": 55.38462453763157,
      "id": "#BWA_INDEX_1"
    },
    {
      "inputs": [
        {
          "id": "#GATK_ApplyBQSR.verbosity"
        },
        {
          "id": "#GATK_ApplyBQSR.use_original_qualities"
        },
        {
          "id": "#GATK_ApplyBQSR.use_jdk_inflater"
        },
        {
          "id": "#GATK_ApplyBQSR.use_jdk_deflater"
        },
        {
          "id": "#GATK_ApplyBQSR.static_quantized_quals"
        },
        {
          "id": "#GATK_ApplyBQSR.seconds_between_progress_updates"
        },
        {
          "id": "#GATK_ApplyBQSR.sample"
        },
        {
          "id": "#GATK_ApplyBQSR.round_down_quantized"
        },
        {
          "id": "#GATK_ApplyBQSR.reference"
        },
        {
          "id": "#GATK_ApplyBQSR.read_validation_stringency"
        },
        {
          "id": "#GATK_ApplyBQSR.read_name"
        },
        {
          "id": "#GATK_ApplyBQSR.read_index"
        },
        {
          "id": "#GATK_ApplyBQSR.read_filter"
        },
        {
          "id": "#GATK_ApplyBQSR.quiet"
        },
        {
          "id": "#GATK_ApplyBQSR.quantize_quals"
        },
        {
          "id": "#GATK_ApplyBQSR.preserve_qscores_less_than"
        },
        {
          "id": "#GATK_ApplyBQSR.pl_filter_name"
        },
        {
          "id": "#GATK_ApplyBQSR.minimum_mapping_quality"
        },
        {
          "id": "#GATK_ApplyBQSR.min_read_length"
        },
        {
          "id": "#GATK_ApplyBQSR.memory_per_job"
        },
        {
          "id": "#GATK_ApplyBQSR.memory_overhead_per_job"
        },
        {
          "id": "#GATK_ApplyBQSR.maximum_mapping_quality"
        },
        {
          "id": "#GATK_ApplyBQSR.max_read_length"
        },
        {
          "id": "#GATK_ApplyBQSR.max_fragment_length"
        },
        {
          "id": "#GATK_ApplyBQSR.library"
        },
        {
          "id": "#GATK_ApplyBQSR.lenient"
        },
        {
          "id": "#GATK_ApplyBQSR.keep_reverse"
        },
        {
          "id": "#GATK_ApplyBQSR.keep_read_group"
        },
        {
          "id": "#GATK_ApplyBQSR.intervals_string"
        },
        {
          "source": [
            "#SBG_Prepare_Intervals.intervals"
          ],
          "id": "#GATK_ApplyBQSR.intervals_file"
        },
        {
          "id": "#GATK_ApplyBQSR.interval_set_rule"
        },
        {
          "id": "#GATK_ApplyBQSR.interval_merging_rule"
        },
        {
          "id": "#GATK_ApplyBQSR.interval_exclusion_padding"
        },
        {
          "id": "#GATK_ApplyBQSR.input_cram"
        },
        {
          "source": [
            "#BWA_MEM_Bundle.aligned_reads"
          ],
          "id": "#GATK_ApplyBQSR.input_bam"
        },
        {
          "default": true,
          "id": "#GATK_ApplyBQSR.include_interval_name_in_output_name"
        },
        {
          "id": "#GATK_ApplyBQSR.global_q_score_prior"
        },
        {
          "id": "#GATK_ApplyBQSR.filter_too_short"
        },
        {
          "id": "#GATK_ApplyBQSR.exclude_intervas_string"
        },
        {
          "id": "#GATK_ApplyBQSR.exclude_intervals_file"
        },
        {
          "id": "#GATK_ApplyBQSR.emit_original_quals"
        },
        {
          "id": "#GATK_ApplyBQSR.dont_require_soft_clips_both_ends"
        },
        {
          "id": "#GATK_ApplyBQSR.disable_tool_default_read_filters"
        },
        {
          "id": "#GATK_ApplyBQSR.disable_sequence_dictionary_validation"
        },
        {
          "id": "#GATK_ApplyBQSR.disable_read_filter"
        },
        {
          "id": "#GATK_ApplyBQSR.disable_bam_index_caching"
        },
        {
          "id": "#GATK_ApplyBQSR.create_output_variant_md5"
        },
        {
          "id": "#GATK_ApplyBQSR.create_output_variant_index"
        },
        {
          "id": "#GATK_ApplyBQSR.create_output_bam_md5"
        },
        {
          "id": "#GATK_ApplyBQSR.cloud_prefetch_buffer"
        },
        {
          "id": "#GATK_ApplyBQSR.cloud_index_prefetch_buffer"
        },
        {
          "source": [
            "#GATK_BaseRecalibrator.recalibration_file"
          ],
          "id": "#GATK_ApplyBQSR.bqsr_recal_file"
        },
        {
          "id": "#GATK_ApplyBQSR.black_listed_lanes"
        },
        {
          "id": "#GATK_ApplyBQSR.black_list"
        },
        {
          "id": "#GATK_ApplyBQSR.ambig_filter_frac"
        },
        {
          "id": "#GATK_ApplyBQSR.ambig_filter_bases"
        },
        {
          "id": "#GATK_ApplyBQSR.add_output_vcf_command_line"
        },
        {
          "id": "#GATK_ApplyBQSR.add_output_sam_program_record"
        }
      ],
      "sbg:y": 270.2566226756189,
      "outputs": [
        {
          "id": "#GATK_ApplyBQSR.output"
        }
      ],
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "INFO",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--verbosity"
            },
            "id": "#verbosity",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "name": "null"
              }
            ],
            "description": "Control verbosity of logging. Default value: INFO. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
            "sbg:altPrefix": "",
            "label": "Verbosity"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-original-qualities"
            },
            "sbg:stageInput": null,
            "description": "Use the base quality scores from the OQ tag Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Original Qualities",
            "id": "#use_original_qualities"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-inflater"
            },
            "sbg:stageInput": null,
            "description": "Whether to use the JdkInflater (as opposed to IntelInflater) Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Jdk Inflater",
            "id": "#use_jdk_inflater"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--use-jdk-deflater"
            },
            "sbg:stageInput": null,
            "description": "Whether to use the JdkDeflater (as opposed to IntelDeflater) Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Use Jdk Deflater",
            "id": "#use_jdk_deflater"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--static-quantized-quals"
            },
            "id": "#static_quantized_quals",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Use static quantized quality scores to a given number of levels (with -bqsr) This argument may be specified 0 or more times. Default value: null. Cannot be used in conjuction with argument(s) quantizationLevels (qq).",
            "sbg:altPrefix": "",
            "label": "Static Quantized Quals"
          },
          {
            "sbg:toolDefaultValue": "10",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--seconds-between-progress-updates"
            },
            "id": "#seconds_between_progress_updates",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Output traversal statistics every time this many seconds elapse Default value: 10.0.",
            "sbg:altPrefix": "",
            "label": "Seconds Between Progress Updates"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--sample"
            },
            "id": "#sample",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the sample(s) to keep, filtering out all others This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Sample"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--round-down-quantized"
            },
            "sbg:stageInput": null,
            "description": "Round quals down to nearest quantized qual Default value: false. Possible values: {true, false} Cannot be used in conjuction with argument(s) quantizationLevels (qq).",
            "sbg:category": "Advanced Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Round Down Quantized",
            "id": "#round_down_quantized"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".fai",
                "^.dict"
              ],
              "prefix": "--reference"
            },
            "sbg:fileTypes": "FASTA, FA",
            "id": "#reference",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "Reference sequence Default value: null.",
            "label": "Reference"
          },
          {
            "sbg:toolDefaultValue": "SILENT",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-validation-stringency"
            },
            "id": "#read_validation_stringency",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "STRICT",
                  "LENIENT",
                  "SILENT"
                ],
                "name": "null"
              }
            ],
            "description": "Validation stringency for all SAM/BAM/CRAM/SRA files read by this program. The default stringency value SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: SILENT. Possible values: {STRICT, LENIENT, SILENT}.",
            "sbg:altPrefix": "",
            "label": "Read Validation Stringency"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-name"
            },
            "id": "#read_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep only reads with this read name Required.",
            "sbg:altPrefix": "",
            "label": "Read Name"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-index"
            },
            "id": "#read_index",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "Indices to use for the read inputs. If specified, an index must be provided for every read input and in the same order as the read inputs. If this argument is not specified, the path to the index for each input will be inferred automatically. This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Index"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--read-filter"
            },
            "id": "#read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "AlignmentAgreesWithHeaderReadFilter",
                  "AllowAllReadsReadFilter",
                  "AmbiguousBaseReadFilter",
                  "CigarContainsNoNOperator",
                  "FirstOfPairReadFilter",
                  "FragmentLengthReadFilter",
                  "GoodCigarReadFilter",
                  "HasReadGroupReadFilter",
                  "LibraryReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityNotZeroReadFilter",
                  "MappingQualityReadFilter",
                  "MatchingBasesAndQualsReadFilter",
                  "MateDifferentStrandReadFilter",
                  "MateOnSameContigOrNoMappedMateReadFilter",
                  "MetricsReadFilter",
                  "NonZeroFragmentLengthReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotOpticalDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "NotSupplementaryAlignmentReadFilter",
                  "OverclippedReadFilter",
                  "PairedReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "PlatformReadFilter",
                  "PlatformUnitReadFilter",
                  "PrimaryLineReadFilter",
                  "ProperlyPairedReadFilter",
                  "ReadGroupBlackListReadFilter",
                  "ReadGroupReadFilter",
                  "ReadLengthEqualsCigarLengthReadFilter",
                  "ReadLengthReadFilter",
                  "ReadNameReadFilter",
                  "ReadStrandFilter",
                  "SampleReadFilter",
                  "SecondOfPairReadFilter",
                  "SeqIsStoredReadFilter",
                  "ValidAlignmentEndReadFilter",
                  "ValidAlignmentStartReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be applied before analysis This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Read Filter"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quiet"
            },
            "sbg:stageInput": null,
            "description": "Whether to suppress job-summary info on System.err. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Quiet",
            "id": "#quiet"
          },
          {
            "sbg:toolDefaultValue": "0",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--quantize-quals"
            },
            "id": "#quantize_quals",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Quantize quality scores to a given number of levels Default value: 0. Cannot be used in conjuction with argument(s) staticQuantizationQuals (SQQ) roundDown (RDQ).",
            "sbg:altPrefix": "",
            "label": "Quantize Quals"
          },
          {
            "sbg:toolDefaultValue": "6",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--preserve-qscores-less-than"
            },
            "id": "#preserve_qscores_less_than",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Don't recalibrate bases with quality scores less than this threshold Default value: 6.",
            "sbg:altPrefix": "",
            "label": "Preserve Qscores Less Than"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--pl-filter-name"
            },
            "id": "#pl_filter_name",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with RG:PL attribute containing this string This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Pl Filter Name"
          },
          {
            "sbg:toolDefaultValue": "10",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--minimum-mapping-quality"
            },
            "id": "#minimum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum mapping quality to keep (inclusive) Default value: 10.",
            "sbg:altPrefix": "",
            "label": "Minimum Mapping Quality"
          },
          {
            "sbg:toolDefaultValue": "1",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--min-read-length"
            },
            "id": "#min_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at least equal to the specified value Default value: 1.",
            "sbg:altPrefix": "",
            "label": "Min Read Length"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "sbg:stageInput": null,
            "label": "Memory Per Job",
            "id": "#memory_per_job"
          },
          {
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "sbg:stageInput": null,
            "label": "Memory Overhead Per Job",
            "id": "#memory_overhead_per_job"
          },
          {
            "sbg:toolDefaultValue": "null",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--maximum-mapping-quality"
            },
            "id": "#maximum_mapping_quality",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Maximum mapping quality to keep (inclusive) Default value: null.",
            "sbg:altPrefix": "",
            "label": "Maximum Mapping Quality"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-read-length"
            },
            "id": "#max_read_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only reads with length at most equal to the specified value Required.",
            "sbg:altPrefix": "",
            "label": "Max Read Length"
          },
          {
            "sbg:toolDefaultValue": "1000000",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--max-fragment-length"
            },
            "id": "#max_fragment_length",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Keep only read pairs with fragment length at most equal to the given value Default value: 1000000.",
            "sbg:altPrefix": "",
            "label": "Max Fragment Length"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--library"
            },
            "id": "#library",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the library to keep Required.",
            "sbg:altPrefix": "",
            "label": "Library"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--lenient"
            },
            "sbg:stageInput": null,
            "description": "Lenient processing of VCF files Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Lenient",
            "id": "#lenient"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-reverse"
            },
            "sbg:stageInput": null,
            "id": "#keep_reverse",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Keep only reads on the reverse strand Required. Possible values: {true, false}.",
            "sbg:altPrefix": "",
            "label": "Keep Reverse"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--keep-read-group"
            },
            "id": "#keep_read_group",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "The name of the read group to keep Required.",
            "sbg:altPrefix": "",
            "label": "Keep Read Group"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:stageInput": null,
            "id": "#intervals_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals over which to operate This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Intervals File"
          },
          {
            "sbg:toolDefaultValue": "UNION",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-set-rule"
            },
            "id": "#interval_set_rule",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "UNION",
                  "INTERSECTION"
                ],
                "name": "null"
              }
            ],
            "description": "Set merging approach to use for combining interval inputs Default value: UNION. Possible values: {UNION, INTERSECTION}.",
            "sbg:altPrefix": "",
            "label": "Interval Set Rule"
          },
          {
            "sbg:toolDefaultValue": "0",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-merging-rule"
            },
            "sbg:stageInput": null,
            "description": "Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL, OVERLAPPING_ONLY}",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "id": "#interval_merging_rule",
            "label": "Interval Padding"
          },
          {
            "sbg:toolDefaultValue": "0",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--interval-exclusion-padding"
            },
            "id": "#interval_exclusion_padding",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of padding (in bp) to add to each interval you are excluding. Default value: 0.",
            "sbg:altPrefix": "",
            "label": "Interval Exclusion Padding"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "secondaryFiles": [
                ".crai"
              ],
              "prefix": "--input"
            },
            "sbg:fileTypes": "CRAM",
            "id": "#input_cram",
            "required": false,
            "sbg:category": "Required Arguments",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "CRAM file containing reads This argument must be specified at least once.",
            "label": "Input cram"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "position": 0,
              "separate": true,
              "secondaryFiles": [
                ".bai"
              ],
              "prefix": "--input",
              "sbg:cmdInclude": true
            },
            "sbg:fileTypes": "BAM",
            "id": "#input_bam",
            "required": false,
            "sbg:category": "Required Arguments",
            "type": [
              "null",
              {
                "items": "File",
                "type": "array"
              }
            ],
            "description": "BAM/SAM file containing reads This argument must be specified at least once.",
            "label": "Input bam"
          },
          {
            "sbg:toolDefaultValue": "FALSE",
            "sbg:stageInput": null,
            "label": "Include Interval Name In Output Name",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Include interval name in output name.",
            "id": "#include_interval_name_in_output_name"
          },
          {
            "sbg:toolDefaultValue": "-1",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--global-q-score-prior"
            },
            "id": "#global_q_score_prior",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "float"
            ],
            "description": "Global Qscore Bayesian prior to use for BQSR Default value: -1.0.",
            "sbg:altPrefix": "",
            "label": "Global Q Score Prior"
          },
          {
            "sbg:toolDefaultValue": "30",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--filter-too-short"
            },
            "id": "#filter_too_short",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Value for which reads with less than this number of aligned bases is considered too short Default value: 30.",
            "sbg:altPrefix": "",
            "label": "Filter Too Short"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "id": "#exclude_intervas_string",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "string"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervas String"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--exclude-intervals"
            },
            "sbg:fileTypes": "TXT, BED",
            "id": "#exclude_intervals_file",
            "required": false,
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "File"
            ],
            "description": "One or more genomic intervals to exclude from processing This argument may be specified 0 or more times. Default value: null.",
            "sbg:altPrefix": "",
            "label": "Exclude Intervals File"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--emit-original-quals"
            },
            "sbg:stageInput": null,
            "description": "Emit original base qualities under the OQ tag Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Emit Original Quals",
            "id": "#emit_original_quals"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--dont-require-soft-clips-both-ends"
            },
            "sbg:stageInput": null,
            "description": "Allow a read to be filtered out based on having only 1 soft-clipped block. By default, both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped block. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Dont Require Soft Clips Both Ends",
            "id": "#dont_require_soft_clips_both_ends"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-tool-default-read-filters"
            },
            "sbg:stageInput": null,
            "description": "Disable all tool default read filters Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Disable Tool Default Read Filters",
            "id": "#disable_tool_default_read_filters"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-sequence-dictionary-validation"
            },
            "sbg:stageInput": null,
            "description": "If specified, do not check the sequence dictionaries from our inputs for compatibility. Use at your own risk! Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Disable Sequence Dictionary Validation",
            "id": "#disable_sequence_dictionary_validation"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-read-filter"
            },
            "id": "#disable_read_filter",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              {
                "type": "enum",
                "symbols": [
                  "GoodCigarReadFilter",
                  "MappedReadFilter",
                  "MappingQualityAvailableReadFilter",
                  "MappingQualityReadFilter",
                  "NonZeroReferenceLengthAlignmentReadFilter",
                  "NotDuplicateReadFilter",
                  "NotSecondaryAlignmentReadFilter",
                  "PassesVendorQualityCheckReadFilter",
                  "WellformedReadFilter"
                ],
                "name": "null"
              }
            ],
            "description": "Read filters to be disabled before analysis  This argument may be specified 0 or more times. Default value: null. Possible Values: {WellformedReadFilter}",
            "label": "Disable Read Filter"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--disable-bam-index-caching"
            },
            "sbg:stageInput": null,
            "description": "If true, don't cache bam indexes, this will reduce memory requirements but may harm performance if many intervals are specified. Caching is automatically disabled if there are no intervals specified. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Disable Bam Index Caching",
            "id": "#disable_bam_index_caching"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-md5"
            },
            "sbg:stageInput": null,
            "description": "If true, create a a MD5 digest any VCF file created. Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Output Variant Md5",
            "id": "#create_output_variant_md5"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-variant-index"
            },
            "sbg:stageInput": null,
            "description": "If true, create a VCF index when writing a coordinate-sorted VCF file. Default value: true. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Output Variant Index",
            "id": "#create_output_variant_index"
          },
          {
            "sbg:toolDefaultValue": "false",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--create-output-bam-md5"
            },
            "sbg:stageInput": null,
            "description": "If true, create a MD5 digest for any BAM/SAM/CRAM file created Default value: false. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Create Output Bam Md5",
            "id": "#create_output_bam_md5"
          },
          {
            "sbg:toolDefaultValue": "40",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-prefetch-buffer"
            },
            "id": "#cloud_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Default value: 40.",
            "sbg:altPrefix": "",
            "label": "Cloud Prefetch Buffer"
          },
          {
            "sbg:toolDefaultValue": "-1",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--cloud-index-prefetch-buffer"
            },
            "id": "#cloud_index_prefetch_buffer",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "int"
            ],
            "description": "Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to cloudPrefetchBuffer if unset. Default value: -1.",
            "sbg:altPrefix": "",
            "label": "Cloud Index Prefetch Buffer"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--bqsr-recal-file"
            },
            "id": "#bqsr_recal_file",
            "required": true,
            "sbg:category": "Required Arguments",
            "type": [
              "File"
            ],
            "description": "Input recalibration table for BQSR Required.",
            "sbg:altPrefix": "",
            "label": "Bqsr Recal File"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-listed-lanes"
            },
            "id": "#black_listed_lanes",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "Keep reads with platform units not on the list This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black Listed Lanes"
          },
          {
            "sbg:toolDefaultValue": null,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--black-list"
            },
            "id": "#black_list",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "string"
            ],
            "description": "This argument must be specified at least once. Required.",
            "sbg:altPrefix": "",
            "label": "Black List"
          },
          {
            "sbg:toolDefaultValue": "0",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--ambig-filter-frac"
            },
            "id": "#ambig_filter_frac",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "float"
            ],
            "description": "Threshold fraction of ambiguous bases Default value: 0.05.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Frac"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "--ambig-filter-bases"
            },
            "sbg:stageInput": null,
            "id": "#ambig_filter_bases",
            "sbg:category": "Conditional Arguments for readFilter",
            "type": [
              "null",
              "int"
            ],
            "description": "Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise, overrides threshold fraction. Cannot be used in conjunction with argument(s) maxAmbiguousBaseFraction.",
            "sbg:altPrefix": "",
            "label": "Ambig Filter Bases"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-vcf-command-line"
            },
            "sbg:stageInput": null,
            "description": "If true, adds a command line header line to created VCF files. Default value: true. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Add Output Vcf Command Line",
            "id": "#add_output_vcf_command_line"
          },
          {
            "sbg:toolDefaultValue": "true",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 0,
              "separate": true,
              "prefix": "--add-output-sam-program-record"
            },
            "sbg:stageInput": null,
            "description": "If true, adds a PG tag to created SAM/BAM/CRAM files. Default value: true. Possible values: {true, false}.",
            "sbg:category": "Optional Arguments",
            "type": [
              "null",
              "boolean"
            ],
            "sbg:altPrefix": "",
            "label": "Add Output Sam Program Record",
            "id": "#add_output_sam_program_record"
          }
        ],
        "description": "Apply base quality score recalibration.\n\n###**Overview**  \n\nThis tool performs the second pass in a two-stage process called Base Quality Score Recalibration (BQSR). Specifically, it recalibrates the base qualities of the input reads based on the recalibration table produced by the BaseRecalibrator tool, and outputs a recalibrated BAM or CRAM file.\n\n####**Summary of the BQSR procedure**\n\nThe goal of this procedure is to correct for systematic bias that affect the assignment of base quality scores by the sequencer. The first pass consists of calculating error empirically and finding patterns in how error varies with basecall features over all bases. The relevant observations are written to a recalibration table. The second pass consists of applying numerical corrections to each individual basecall based on the patterns identified in the first step (recorded in the recalibration table) and write out the recalibrated data to a new BAM or CRAM file.\n\n###**Inputs**  \n\n- A BAM or CRAM file containing input read data\n- The covariates table (= recalibration file) generated by BaseRecalibrator on the input BAM or CRAM file\n\n###**Output**  \n\nA BAM or CRAM file containing the recalibrated read data\n\n###**Usage example**  \n\n    ./gatk-launch ApplyBQSR \\   \n         -R reference.fasta \\ \n         -I input.bam \\  \n         -BQSR recalibration.table \\  \n         -O output.bam  \n\n###**Notes**\n\n- This tool replaces the use of PrintReads for the application of base quality score recalibration as practiced in earlier versions of GATK (2.x and 3.x).\n- You should only run ApplyBQSR with the covariates table created from the input BAM or CRAM file(s).\n- Original qualities can be retained in the output file under the \"OQ\" tag if desired. See the `--emit_original_quals` argument for details.  \n\n###**IMPORTANT NOTICE**  \n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding *.fai* (fasta index) and *.dict* (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the '***SBG FASTA Indices***' tool within your GATK based workflow before using any of the GATK tools.",
        "outputs": [
          {
            "sbg:fileTypes": "BAM,SAM,CRAM",
            "label": "Output",
            "outputBinding": {
              "glob": {
                "class": "Expression",
                "script": "{\n  if($job.inputs.input_cram){\n  \tinput = [].concat($job.inputs.input_cram)[0].path.split('/').slice(-1)[0]    \n  }\n  if($job.inputs.input_bam){\n  \tinput = [].concat($job.inputs.input_bam)[0].path.split('/').slice(-1)[0]\n  }\n  input = input.split('.').slice(-1)[0]\n  \n  return '*.' + input\n}",
                "engine": "#cwl-js-engine"
              },
              "sbg:metadata": {
                "intervals_file": {
                  "class": "Expression",
                  "script": "{ \n  if ($job.inputs.intervals_file)\n  \treturn $job.inputs.intervals_file.path.split('/').pop()\n  else\n  \treturn ''\n}",
                  "engine": "#cwl-js-engine"
                }
              },
              "secondaryFiles": [
                ".bai",
                ".crai"
              ],
              "sbg:inheritMetadataFrom": "#input"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Recalibrated BAM/SAM/CRAM file",
            "id": "#output"
          }
        ],
        "successCodes": [],
        "sbg:createdOn": 1500296630,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "/opt/gatk",
          "--java-options",
          {
            "class": "Expression",
            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '\\\"-Xmx'.concat($job.inputs.memory_per_job, 'M') + '\\\"'\n  }\n  \treturn '\\\"-Xmx2048M\\\"'\n}",
            "engine": "#cwl-js-engine"
          },
          "ApplyBQSR"
        ],
        "temporaryFailCodes": [],
        "sbg:project": "vladimirk/gatk-4-0-demo-1",
        "y": 270.2566226756189,
        "sbg:toolAuthor": "Broad Institute",
        "stdin": "",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 29,
        "sbg:wrapperAuthor": "filip_tubic",
        "sbg:links": [
          {
            "id": "https://software.broadinstitute.org/gatk/",
            "label": "Homepage"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/documentation/tooldocs/current/",
            "label": "Documentation"
          },
          {
            "id": "https://software.broadinstitute.org/gatk/download/",
            "label": "Download"
          }
        ],
        "sbg:latestRevision": 29,
        "sbg:createdBy": "teodora.aleksic",
        "sbg:publisher": "sbg",
        "sbg:cmdPreview": "/opt/gatk --java-options \"-Xmx2048M\" ApplyBQSR --bqsr-recal-file /path/to/bqsr.grp --output input_cram-1_1.recalibrated.cram  --create-output-bam-index",
        "sbg:modifiedBy": "nikola_jovanovic",
        "sbg:toolkitVersion": "4.0.2.0",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "hints": [
          {
            "class": "sbg:CPURequirement",
            "value": 1
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/teodora_aleksic/gatk:4.0.2.0"
          }
        ],
        "stdout": "",
        "x": 1268.0774601465412,
        "arguments": [
          {
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  interval_name = ''\n  \n  if ($job.inputs.include_interval_name_in_output_name){\n    if($job.inputs.intervals_file){\n      interval_path = [].concat($job.inputs.intervals_file)[0].path\n      interval_name = interval_path.split('/')[interval_path.split('/').length - 1].split('.')\n      interval_name.pop()\n      interval_name = '_' + interval_name.join('')\n    }\n  }\n  input = ''\n  if($job.inputs.input_cram){\n    input = [].concat($job.inputs.input_cram)[0].path.split('/').slice(-1)[0]\n  }\n  if($job.inputs.input_bam){\n    input = [].concat($job.inputs.input_bam)[0].path.split('/').slice(-1)[0]\n  }\n  input = input.split('.')\n  input = input.slice(0, -1).join('.') + interval_name +  '.recalibrated.' + input.slice(-1)\n  return input\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "--output"
          },
          {
            "valueFrom": "--create-output-bam-index",
            "separate": true
          },
          {
            "position": 100,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  interval_name = ''\n  interval_name = ''\n  \n  if ($job.inputs.include_interval_name_in_output_name){\n    if($job.inputs.intervals_file){\n      interval_path = [].concat($job.inputs.intervals_file)[0].path\n      interval_name = interval_path.split('/')[interval_path.split('/').length - 1].split('.')\n      interval_name.pop()\n      interval_name = '_' + interval_name.join('')\n    }\n  }\n  ext = 'bam'\n  input = ''\n  if($job.inputs.input_cram){\n\treturn ''\n  }\n  if($job.inputs.input_bam){\n    input = [].concat($job.inputs.input_bam)[0].path.split('/').slice(-1)[0]\n    input = input.split('.')\n    input_bai = input.slice(0, -1).join('.') + interval_name +  '.recalibrated.bai'\n    input_bam_bai = input.slice(0, -1).join('.') + interval_name +  '.recalibrated.bam.bai'\n\n    return ' && mv ' + input_bai + ' ' + input_bam_bai\n  }\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": false
          }
        ],
        "class": "CommandLineTool",
        "sbg:copyOf": "vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/67",
        "label": "GATK ApplyBQSR",
        "sbg:projectName": "GATK 4.0 - Demo",
        "sbg:toolkit": "GATK",
        "id": "vladimirk/gatk-4-0-demo-1/gatk-4-0-applybqsr/29",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/14",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1500296630
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/15",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1500640320
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/16",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1500887412
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/17",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1501605489
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/18",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1501610676
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/19",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1502190441
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/21",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1502283422
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/22",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1502287200
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/23",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1502287213
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/24",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1502288276
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/25",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1502718016
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/26",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1503405145
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/27",
            "sbg:revision": 12,
            "sbg:modifiedOn": 1504105684
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/28",
            "sbg:revision": 13,
            "sbg:modifiedOn": 1504272777
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/29",
            "sbg:revision": 14,
            "sbg:modifiedOn": 1504275123
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/30",
            "sbg:revision": 15,
            "sbg:modifiedOn": 1504789528
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/31",
            "sbg:revision": 16,
            "sbg:modifiedOn": 1511522826
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/32",
            "sbg:revision": 17,
            "sbg:modifiedOn": 1513786566
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/44",
            "sbg:revision": 18,
            "sbg:modifiedOn": 1515587867
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/46",
            "sbg:revision": 19,
            "sbg:modifiedOn": 1515590545
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/49",
            "sbg:revision": 20,
            "sbg:modifiedOn": 1515599120
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/50",
            "sbg:revision": 21,
            "sbg:modifiedOn": 1516365801
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/51",
            "sbg:revision": 22,
            "sbg:modifiedOn": 1516370357
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/52",
            "sbg:revision": 23,
            "sbg:modifiedOn": 1516960377
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/54",
            "sbg:revision": 24,
            "sbg:modifiedOn": 1516972151
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/56",
            "sbg:revision": 25,
            "sbg:modifiedOn": 1519648144
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/57",
            "sbg:revision": 26,
            "sbg:modifiedOn": 1520946186
          },
          {
            "sbg:modifiedBy": "teodora.aleksic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/58",
            "sbg:revision": 27,
            "sbg:modifiedOn": 1522248805
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/62",
            "sbg:revision": 28,
            "sbg:modifiedOn": 1531405403
          },
          {
            "sbg:modifiedBy": "nikola_jovanovic",
            "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/67",
            "sbg:revision": 29,
            "sbg:modifiedOn": 1531407772
          }
        ],
        "sbg:license": "Open source BSD (3-clause) license",
        "sbg:categories": [
          "GATK-4"
        ],
        "sbg:contributors": [
          "nikola_jovanovic",
          "vladimirk",
          "teodora.aleksic"
        ],
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1531407772,
        "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/gatk-applybqsr/67",
        "cwlVersion": "sbg:draft-2",
        "sbg:id": "h-02670849/h-7c497cc4/h-d6e563ae/0",
        "sbg:job": {
          "inputs": {
            "ambigFilterBases": 4,
            "intervals_string": "",
            "bqsr_recal_file": {
              "class": "File",
              "path": "/path/to/bqsr.grp",
              "secondaryFiles": [],
              "size": 0
            },
            "useOriginalQualities": true,
            "disableBamIndexCaching": true,
            "interval_merging_rule": "",
            "use_jdk_inflater": false,
            "emit_original_quals": false,
            "reference": {
              "class": "File",
              "path": "/path/to/reference.ext",
              "secondaryFiles": [
                {
                  "path": ".fai"
                },
                {
                  "path": "^.dict"
                }
              ],
              "size": 0
            },
            "input_cram": [
              {
                "class": "File",
                "path": "/path/to/input_cram-1.cram",
                "secondaryFiles": [],
                "size": 0
              },
              {
                "class": "File",
                "path": "/path/to/input_cram-2.ext",
                "secondaryFiles": [],
                "size": 0
              }
            ],
            "memory_per_job": 2048,
            "round_down_quantized": false,
            "disableSequenceDictionaryValidation": true,
            "use_jdk_deflater": false,
            "include_interval_name_in_output_name": true,
            "createOutputVariantIndex": true,
            "addOutputSAMProgramRecord": true,
            "createOutputVariantMD5": true,
            "exclude_intervas_string": "",
            "disableToolDefaultReadFilters": true,
            "memory_overhead_per_job": 0,
            "QUIET": true,
            "lenient": false,
            "addOutputVCFCommandLine": true,
            "input_bam": null,
            "createOutputBamIndex": true,
            "keepReverse": true,
            "createOutputBamMD5": true,
            "dontRequireSoftClipsBothEnds": true,
            "intervals_file": {
              "class": "File",
              "path": "/path/to/1.bed",
              "secondaryFiles": [],
              "size": 0
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 2048
          }
        }
      },
      "sbg:x": 1268.0774601465412,
      "scatter": "#GATK_ApplyBQSR.intervals_file",
      "id": "#GATK_ApplyBQSR"
    },
    {
      "inputs": [
        {
          "id": "#BWA_MEM_Bundle.wgs_hg38_mode_threads"
        },
        {
          "id": "#BWA_MEM_Bundle.verbose_level"
        },
        {
          "id": "#BWA_MEM_Bundle.use_soft_clipping"
        },
        {
          "id": "#BWA_MEM_Bundle.unpaired_read_penalty"
        },
        {
          "default": 15,
          "id": "#BWA_MEM_Bundle.total_memory"
        },
        {
          "default": 8,
          "id": "#BWA_MEM_Bundle.threads"
        },
        {
          "id": "#BWA_MEM_Bundle.speficy_distribution_parameters"
        },
        {
          "default": 2,
          "id": "#BWA_MEM_Bundle.sort_memory"
        },
        {
          "id": "#BWA_MEM_Bundle.smart_pairing_in_input_fastq"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_pairing"
        },
        {
          "id": "#BWA_MEM_Bundle.skip_mate_rescue"
        },
        {
          "id": "#BWA_MEM_Bundle.select_seeds"
        },
        {
          "id": "#BWA_MEM_Bundle.seed_occurrence_for_the_3rd_round"
        },
        {
          "id": "#BWA_MEM_Bundle.score_for_a_sequence_match"
        },
        {
          "id": "#BWA_MEM_Bundle.sambamba_threads"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_sample_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_platform_unit_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_platform"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_median_fragment_length"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_library_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_id"
        },
        {
          "id": "#BWA_MEM_Bundle.rg_data_submitting_center"
        },
        {
          "default": 1,
          "id": "#BWA_MEM_Bundle.reserved_threads"
        },
        {
          "source": [
            "#BWA_INDEX_1.indexed_reference"
          ],
          "id": "#BWA_MEM_Bundle.reference_index_tar"
        },
        {
          "id": "#BWA_MEM_Bundle.read_type"
        },
        {
          "id": "#BWA_MEM_Bundle.read_group_header"
        },
        {
          "id": "#BWA_MEM_Bundle.output_name"
        },
        {
          "id": "#BWA_MEM_Bundle.output_in_xa"
        },
        {
          "id": "#BWA_MEM_Bundle.output_header"
        },
        {
          "id": "#BWA_MEM_Bundle.output_format"
        },
        {
          "id": "#BWA_MEM_Bundle.output_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle.num_bases_reproducibility"
        },
        {
          "id": "#BWA_MEM_Bundle.mismatch_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.minimum_seed_length"
        },
        {
          "id": "#BWA_MEM_Bundle.minimum_output_score"
        },
        {
          "id": "#BWA_MEM_Bundle.mate_rescue_rounds"
        },
        {
          "id": "#BWA_MEM_Bundle.mark_shorter"
        },
        {
          "id": "#BWA_MEM_Bundle.insert_string_to_header"
        },
        {
          "source": [
            "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
          ],
          "id": "#BWA_MEM_Bundle.input_reads"
        },
        {
          "id": "#BWA_MEM_Bundle.ignore_alt_file"
        },
        {
          "id": "#BWA_MEM_Bundle.gap_open_penalties"
        },
        {
          "id": "#BWA_MEM_Bundle.gap_extension_penalties"
        },
        {
          "id": "#BWA_MEM_Bundle.filter_out_secondary_alignments"
        },
        {
          "id": "#BWA_MEM_Bundle.dropoff"
        },
        {
          "id": "#BWA_MEM_Bundle.drop_chains_fraction"
        },
        {
          "id": "#BWA_MEM_Bundle.discard_exact_matches"
        },
        {
          "id": "#BWA_MEM_Bundle.discard_chain_length"
        },
        {
          "default": "RemoveDuplicates",
          "id": "#BWA_MEM_Bundle.deduplication"
        },
        {
          "id": "#BWA_MEM_Bundle.clipping_penalty"
        },
        {
          "id": "#BWA_MEM_Bundle.band_width"
        },
        {
          "id": "#BWA_MEM_Bundle.append_comment"
        }
      ],
      "sbg:y": 99.99999792335989,
      "outputs": [
        {
          "id": "#BWA_MEM_Bundle.samblaster_log"
        },
        {
          "id": "#BWA_MEM_Bundle.aligned_reads"
        }
      ],
      "run": {
        "inputs": [
          {
            "sbg:toolDefaultValue": "False",
            "sbg:stageInput": null,
            "id": "#wgs_hg38_mode_threads",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Lower the number of threads if HG38 reference genome is used.",
            "label": "Optimize threads for HG38"
          },
          {
            "sbg:toolDefaultValue": "3",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-v"
            },
            "id": "#verbose_level",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "verbose_level",
                "symbols": [
                  "1",
                  "2",
                  "3",
                  "4"
                ]
              }
            ],
            "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
            "label": "Verbose level"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-Y"
            },
            "label": "Use soft clipping",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Use soft clipping for supplementary alignments.",
            "id": "#use_soft_clipping"
          },
          {
            "sbg:toolDefaultValue": "17",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-U"
            },
            "id": "#unpaired_read_penalty",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              "int"
            ],
            "description": "Penalty for an unpaired read pair.",
            "label": "Unpaired read penalty"
          },
          {
            "sbg:toolDefaultValue": "15",
            "sbg:stageInput": null,
            "id": "#total_memory",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
            "label": "Total memory"
          },
          {
            "sbg:toolDefaultValue": "8",
            "label": "Threads",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
            "id": "#threads"
          },
          {
            "inputBinding": {
              "itemSeparator": null,
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "-I"
            },
            "label": "Specify distribution parameters",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              {
                "items": "float",
                "type": "array",
                "name": "speficy_distribution_parameters"
              }
            ],
            "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
            "id": "#speficy_distribution_parameters"
          },
          {
            "label": "Memory for BAM sorting",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory).",
            "id": "#sort_memory"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-p"
            },
            "label": "Smart pairing in input FASTQ file",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
            "id": "#smart_pairing_in_input_fastq"
          },
          {
            "sbg:toolDefaultValue": "500",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-c"
            },
            "id": "#skip_seeds",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "int"
            ],
            "description": "Skip seeds with more than INT occurrences.",
            "label": "Skip seeds with more than INT occurrences"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-P"
            },
            "label": "Skip pairing",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Skip pairing; mate rescue performed unless -S also in use.",
            "id": "#skip_pairing"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-S"
            },
            "label": "Skip mate rescue",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Skip mate rescue.",
            "id": "#skip_mate_rescue"
          },
          {
            "sbg:toolDefaultValue": "1.5",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-r"
            },
            "id": "#select_seeds",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "float"
            ],
            "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
            "label": "Select seeds"
          },
          {
            "sbg:toolDefaultValue": "20",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-y"
            },
            "id": "#seed_occurrence_for_the_3rd_round",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "int"
            ],
            "description": "Seed occurrence for the 3rd round seeding.",
            "label": "Seed occurrence for the 3rd round"
          },
          {
            "sbg:toolDefaultValue": "1",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-A"
            },
            "id": "#score_for_a_sequence_match",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              "int"
            ],
            "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
            "label": "Score for a sequence match"
          },
          {
            "label": "Sambamba Sort threads",
            "sbg:category": "Execution",
            "type": [
              "null",
              "int"
            ],
            "description": "Number of threads to pass to Sambamba sort, if used.",
            "id": "#sambamba_threads"
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Sample ID",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
            "id": "#rg_sample_id"
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Platform unit ID",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
            "id": "#rg_platform_unit_id"
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Platform",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "rg_platform",
                "symbols": [
                  "454",
                  "Helicos",
                  "Illumina",
                  "Solid",
                  "IonTorrent"
                ]
              }
            ],
            "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
            "id": "#rg_platform"
          },
          {
            "label": "Median fragment length",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Specify the median fragment length for RG line.",
            "id": "#rg_median_fragment_length"
          },
          {
            "sbg:toolDefaultValue": "Inferred from metadata",
            "label": "Library ID",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
            "id": "#rg_library_id"
          },
          {
            "sbg:toolDefaultValue": "1",
            "label": "Read group ID",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "string"
            ],
            "description": "Read group ID",
            "id": "#rg_id"
          },
          {
            "label": "Data submitting center",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Specify the data submitting center for RG line.",
            "id": "#rg_data_submitting_center"
          },
          {
            "sbg:toolDefaultValue": "1",
            "sbg:stageInput": null,
            "id": "#reserved_threads",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "int"
            ],
            "description": "Reserved number of threads on the instance used by scheduler.",
            "label": "Reserved number of threads on the instance"
          },
          {
            "sbg:fileTypes": "TAR",
            "sbg:stageInput": "link",
            "id": "#reference_index_tar",
            "required": true,
            "sbg:category": "Input files",
            "type": [
              "File"
            ],
            "description": "Reference fasta file with BWA index files packed in TAR.",
            "label": "Reference Index TAR"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-x"
            },
            "label": "Sequencing technology-specific settings",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "read_type",
                "symbols": [
                  "pacbio",
                  "ont2d",
                  "intractg"
                ]
              }
            ],
            "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
            "id": "#read_type"
          },
          {
            "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
            "label": "Read group header",
            "sbg:category": "BWA Read Group Options",
            "type": [
              "null",
              "string"
            ],
            "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
            "id": "#read_group_header"
          },
          {
            "label": "Output SAM/BAM file name",
            "sbg:category": "Configuration",
            "type": [
              "null",
              "string"
            ],
            "description": "Name of the output BAM file.",
            "id": "#output_name"
          },
          {
            "sbg:toolDefaultValue": "[5, 200]",
            "inputBinding": {
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "-h"
            },
            "id": "#output_in_xa",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
            "label": "Output in XA"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-V"
            },
            "label": "Output header",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output the reference FASTA header in the XR tag.",
            "id": "#output_header"
          },
          {
            "sbg:toolDefaultValue": "Coordinate Sorted BAM",
            "label": "Output format",
            "sbg:category": "Execution",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "output_format",
                "symbols": [
                  "SAM",
                  "BAM",
                  "Coordinate Sorted BAM",
                  "Queryname Sorted BAM",
                  "Natural Sorted BAM"
                ]
              }
            ],
            "description": "Specify output format.",
            "id": "#output_format"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-a"
            },
            "label": "Output alignments",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Output all alignments for SE or unpaired PE.",
            "id": "#output_alignments"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-K"
            },
            "sbg:stageInput": null,
            "label": "Number of bases to process reproducibility",
            "type": [
              "null",
              "int"
            ],
            "description": "process INT input bases in each batch regardless of nThreads (for reproducibility)",
            "id": "#num_bases_reproducibility"
          },
          {
            "sbg:toolDefaultValue": "4",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-B"
            },
            "id": "#mismatch_penalty",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              "int"
            ],
            "description": "Penalty for a mismatch.",
            "label": "Mismatch penalty"
          },
          {
            "sbg:toolDefaultValue": "19",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-k"
            },
            "id": "#minimum_seed_length",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum seed length for BWA MEM.",
            "label": "Minimum seed length"
          },
          {
            "sbg:toolDefaultValue": "30",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-T"
            },
            "id": "#minimum_output_score",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "int"
            ],
            "description": "Minimum alignment score for a read to be output in SAM/BAM.",
            "label": "Minimum alignment score for a read to be output in SAM/BAM"
          },
          {
            "sbg:toolDefaultValue": "50",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-m"
            },
            "id": "#mate_rescue_rounds",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "string"
            ],
            "description": "Perform at most INT rounds of mate rescues for each read.",
            "label": "Mate rescue rounds"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-M"
            },
            "label": "Mark shorter",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Mark shorter split hits as secondary.",
            "id": "#mark_shorter"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-H"
            },
            "label": "Insert string to output SAM or BAM header",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "string"
            ],
            "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
            "id": "#insert_string_to_header"
          },
          {
            "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
            "label": "Input reads",
            "required": true,
            "sbg:category": "Input files",
            "type": [
              {
                "items": "File",
                "type": "array",
                "name": "input_reads"
              }
            ],
            "description": "Input sequence reads.",
            "id": "#input_reads"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-j"
            },
            "label": "Ignore ALT file",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
            "id": "#ignore_alt_file"
          },
          {
            "sbg:toolDefaultValue": "[6,6]",
            "inputBinding": {
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "-O"
            },
            "id": "#gap_open_penalties",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
            "label": "Gap open penalties"
          },
          {
            "sbg:toolDefaultValue": "[1,1]",
            "inputBinding": {
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "-E"
            },
            "id": "#gap_extension_penalties",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
            "label": "Gap extension"
          },
          {
            "sbg:toolDefaultValue": "False",
            "sbg:stageInput": null,
            "id": "#filter_out_secondary_alignments",
            "sbg:category": "Execution",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
            "label": "Filter out secondary alignments"
          },
          {
            "sbg:toolDefaultValue": "100",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-d"
            },
            "id": "#dropoff",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "int"
            ],
            "description": "Off-diagonal X-dropoff.",
            "label": "Dropoff"
          },
          {
            "sbg:toolDefaultValue": "0.50",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-D"
            },
            "id": "#drop_chains_fraction",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "float"
            ],
            "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
            "label": "Drop chains fraction"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-e"
            },
            "label": "Discard exact matches",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Discard full-length exact matches.",
            "id": "#discard_exact_matches"
          },
          {
            "sbg:toolDefaultValue": "0",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-W"
            },
            "id": "#discard_chain_length",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "int"
            ],
            "description": "Discard a chain if seeded bases shorter than INT.",
            "label": "Discard chain length"
          },
          {
            "sbg:toolDefaultValue": "MarkDuplicates",
            "label": "PCR duplicate detection",
            "sbg:category": "Samblaster parameters",
            "type": [
              "null",
              {
                "type": "enum",
                "name": "deduplication",
                "symbols": [
                  "None",
                  "MarkDuplicates",
                  "RemoveDuplicates"
                ]
              }
            ],
            "description": "Use Samblaster for finding duplicates on sequence reads.",
            "id": "#deduplication"
          },
          {
            "sbg:toolDefaultValue": "[5,5]",
            "inputBinding": {
              "itemSeparator": ",",
              "sbg:cmdInclude": true,
              "separate": false,
              "prefix": "-L"
            },
            "id": "#clipping_penalty",
            "sbg:category": "BWA Scoring options",
            "type": [
              "null",
              {
                "items": "int",
                "type": "array"
              }
            ],
            "description": "Penalty for 5'- and 3'-end clipping.",
            "label": "Clipping penalty"
          },
          {
            "sbg:toolDefaultValue": "100",
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-w"
            },
            "id": "#band_width",
            "sbg:category": "BWA Algorithm options",
            "type": [
              "null",
              "int"
            ],
            "description": "Band width for banded alignment.",
            "label": "Band width"
          },
          {
            "inputBinding": {
              "sbg:cmdInclude": true,
              "separate": true,
              "prefix": "-C"
            },
            "label": "Append comment",
            "sbg:category": "BWA Input/output options",
            "type": [
              "null",
              "boolean"
            ],
            "description": "Append FASTA/FASTQ comment to SAM output.",
            "id": "#append_comment"
          }
        ],
        "sbg:project": "vladimirk/bwa-mem-bundle-0-7-17-demo",
        "sbg:validationErrors": [],
        "sbg:image_url": null,
        "outputs": [
          {
            "sbg:fileTypes": "LOG",
            "label": "Samblaster log",
            "outputBinding": {
              "glob": "*.samblaster.log"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Log file for Samblaster mark duplicates",
            "id": "#samblaster_log"
          },
          {
            "sbg:fileTypes": "SAM, BAM",
            "label": "Aligned SAM/BAM",
            "outputBinding": {
              "glob": "{*.sam,*.bam}",
              "sbg:metadata": {
                "reference_genome": {
                  "class": "Expression",
                  "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                  "engine": "#cwl-js-engine"
                }
              },
              "secondaryFiles": [
                ".bai",
                "^.bai"
              ],
              "sbg:inheritMetadataFrom": "#input_reads"
            },
            "type": [
              "null",
              "File"
            ],
            "description": "Aligned reads.",
            "id": "#aligned_reads"
          }
        ],
        "label": "BWA MEM Bundle",
        "successCodes": [],
        "sbg:createdOn": 1530796841,
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "class": "DockerRequirement",
                "dockerPull": "rabix/js-engine"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "id": "vladimirk/bwa-mem-bundle-0-7-17-demo/bwa-mem-bundle-0-7-17/11",
        "baseCommand": [
          {
            "class": "Expression",
            "script": "{\n  cmd = \"/bin/bash -c \\\"\"\n  return cmd\n}",
            "engine": "#cwl-js-engine"
          },
          {
            "class": "Expression",
            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
            "engine": "#cwl-js-engine"
          },
          {
            "class": "Expression",
            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  if (reference_file.endsWith('.tar')){\n    reference_file = reference_file.substring(0, reference_file.length-4)\n  }\n\n\n  if(!$job.inputs.ignore_alt_file){\n    if (reference_file.search('38') >= 0){\n      return 'cp /opt/hs38DH.fa.alt ' + reference_file + '.alt ; '\n    }\n  }\n  \n}",
            "engine": "#cwl-js-engine"
          },
          "bwa",
          "mem"
        ],
        "temporaryFailCodes": [],
        "hints": [
          {
            "class": "DockerRequirement",
            "dockerImageId": "",
            "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.17"
          },
          {
            "class": "sbg:CPURequirement",
            "value": {
              "class": "Expression",
              "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "class": "sbg:MemRequirement",
            "value": {
              "class": "Expression",
              "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "y": 99.99999792335989,
        "stdout": "",
        "x": 367.6924870903057,
        "arguments": [
          {
            "position": 111,
            "valueFrom": {
              "class": "Expression",
              "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else if ($job.inputs.wgs_hg38_mode_threads){\n    MAX_THREADS = 36\n    ref_name_arr = $job.inputs.reference_index_tar.path.split('/')\n    ref_name = ref_name_arr[ref_name_arr.length - 1]\n    if (ref_name.search('38') >= 0){threads = $job.inputs.wgs_hg38_mode_threads}\n    else {threads = MAX_THREADS}\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = 'sambamba'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": false,
            "prefix": ""
          },
          {
            "position": 112,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else if ($job.inputs.wgs_hg38_mode_threads){\n    MAX_THREADS = 36\n    ref_name_arr = $job.inputs.reference_index_tar.path.split('/')\n    ref_name = ref_name_arr[ref_name_arr.length - 1]\n    if (ref_name.search('38') >= 0){threads = $job.inputs.wgs_hg38_mode_threads}\n    else {threads = MAX_THREADS}\n  }\n  else { threads = 8 }\n  \n  \n  sambamba_path = 'sambamba'\n  \n  // Coordinate Sorted BAM is default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    append = ''\n    if ($job.inputs.output_format == 'Queryname Sorted BAM'){\n\t\tappend = ' --sort-by-name'\n    }\n    else if($job.inputs.output_format == 'Natural Sorted BAM'){\n      \tappend = ' --natural-sort'\n    }\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads + append\n    return cmd + \" -m \" + sorter_memory_string + \" --tmpdir ./ -o \" + name + \".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
              "engine": "#cwl-js-engine"
            },
            "separate": false
          },
          {
            "position": 110,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n     $job.inputs.mark_shorter ? cmd = \"| samblaster -M -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\" : cmd = \"| samblaster -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\"\n     return cmd\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    $job.inputs.mark_shorter ? cmd = \"| samblaster -M -r -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\" : cmd = \"| samblaster -r -i /dev/stdin -o /dev/stdout 2>\" + name + \".samblaster.log\"\n  \treturn cmd\n  }\n  else{\n   return \"\" \n  }\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "position": 1,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  if($job.inputs.rg_id){\n    add_param('ID', $job.inputs.rg_id)\n  }\n  else {\n    add_param('ID', '1')\n  } \n   \n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n    if(read_metadata.platform == 'HiSeq X Ten'){\n      rg_platform = 'Illumina'\n    }\n    else{\n      rg_platform = read_metadata.platform\n    }\n  \tadd_param('PL', rg_platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "position": 101,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "position": 2,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  MAX_THREADS = 36\n  suggested_threads = 8\n  \n  if($job.inputs.threads){ threads = $job.inputs.threads  }\n  else if ($job.inputs.wgs_hg38_mode_threads){\n    ref_name_arr = $job.inputs.reference_index_tar.path.split('/')\n    ref_name = ref_name_arr[ref_name_arr.length - 1]\n    if (ref_name.search('38') >= 0){threads = $job.inputs.wgs_hg38_mode_threads}\n    else {threads = MAX_THREADS}\n  }\n  else{ threads = suggested_threads  }\n    \n  return threads\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true,
            "prefix": "-t"
          },
          {
            "position": 10,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  name = ''\n  metadata = [].concat($job.inputs.reference_index_tar)[0].metadata\n  \n  if (metadata && metadata.reference_genome) {\n \tname = metadata.reference_genome\n  }\n  else {\n\treference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  \tname = reference_file.slice(0, -4) // cut .tar extension \n  }\n    \n  return name \t\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          },
          {
            "position": 10000,
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  cmd = \";declare -i pipe_statuses=(\\\\${PIPESTATUS[*]});len=\\\\${#pipe_statuses[@]};declare -i tot=0;echo \\\\${pipe_statuses[*]};for (( i=0; i<\\\\${len}; i++ ));do if [ \\\\${pipe_statuses[\\\\$i]} -ne 0 ];then tot=\\\\${pipe_statuses[\\\\$i]}; fi;done;if [ \\\\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\\\${pipe_statuses[*]};fi; if [ \\\\$tot -ne 0 ]; then false;fi\\\"\"\n  return cmd\n}",
              "engine": "#cwl-js-engine"
            },
            "separate": true
          }
        ],
        "class": "CommandLineTool",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Copy of vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-mem-bundle-0-7-13/46",
            "sbg:revision": 0,
            "sbg:modifiedOn": 1530796841
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "init",
            "sbg:revision": 1,
            "sbg:modifiedOn": 1530798840
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "added biobambam2 sort",
            "sbg:revision": 2,
            "sbg:modifiedOn": 1530804573
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "dedup added",
            "sbg:revision": 3,
            "sbg:modifiedOn": 1530804812
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "boolean inputs fixed",
            "sbg:revision": 4,
            "sbg:modifiedOn": 1530805386
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "output written with >",
            "sbg:revision": 5,
            "sbg:modifiedOn": 1530806442
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "sambamba and samblaster",
            "sbg:revision": 6,
            "sbg:modifiedOn": 1531825239
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "samblaster path corrected",
            "sbg:revision": 7,
            "sbg:modifiedOn": 1531832638
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Added ALT Contig reference",
            "sbg:revision": 8,
            "sbg:modifiedOn": 1531834946
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "docs",
            "sbg:revision": 9,
            "sbg:modifiedOn": 1531844922
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "num_bases_reproducibility",
            "sbg:revision": 10,
            "sbg:modifiedOn": 1531845530
          },
          {
            "sbg:modifiedBy": "vladimirk",
            "sbg:revisionNotes": "Do_not_use_alt_38 parameter removed due to redundancy",
            "sbg:revision": 11,
            "sbg:modifiedOn": 1532099074
          }
        ],
        "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.17): Samblaster. (0.1.22) and Sambamba (v0.6.7). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Sorted BAM is the default output of BWA MEM. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
        "sbg:projectName": "BWA MEM Bundle 0.7.17 - Demo",
        "sbg:publisher": "sbg",
        "stdin": "",
        "sbg:modifiedBy": "vladimirk",
        "$namespaces": {
          "sbg": "https://sevenbridges.com"
        },
        "sbg:sbgMaintained": false,
        "sbg:revision": 11,
        "sbg:toolkit": "BWA",
        "sbg:toolkitVersion": "0.7.17",
        "sbg:categories": [
          "Alignment",
          "FASTQ-Processing"
        ],
        "sbg:links": [
          {
            "id": "http://bio-bwa.sourceforge.net/",
            "label": "Homepage"
          },
          {
            "id": "https://github.com/lh3/bwa",
            "label": "Source code"
          },
          {
            "id": "http://bio-bwa.sourceforge.net/bwa.shtml",
            "label": "Wiki"
          },
          {
            "id": "http://sourceforge.net/projects/bio-bwa/",
            "label": "Download"
          },
          {
            "id": "http://arxiv.org/abs/1303.3997",
            "label": "Publication"
          },
          {
            "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168",
            "label": "Publication BWA Algorithm"
          }
        ],
        "sbg:latestRevision": 11,
        "sbg:toolAuthor": "Heng Li",
        "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
        "sbg:createdBy": "vladimirk",
        "sbg:id": "h-f920a80c/h-4491ef0b/h-bb01c6cb/0",
        "sbg:cmdPreview": "/bin/bash -c \" tar -xf reference.HG38.fasta.tar ;  cp /opt/hs38DH.fa.alt reference.HG38.fasta.alt ;  bwa mem  -R '@RG\\tID:1\\tPL:Illumina\\tSM:dnk_sample' -t 10  reference.HG38.fasta  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz   | sambamba view -t 10 -f bam -l 0 -S /dev/stdin | sambamba sort -t 10 --natural-sort -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin  ;declare -i pipe_statuses=(\\${PIPESTATUS[*]});len=\\${#pipe_statuses[@]};declare -i tot=0;echo \\${pipe_statuses[*]};for (( i=0; i<\\${len}; i++ ));do if [ \\${pipe_statuses[\\$i]} -ne 0 ];then tot=\\${pipe_statuses[\\$i]}; fi;done;if [ \\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\${pipe_statuses[*]};fi; if [ \\$tot -ne 0 ]; then false;fi\"",
        "sbg:appVersion": [
          "sbg:draft-2"
        ],
        "sbg:modifiedOn": 1532099074,
        "sbg:revisionNotes": "Do_not_use_alt_38 parameter removed due to redundancy",
        "cwlVersion": "sbg:draft-2",
        "sbg:contributors": [
          "vladimirk"
        ],
        "sbg:job": {
          "inputs": {
            "num_bases_reproducibility": 10,
            "band_width": null,
            "mark_shorter": false,
            "rg_median_fragment_length": "",
            "rg_library_id": "",
            "rg_data_submitting_center": "",
            "reference_index_tar": {
              "class": "File",
              "path": "/path/to/reference.HG38.fasta.tar",
              "secondaryFiles": [
                {
                  "path": ".amb"
                },
                {
                  "path": ".ann"
                },
                {
                  "path": ".bwt"
                },
                {
                  "path": ".pac"
                },
                {
                  "path": ".sa"
                }
              ],
              "size": 0
            },
            "rg_platform_unit_id": "",
            "threads": null,
            "rg_platform": null,
            "wgs_hg38_mode_threads": 10,
            "sort_memory": null,
            "read_group_header": "",
            "total_memory": null,
            "filter_out_secondary_alignments": false,
            "input_reads": [
              {
                "class": "File",
                "metadata": {
                  "platform": "HiSeq X Ten",
                  "sample_id": "dnk_sample",
                  "paired_end": "2"
                },
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz",
                "secondaryFiles": [],
                "size": 30000000000
              },
              {
                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
              }
            ],
            "sambamba_threads": null,
            "deduplication": null,
            "output_format": "Natural Sorted BAM",
            "reserved_threads": 3,
            "rg_id": "",
            "output_name": "",
            "rg_sample_id": "",
            "skip_seeds": null
          },
          "allocatedResources": {
            "cpu": 3,
            "mem": 4096
          }
        }
      },
      "sbg:x": 367.6924870903057,
      "scatter": "#BWA_MEM_Bundle.input_reads",
      "id": "#BWA_MEM_Bundle"
    }
  ],
  "sbg:canvas_zoom": 0.6499999999999997,
  "$namespaces": {
    "sbg": "https://sevenbridges.com"
  },
  "sbg:toolkit": "GATK",
  "sbg:revisionsInfo": [
    {
      "sbg:revision": 0,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "Take GATK CollectAlignmentSummaryMetrics from GATK 4.0 Demo project"
    },
    {
      "sbg:revision": 1,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "wes name"
    },
    {
      "sbg:revision": 2,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "Update Untar FASTA"
    },
    {
      "sbg:revision": 3,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "Description updated. Unnecessary outputs removed."
    },
    {
      "sbg:revision": 4,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "description title removed"
    },
    {
      "sbg:revision": 5,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "Update descriptions for GATK tools"
    },
    {
      "sbg:revision": 6,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554705,
      "sbg:revisionNotes": "Update GATK tools to new 4.beta.2 image"
    },
    {
      "sbg:revision": 7,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554706,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/78"
    },
    {
      "sbg:revision": 8,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554706,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/80"
    },
    {
      "sbg:revision": 9,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554706,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/102"
    },
    {
      "sbg:revision": 10,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554706,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/106"
    },
    {
      "sbg:revision": 11,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554706,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/107"
    },
    {
      "sbg:revision": 12,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554707,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/110"
    },
    {
      "sbg:revision": 13,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554707,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/113"
    },
    {
      "sbg:revision": 14,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554707,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/117"
    },
    {
      "sbg:revision": 15,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554707,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/121"
    },
    {
      "sbg:revision": 16,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1509554708,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/122"
    },
    {
      "sbg:revision": 17,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1517583113,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/127"
    },
    {
      "sbg:revision": 18,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1517583114,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/128"
    },
    {
      "sbg:revision": 19,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1517583114,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/133"
    },
    {
      "sbg:revision": 20,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1517583115,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/145"
    },
    {
      "sbg:revision": 21,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1519745465,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/147"
    },
    {
      "sbg:revision": 22,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1519745466,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/149"
    },
    {
      "sbg:revision": 23,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1519853729,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/150"
    },
    {
      "sbg:revision": 24,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1521478772,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/153"
    },
    {
      "sbg:revision": 25,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1521478772,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/155"
    },
    {
      "sbg:revision": 26,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1521737847,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/156"
    },
    {
      "sbg:revision": 27,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1528984442,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/157"
    },
    {
      "sbg:revision": 28,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1529424682,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/158"
    },
    {
      "sbg:revision": 29,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1530629817,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/159"
    },
    {
      "sbg:revision": 30,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1531304265,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/160"
    },
    {
      "sbg:revision": 31,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1532539346,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/161"
    },
    {
      "sbg:revision": 32,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1532539347,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/162"
    },
    {
      "sbg:revision": 33,
      "sbg:modifiedBy": "admin",
      "sbg:modifiedOn": 1539595318,
      "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/163"
    }
  ],
  "sbg:canvas_y": 211,
  "sbg:license": "Open source BSD (3-clause) license",
  "sbg:categories": [
    "WES-(WXS)",
    "GATK-4"
  ],
  "label": "Whole Exome Sequencing - BWA + GATK 4.0 (with Metrics)",
  "sbg:canvas_x": 225,
  "cwlVersion": "sbg:draft-2",
  "sbg:appVersion": [
    "sbg:draft-2"
  ],
  "id": "https://api.sbgenomics.com/v2/apps/admin/sbg-public-data/whole-exome-sequencing-bwa-gatk-4-0/33/raw/",
  "sbg:id": "admin/sbg-public-data/whole-exome-sequencing-bwa-gatk-4-0/33",
  "sbg:revision": 33,
  "sbg:revisionNotes": "Copy of vladimirk/whole-exome-pipeline-bwa-gatk-4-0-with-metrics-demo/whole-exome-pipeline-bwa-gatk-4-0-with-metrics/163",
  "sbg:modifiedOn": 1539595318,
  "sbg:modifiedBy": "admin",
  "sbg:createdOn": 1509554705,
  "sbg:createdBy": "admin",
  "sbg:project": "admin/sbg-public-data",
  "sbg:sbgMaintained": false,
  "sbg:validationErrors": [],
  "sbg:contributors": [
    "admin"
  ],
  "sbg:latestRevision": 33,
  "sbg:content_hash": null
}